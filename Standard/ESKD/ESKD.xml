<?xml version="1.0" ?>
<std:node name="ESKD V5R19.xml" type="drafting" xmlns:std="http://www.dsweb.com/std">
  <std:enumdef name="AnchorPoint">
    <std:strval name="AnchorPoint" >Top left</std:strval>
    <std:strval name="AnchorPoint" >Middle left</std:strval>
    <std:strval name="AnchorPoint" >Bottom left</std:strval>
    <std:strval name="AnchorPoint" >Top center</std:strval>
    <std:strval name="AnchorPoint" >Middle center</std:strval>
    <std:strval name="AnchorPoint" >Bottom center</std:strval>
    <std:strval name="AnchorPoint" >Top right</std:strval>
    <std:strval name="AnchorPoint" >Middle right</std:strval>
    <std:strval name="AnchorPoint" >Bottom right</std:strval>
  </std:enumdef>
  <std:enumdef name="AnchorLine">
    <std:strval name="AnchorLine" >Top or bottom</std:strval>
    <std:strval name="AnchorLine" >Cap or base</std:strval>
    <std:strval name="AnchorLine" >Global</std:strval>
    <std:strval name="AnchorLine" >Symbol</std:strval>
  </std:enumdef>
  <std:enumdef name="BomLabelType">
    <std:strval name="BomLabelType" >Number</std:strval>
    <std:strval name="BomLabelType" >Letter</std:strval>
  </std:enumdef>
  <std:enumdef name="TextJustification">
    <std:strval name="TextJustification" >Left</std:strval>
    <std:strval name="TextJustification" >Center</std:strval>
    <std:strval name="TextJustification" >Right</std:strval>
  </std:enumdef>
  <std:enumdef name="ForeshortenedOrientation">
    <std:strval name="ForeshortenedOrientation" >Parallel</std:strval>
    <std:strval name="ForeshortenedOrientation" >Convergent</std:strval>
  </std:enumdef>
  <std:enumdef name="ChamferMode">
    <std:strval name="ChamferMode" >Length</std:strval>
    <std:strval name="ChamferMode" >Length * Length</std:strval>
    <std:strval name="ChamferMode" >Length * Angle</std:strval>
    <std:strval name="ChamferMode" >Angle * Length</std:strval>
  </std:enumdef>
  <std:enumdef name="BlankProp">
    <std:strval name="BlankProp" >No</std:strval>
    <std:strval name="BlankProp" >AreaFill</std:strval>
    <std:strval name="BlankProp" >AreaFillandGeometry</std:strval>
  </std:enumdef>
  <std:enumdef name="TextOrientation">
    <std:strval name="TextOrientation" >Sheet</std:strval>
    <std:strval name="TextOrientation" >View or 2D component</std:strval>
  </std:enumdef>
  <std:enumdef name="Mirroring">
    <std:strval name="Mirroring" >No flip</std:strval>
    <std:strval name="Mirroring" >Auto flip</std:strval>
    <std:strval name="Mirroring" >Flip X</std:strval>
    <std:strval name="Mirroring" >Flip Y</std:strval>
    <std:strval name="Mirroring" >Flip XY</std:strval>
  </std:enumdef>
  <std:enumdef name="ArrowEndType">
    <std:strval name="ArrowEndType" >Automatic</std:strval>
    <std:strval name="ArrowEndType" >None</std:strval>
    <std:strval name="ArrowEndType" >SimpleArrow</std:strval>
    <std:strval name="ArrowEndType" >FilledArrow</std:strval>
    <std:strval name="ArrowEndType" >ClosedArrow</std:strval>
    <std:strval name="ArrowEndType" >SymetricArrow</std:strval>
    <std:strval name="ArrowEndType" >Circle</std:strval>
    <std:strval name="ArrowEndType" >FilledCircle</std:strval>
    <std:strval name="ArrowEndType" >SymetricCircle</std:strval>
    <std:strval name="ArrowEndType" >CrossCircle</std:strval>
    <std:strval name="ArrowEndType" >Slash</std:strval>
    <std:strval name="ArrowEndType" >Triangle</std:strval>
    <std:strval name="ArrowEndType" >FilledTriangle</std:strval>
    <std:strval name="ArrowEndType" >WhiteFilledSquare</std:strval>
    <std:strval name="ArrowEndType" >BlackFilledSquare</std:strval>
    <std:strval name="ArrowEndType" >Plus</std:strval>
    <std:strval name="ArrowEndType" >Cross</std:strval>
    <std:strval name="ArrowEndType" >DoubleArrow</std:strval>
    <std:strval name="ArrowEndType" >WaveArrow</std:strval>
    <std:strval name="ArrowEndType" >DoubleFilledArrow</std:strval>
  </std:enumdef>
  <std:enumdef name="FinishingMethod">
    <std:strval name="FinishingMethod" >None</std:strval>
    <std:strval name="FinishingMethod" >Unspecified</std:strval>
    <std:strval name="FinishingMethod" >Chipping</std:strval>
    <std:strval name="FinishingMethod" >Grinding</std:strval>
    <std:strval name="FinishingMethod" >Hammering</std:strval>
    <std:strval name="FinishingMethod" >Machining</std:strval>
    <std:strval name="FinishingMethod" >Rolling</std:strval>
    <std:strval name="FinishingMethod" >UnspecifiedU</std:strval>
  </std:enumdef>
  <std:enumdef name="FakeDimMode">
    <std:strval name="FakeDimMode" >None</std:strval>
    <std:strval name="FakeDimMode" >Numerical</std:strval>
    <std:strval name="FakeDimMode" >Alphanumerical</std:strval>
  </std:enumdef>
  <std:enumdef name="DimLineMode">
    <std:strval name="DimLineMode" >Regular</std:strval>
    <std:strval name="DimLineMode" >Two parts</std:strval>
    <std:strval name="DimLineMode" >Leader one part</std:strval>
    <std:strval name="DimLineMode" >Leader two parts</std:strval>
  </std:enumdef>
  <std:enumdef name="FrameGroup">
    <std:strval name="FrameGroup" >Main value</std:strval>
    <std:strval name="FrameGroup" >Dual value</std:strval>
    <std:strval name="FrameGroup" >Both values separately</std:strval>
    <std:strval name="FrameGroup" >Both values as a whole</std:strval>
  </std:enumdef>
  <std:enumdef name="TextHAlignment">
    <std:strval name="TextHAlignment" >Left</std:strval>
    <std:strval name="TextHAlignment" >Center</std:strval>
    <std:strval name="TextHAlignment" >Right</std:strval>
  </std:enumdef>
  <std:enumdef name="FormatOrientationType">
    <std:strval name="FormatOrientationType" >PortraitByDefault</std:strval>
    <std:strval name="FormatOrientationType" >LandscapeByDefault</std:strval>
    <std:strval name="FormatOrientationType" >PortraitOnly</std:strval>
    <std:strval name="FormatOrientationType" >LandscapeOnly</std:strval>
  </std:enumdef>
  <std:enumdef name="FixedRough">
    <std:strval name="FixedRough" >Fixed</std:strval>
    <std:strval name="FixedRough" >Variable with Symbol</std:strval>
  </std:enumdef>
  <std:enumdef name="UpDown">
    <std:strval name="UpDown" >Up</std:strval>
    <std:strval name="UpDown" >Down</std:strval>
  </std:enumdef>
  <std:enumdef name="Frame">
    <std:strval name="Frame" >None</std:strval>
    <std:strval name="Frame" >Rectangle</std:strval>
    <std:strval name="Frame" >Square</std:strval>
    <std:strval name="Frame" >Circle</std:strval>
    <std:strval name="Frame" >ScoredCircle</std:strval>
    <std:strval name="Frame" >Diamond</std:strval>
    <std:strval name="Frame" >Triangle</std:strval>
    <std:strval name="Frame" >RightFlag</std:strval>
    <std:strval name="Frame" >LeftFlag</std:strval>
    <std:strval name="Frame" >BothFlag</std:strval>
    <std:strval name="Frame" >Oblong</std:strval>
    <std:strval name="Frame" >Ellipse</std:strval>
    <std:strval name="Frame" >RightOblong</std:strval>
    <std:strval name="Frame" >LeftOblong</std:strval>
    <std:strval name="Frame" >Sticking</std:strval>
    <std:strval name="Frame" >Set</std:strval>
    <std:strval name="Frame" >Fixed support</std:strval>
    <std:strval name="Frame" >Nota</std:strval>
    <std:strval name="Frame" >SymPart</std:strval>
    <std:strval name="Frame" >SymSet</std:strval>
    <std:strval name="Frame" >ScoredRectangle</std:strval>
    <std:strval name="Frame" >Parallelogram</std:strval>
    <std:strval name="Frame" >Rectangle (fixed)</std:strval>
    <std:strval name="Frame" >Square (fixed)</std:strval>
    <std:strval name="Frame" >Circle (fixed)</std:strval>
    <std:strval name="Frame" >ScoredCircle (fixed)</std:strval>
    <std:strval name="Frame" >Diamond (fixed)</std:strval>
    <std:strval name="Frame" >Triangle (fixed)</std:strval>
    <std:strval name="Frame" >RightFlag (fixed)</std:strval>
    <std:strval name="Frame" >LeftFlag (fixed)</std:strval>
    <std:strval name="Frame" >BothFlag (fixed)</std:strval>
    <std:strval name="Frame" >Oblong (fixed)</std:strval>
    <std:strval name="Frame" >Ellipse (fixed)</std:strval>
    <std:strval name="Frame" >RightOblong (fixed)</std:strval>
    <std:strval name="Frame" >LeftOblong (fixed)</std:strval>
    <std:strval name="Frame" >Sticking (fixed)</std:strval>
    <std:strval name="Frame" >Set (fixed)</std:strval>
    <std:strval name="Frame" >Fixed support (fixed)</std:strval>
    <std:strval name="Frame" >Nota (fixed)</std:strval>
    <std:strval name="Frame" >SymPart (fixed)</std:strval>
    <std:strval name="Frame" >SymSet (fixed)</std:strval>
    <std:strval name="Frame" >ScoredRectangle (fixed)</std:strval>
    <std:strval name="Frame" >Parallelogram (fixed)</std:strval>
  </std:enumdef>
  <std:enumdef name="WeldingSymbol">
    <std:strval name="WeldingSymbol" >None</std:strval>
    <std:strval name="WeldingSymbol" >SquareWelding</std:strval>
    <std:strval name="WeldingSymbol" >VGrooveWelding</std:strval>
    <std:strval name="WeldingSymbol" >HVGrooveWelding</std:strval>
    <std:strval name="WeldingSymbol" >YGrooveWelding</std:strval>
    <std:strval name="WeldingSymbol" >HYGrooveWelding</std:strval>
    <std:strval name="WeldingSymbol" >UGrooveWelding</std:strval>
    <std:strval name="WeldingSymbol" >HUGrooveWelding</std:strval>
    <std:strval name="WeldingSymbol" >FilletWelding</std:strval>
    <std:strval name="WeldingSymbol" >CFlangeWelding</std:strval>
    <std:strval name="WeldingSymbol" >EFlangeWelding</std:strval>
    <std:strval name="WeldingSymbol" >VFlareWelding</std:strval>
    <std:strval name="WeldingSymbol" >HVFlareWelding</std:strval>
    <std:strval name="WeldingSymbol" >SpotWelding</std:strval>
    <std:strval name="WeldingSymbol" >BackWelding</std:strval>
    <std:strval name="WeldingSymbol" >HVOGrooveWelding</std:strval>
    <std:strval name="WeldingSymbol" >VOGrooveWelding</std:strval>
    <std:strval name="WeldingSymbol" >PlugWelding</std:strval>
    <std:strval name="WeldingSymbol" >MRWelding</std:strval>
    <std:strval name="WeldingSymbol" >MWelding</std:strval>
    <std:strval name="WeldingSymbol" >RechargeWelding</std:strval>
    <std:strval name="WeldingSymbol" >SpotJISWelding</std:strval>
  </std:enumdef>
  <std:enumdef name="DualValueMode">
    <std:strval name="DualValueMode" >No dual value</std:strval>
    <std:strval name="DualValueMode" >Below</std:strval>
    <std:strval name="DualValueMode" >Fractional</std:strval>
    <std:strval name="DualValueMode" >Side-by-side</std:strval>
  </std:enumdef>
  <std:enumdef name="FrameElement">
    <std:strval name="FrameElement" >Value</std:strval>
    <std:strval name="FrameElement" >Value and tolerance</std:strval>
    <std:strval name="FrameElement" >Value and tolerance and texts</std:strval>
  </std:enumdef>
  <std:enumdef name="DimScoring">
    <std:strval name="DimScoring" >None</std:strval>
    <std:strval name="DimScoring" >Value</std:strval>
    <std:strval name="DimScoring" >All</std:strval>
  </std:enumdef>
  <std:enumdef name="RoughnessMode">
    <std:strval name="RoughnessMode" >None</std:strval>
    <std:strval name="RoughnessMode" >M</std:strval>
    <std:strval name="RoughnessMode" >C</std:strval>
    <std:strval name="RoughnessMode" >R</std:strval>
    <std:strval name="RoughnessMode" >P</std:strval>
    <std:strval name="RoughnessMode" >X</std:strval>
    <std:strval name="RoughnessMode" >=</std:strval>
    <std:strval name="RoughnessMode" >Orthogonal</std:strval>
  </std:enumdef>
  <std:enumdef name="StandardMaterial">
    <std:strval name="StandardMaterial" >Standard</std:strval>
    <std:strval name="StandardMaterial" >Material</std:strval>
  </std:enumdef>
  <std:enumdef name="TextDisplay">
    <std:strval name="TextDisplay" >Show value</std:strval>
    <std:strval name="TextDisplay" >Show box</std:strval>
    <std:strval name="TextDisplay" >Hide value</std:strval>
  </std:enumdef>
  <std:enumdef name="CalloutTypes">
    <std:strval name="CalloutTypes" >Lines and arrows</std:strval>
    <std:strval name="CalloutTypes" >Lines, corners and arrows</std:strval>
    <std:strval name="CalloutTypes" >Corners ans arrows</std:strval>
    <std:strval name="CalloutTypes" >Only one arrow</std:strval>
  </std:enumdef>
  <std:enumdef name="ForeshortenedPosition">
    <std:strval name="ForeshortenedPosition" >On short segment</std:strval>
    <std:strval name="ForeshortenedPosition" >On long segment</std:strval>
  </std:enumdef>
  <std:enumdef name="ThreadRep">
    <std:strval name="ThreadRep" >Circle</std:strval>
    <std:strval name="ThreadRep" >Arc circle</std:strval>
  </std:enumdef>
  <std:enumdef name="FormatOrientation">
    <std:strval name="FormatOrientation" >Landscape</std:strval>
    <std:strval name="FormatOrientation" >Portrait</std:strval>
  </std:enumdef>
  <std:enumdef name="LineSpacingMode">
    <std:strval name="LineSpacingMode" >Bottom to top</std:strval>
    <std:strval name="LineSpacingMode" >Base to cap</std:strval>
    <std:strval name="LineSpacingMode" >Base to base</std:strval>
  </std:enumdef>
  <std:enumdef name="DetailCalloutTypes">
    <std:strval name="DetailCalloutTypes" >Leader text</std:strval>
    <std:strval name="DetailCalloutTypes" >Arrowed circle</std:strval>
    <std:strval name="DetailCalloutTypes" >Circle</std:strval>
  </std:enumdef>
  <std:enumdef name="DimOrientationRef">
    <std:strval name="DimOrientationRef" >Screen</std:strval>
    <std:strval name="DimOrientationRef" >View</std:strval>
    <std:strval name="DimOrientationRef" >Dimension line</std:strval>
  </std:enumdef>
  <std:enumdef name="ProjectionMethod">
    <std:strval name="ProjectionMethod" >First angle</std:strval>
    <std:strval name="ProjectionMethod" >Third angle</std:strval>
  </std:enumdef>
  <std:enumdef name="FontPitch">
    <std:strval name="FontPitch" >Fixed</std:strval>
    <std:strval name="FontPitch" >Variable</std:strval>
  </std:enumdef>
  <std:enumdef name="SymbolReversal">
    <std:strval name="SymbolReversal" >Auto</std:strval>
    <std:strval name="SymbolReversal" >InIn</std:strval>
    <std:strval name="SymbolReversal" >OutOut</std:strval>
    <std:strval name="SymbolReversal" >InOut</std:strval>
    <std:strval name="SymbolReversal" >OutIn</std:strval>
  </std:enumdef>
  <std:enumdef name="AuthorizedMode">
    <std:strval name="AuthorizedMode" >Authorized</std:strval>
    <std:strval name="AuthorizedMode" >Not Authorized</std:strval>
  </std:enumdef>
  <std:enumdef name="OffsetMode">
    <std:strval name="OffsetMode" >Constant</std:strval>
    <std:strval name="OffsetMode" >Semi</std:strval>
    <std:strval name="OffsetMode" >Free</std:strval>
  </std:enumdef>
  <std:enumdef name="DimSysAlign">
    <std:strval name="DimSysAlign" >ReferenceLine</std:strval>
    <std:strval name="DimSysAlign" >Center</std:strval>
    <std:strval name="DimSysAlign" >OppositeReferenceLine</std:strval>
    <std:strval name="DimSysAlign" >FromStandard</std:strval>
  </std:enumdef>
  <std:enumdef name="BomType">
    <std:strval name="BomType" >TopLevel</std:strval>
    <std:strval name="BomType" >Summarized</std:strval>
  </std:enumdef>
  <std:enumdef name="YesNo">
    <std:strval name="YesNo" >No</std:strval>
    <std:strval name="YesNo" >Yes</std:strval>
  </std:enumdef>
  <std:enumdef name="GenViewsPosMode">
    <std:strval name="GenViewsPosMode" >FixedCG</std:strval>
    <std:strval name="GenViewsPosMode" >FixedAxis</std:strval>
  </std:enumdef>
  <std:enumdef name="FontStyle">
    <std:strval name="FontStyle" >Regular</std:strval>
    <std:strval name="FontStyle" >Bold</std:strval>
    <std:strval name="FontStyle" >Italic</std:strval>
    <std:strval name="FontStyle" >Bold Italic</std:strval>
  </std:enumdef>
  <std:enumdef name="SurfaceShape">
    <std:strval name="SurfaceShape" >None</std:strval>
    <std:strval name="SurfaceShape" >Flat</std:strval>
    <std:strval name="SurfaceShape" >Convex</std:strval>
    <std:strval name="SurfaceShape" >Concave</std:strval>
    <std:strval name="SurfaceShape" >Flush</std:strval>
    <std:strval name="SurfaceShape" >Smooth</std:strval>
  </std:enumdef>
  <std:enumdef name="FunnelMode">
    <std:strval name="FunnelMode" >External</std:strval>
    <std:strval name="FunnelMode" >Internal</std:strval>
  </std:enumdef>
  <std:enumdef name="ValuePosition">
    <std:strval name="ValuePosition" >Auto</std:strval>
    <std:strval name="ValuePosition" >Inside</std:strval>
    <std:strval name="ValuePosition" >Outside</std:strval>
  </std:enumdef>
  <std:enumdef name="ChamferDisplayType">
    <std:strval name="ChamferDisplayType" >1 extension line</std:strval>
    <std:strval name="ChamferDisplayType" >2 extension lines</std:strval>
  </std:enumdef>
  <std:enumdef name="AttachmentToCallout">
    <std:strval name="AttachmentToCallout" >Head</std:strval>
    <std:strval name="AttachmentToCallout" >Tail</std:strval>
  </std:enumdef>
  <std:enumdef name="CalloutArrowHeadType">
    <std:strval name="CalloutArrowHeadType" >Filled arrow</std:strval>
    <std:strval name="CalloutArrowHeadType" >Blanked arrow</std:strval>
    <std:strval name="CalloutArrowHeadType" >Closed arrow</std:strval>
    <std:strval name="CalloutArrowHeadType" >Simple arrow</std:strval>
  </std:enumdef>
  <std:enumdef name="FunnelSide">
    <std:strval name="FunnelSide" >Left or bottom</std:strval>
    <std:strval name="FunnelSide" >Right or top</std:strval>
    <std:strval name="FunnelSide" >Both sides</std:strval>
  </std:enumdef>
  <std:enumdef name="DimPrecision">
    <std:strval name="DimPrecision" >Decimal</std:strval>
    <std:strval name="DimPrecision" >Fractional</std:strval>
  </std:enumdef>
  <std:enumdef name="TextVAlignment">
    <std:strval name="TextVAlignment" >Top</std:strval>
    <std:strval name="TextVAlignment" >Center</std:strval>
    <std:strval name="TextVAlignment" >Bottom</std:strval>
  </std:enumdef>
  <std:enumdef name="ToleranceType">
    <std:strval name="ToleranceType" >Straightness</std:strval>
    <std:strval name="ToleranceType" >Flatness</std:strval>
    <std:strval name="ToleranceType" >Circularity</std:strval>
    <std:strval name="ToleranceType" >Cylindricity</std:strval>
    <std:strval name="ToleranceType" >Line profile</std:strval>
    <std:strval name="ToleranceType" >Surface profile</std:strval>
    <std:strval name="ToleranceType" >Angularity</std:strval>
    <std:strval name="ToleranceType" >Perpendicularity</std:strval>
    <std:strval name="ToleranceType" >Parallelism</std:strval>
    <std:strval name="ToleranceType" >Position</std:strval>
    <std:strval name="ToleranceType" >Concentricity</std:strval>
    <std:strval name="ToleranceType" >Symmetry</std:strval>
    <std:strval name="ToleranceType" >Circular runout</std:strval>
    <std:strval name="ToleranceType" >Total runout</std:strval>
  </std:enumdef>
  <std:enumdef name="PointType">
    <std:strval name="PointType" >Cross</std:strval>
    <std:strval name="PointType" >Plus</std:strval>
    <std:strval name="PointType" >Concentric</std:strval>
    <std:strval name="PointType" >Coincident</std:strval>
    <std:strval name="PointType" >Fullcircle</std:strval>
    <std:strval name="PointType" >Fullsquare</std:strval>
    <std:strval name="PointType" >Star</std:strval>
    <std:strval name="PointType" >Dot</std:strval>
    <std:strval name="PointType" >Smalldot</std:strval>
  </std:enumdef>
  <std:enumdef name="SheetOrientation">
    <std:strval name="SheetOrientation" >Portrait</std:strval>
    <std:strval name="SheetOrientation" >Landscape</std:strval>
  </std:enumdef>
  <std:enumdef name="RoughnessType">
    <std:strval name="RoughnessType" >Basic</std:strval>
    <std:strval name="RoughnessType" >Machining required</std:strval>
    <std:strval name="RoughnessType" >Machining prohibited</std:strval>
  </std:enumdef>
  <std:typedef name="Formats">
    <std:strval name="Name" >XXX</std:strval>
    <std:floatval name="Width" >0</std:floatval>
    <std:floatval name="Height" >0</std:floatval>
    <std:enumval name="FormatOrientationType">LandscapeByDefault</std:enumval>
  </std:typedef>
  <std:typedef name="dottings">
    <std:strval name="Name" >dotting</std:strval>
    <std:intval name="zig-zag" >0</std:intval>
    <std:floatval name="pitch" >10</std:floatval>
    <std:intval name="color" >255</std:intval>
  </std:typedef>
  <std:typedef name="motifs">
    <std:strval name="Name" >motif</std:strval>
    <std:strval name="File name" >c:\image.jpeg</std:strval>
    <std:floatval name="Scale" >1</std:floatval>
    <std:floatval name="Angle" >0</std:floatval>
    <std:floatval name="OffsetH" >0</std:floatval>
    <std:floatval name="OffsetV" >0</std:floatval>
  </std:typedef>
  <std:typedef name="NumericalDisplay">
    <std:strval name="Name" >NUMXXX</std:strval>
    <std:intval name="NDType" >1</std:intval>
    <std:intval name="NDUnit" >1</std:intval>
    <std:intval name="NDFact" >1</std:intval>
    <std:intval name="NDExise" >1</std:intval>
    <std:intval name="NDNulFac_1" >1</std:intval>
    <std:intval name="NDNulFac_2" >2</std:intval>
    <std:intval name="NDNulFac_3" >1</std:intval>
    <std:strval name="NDSepar_1" > </std:strval>
    <std:strval name="NDSepar_2" > </std:strval>
    <std:strval name="NDSepar_3" > </std:strval>
    <std:intval name="NDNulOther" >1</std:intval>
    <std:intval name="NDAlignFrac" >1</std:intval>
    <std:intval name="NDTypFrac" >2</std:intval>
    <std:intval name="NDFinZer" >1</std:intval>
    <std:intval name="NDSepNum" >11</std:intval>
    <std:intval name="NDSep1000" >0</std:intval>
    <std:floatval name="NDGlobFact" >1</std:floatval>
    <std:floatval name="NDFact_1" >1</std:floatval>
    <std:floatval name="NDFact_2" >0</std:floatval>
    <std:floatval name="NDFact_3" >0</std:floatval>
    <std:floatval name="NDValPos_1" >0</std:floatval>
    <std:floatval name="NDValPos_2" >0</std:floatval>
    <std:floatval name="NDValPos_3" >0</std:floatval>
    <std:floatval name="NDSepPos_1" >0</std:floatval>
    <std:floatval name="NDSepPos_2" >0</std:floatval>
    <std:floatval name="NDSepPos_3" >0</std:floatval>
    <std:floatval name="NDSepScl_1" >1</std:floatval>
    <std:floatval name="NDSepScl_2" >0</std:floatval>
    <std:floatval name="NDSepScl_3" >0</std:floatval>
    <std:floatval name="NDResScl" >1</std:floatval>
    <std:floatval name="NDRestX" >0.5</std:floatval>
    <std:floatval name="NDRestY" >0</std:floatval>
    <std:floatval name="NDOperY" >0.5</std:floatval>
    <std:intval name="NDSepDen" >2</std:intval>
  </std:typedef>
  <std:typedef name="hatchings">
    <std:strval name="Name" >hatching</std:strval>
    <std:intval name="nb hatch" >1</std:intval>
    <std:floatval name="angle1" >60</std:floatval>
    <std:floatval name="offset1" >2</std:floatval>
    <std:floatval name="pitch1" >10</std:floatval>
    <std:intval name="linetype1" >1</std:intval>
    <std:intval name="color1" >255</std:intval>
    <std:intval name="thickness1" >1</std:intval>
    <std:floatval name="angle2" >60</std:floatval>
    <std:floatval name="offset2" >2</std:floatval>
    <std:floatval name="pitch2" >10</std:floatval>
    <std:intval name="linetype2" >1</std:intval>
    <std:intval name="color2" >255</std:intval>
    <std:intval name="thickness2" >1</std:intval>
    <std:floatval name="angle3" >60</std:floatval>
    <std:floatval name="offset3" >2</std:floatval>
    <std:floatval name="pitch3" >10</std:floatval>
    <std:intval name="linetype3" >1</std:intval>
    <std:intval name="color3" >255</std:intval>
    <std:intval name="thickness3" >1</std:intval>
    <std:floatval name="angle4" >60</std:floatval>
    <std:floatval name="offset4" >2</std:floatval>
    <std:floatval name="pitch4" >10</std:floatval>
    <std:intval name="linetype4" >1</std:intval>
    <std:intval name="color4" >255</std:intval>
    <std:intval name="thickness4" >1</std:intval>
    <std:floatval name="angle5" >60</std:floatval>
    <std:floatval name="offset5" >2</std:floatval>
    <std:floatval name="pitch5" >10</std:floatval>
    <std:intval name="linetype5" >1</std:intval>
    <std:intval name="color5" >255</std:intval>
    <std:intval name="thickness5" >1</std:intval>
    <std:floatval name="angle6" >60</std:floatval>
    <std:floatval name="offset6" >2</std:floatval>
    <std:floatval name="pitch6" >10</std:floatval>
    <std:intval name="linetype6" >1</std:intval>
    <std:intval name="color6" >255</std:intval>
    <std:intval name="thickness6" >1</std:intval>
    <std:floatval name="angle7" >60</std:floatval>
    <std:floatval name="offset7" >2</std:floatval>
    <std:floatval name="pitch7" >10</std:floatval>
    <std:intval name="linetype7" >1</std:intval>
    <std:intval name="color7" >255</std:intval>
    <std:intval name="thickness7" >1</std:intval>
    <std:floatval name="angle8" >60</std:floatval>
    <std:floatval name="offset8" >2</std:floatval>
    <std:floatval name="pitch8" >10</std:floatval>
    <std:intval name="linetype8" >1</std:intval>
    <std:intval name="color8" >255</std:intval>
    <std:intval name="thickness8" >1</std:intval>
    <std:floatval name="angle9" >60</std:floatval>
    <std:floatval name="offset9" >2</std:floatval>
    <std:floatval name="pitch9" >10</std:floatval>
    <std:intval name="linetype9" >1</std:intval>
    <std:intval name="color9" >255</std:intval>
    <std:intval name="thickness9" >1</std:intval>
    <std:floatval name="angle10" >60</std:floatval>
    <std:floatval name="offset10" >2</std:floatval>
    <std:floatval name="pitch10" >10</std:floatval>
    <std:intval name="linetype10" >1</std:intval>
    <std:intval name="color10" >255</std:intval>
    <std:intval name="thickness10" >1</std:intval>
  </std:typedef>
  <std:typedef name="FrameDef">
    <std:strval name="Name" >XXX</std:strval>
    <std:intval name="Type" >0</std:intval>
    <std:intval name="Behavior" >0</std:intval>
    <std:floatval name="Length" >0</std:floatval>
    <std:floatval name="Height" >0</std:floatval>
    <std:floatval name="Radius" >0</std:floatval>
    <std:floatval name="Offset" >0</std:floatval>
    <std:floatval name="VerticalMargin" >0</std:floatval>
    <std:floatval name="HorizontalMargin" >0</std:floatval>
  </std:typedef>
  <std:typedef name="AngleValue">
    <std:floatval name="Angle" >45</std:floatval>
  </std:typedef>
  <std:typedef name="colorings">
    <std:strval name="Name" >coloring</std:strval>
    <std:intval name="color" >-1</std:intval>
  </std:typedef>
  <std:typedef name="BomProperties">
    <std:strval name="Name" >XXX</std:strval>
    <std:strval name="Title" >&lt;Automatic Naming&gt;</std:strval>
    <std:floatval name="Width" >0</std:floatval>
    <std:intval name="Index" >0</std:intval>
  </std:typedef>
  <std:typedef name="ToleranceDisplay">
    <std:strval name="Name" >TOLXXX</std:strval>
    <std:intval name="TolType" >2</std:intval>
    <std:intval name="TolSepar_1" >0</std:intval>
    <std:intval name="TolSepar_2" >0</std:intval>
    <std:floatval name="TolSymbolH" >1</std:floatval>
    <std:intval name="TolSepTo_1" >0</std:intval>
    <std:intval name="TolSepTo_2" >0</std:intval>
    <std:intval name="TolSepTo_3" >0</std:intval>
    <std:intval name="TolTrailing" >2</std:intval>
    <std:intval name="TolFractLine" >1</std:intval>
    <std:intval name="TolPtOnValue" >8</std:intval>
    <std:intval name="TolAnchorPt" >2</std:intval>
    <std:floatval name="TolIntX" >0</std:floatval>
    <std:floatval name="TolIntY" >0.6</std:floatval>
    <std:floatval name="TolExtX" >0.6</std:floatval>
    <std:floatval name="TolExtY" >0</std:floatval>
    <std:intval name="TolMergeSame" >1</std:intval>
    <std:intval name="TolShowNull" >2</std:intval>
    <std:floatval name="TolScale" >0.7</std:floatval>
  </std:typedef>
  <std:typedef name="CATThickness">
    <std:intval name="Availability" >0</std:intval>
    <std:intval name="Pixel" >1</std:intval>
    <std:floatval name="mm" >0.13</std:floatval>
  </std:typedef>
  <std:typedef name="EngineeringSymbol">
    <std:strval name="Name" >&lt;XXX&gt;</std:strval>
    <std:intval name="Position" >0</std:intval>
    <std:strval name="Font" >SYM2.font</std:strval>
    <std:intval name="Charcode" >61535</std:intval>
    <std:strval name="Icon16x16" ></std:strval>
    <std:strval name="Icon22x22" ></std:strval>
  </std:typedef>
  <std:node name="Styles">
    <std:node name="Sheet">
      <std:node name="A0">
        <std:node name="GlobalScale">
          <std:floatval>1</std:floatval>
        </std:node>
        <std:node name="ProjectionMethod">
          <std:enumval name="ProjectionMethod">First angle</std:enumval>
        </std:node>
        <std:node name="GenViewsPosMode">
          <std:enumval name="GenViewsPosMode">FixedCG</std:enumval>
        </std:node>
        <std:node name="Format">
          <std:strval>A0</std:strval>
        </std:node>
        <std:node name="Orientation">
          <std:enumval name="SheetOrientation">Landscape</std:enumval>
        </std:node>
        <std:node name="DisplayFormat">
          <std:enumval name="YesNo">Yes</std:enumval>
        </std:node>
      </std:node>
      <std:node name="A1">
        <std:node name="GlobalScale">
          <std:floatval>1</std:floatval>
        </std:node>
        <std:node name="ProjectionMethod">
          <std:enumval name="ProjectionMethod">First angle</std:enumval>
        </std:node>
        <std:node name="GenViewsPosMode">
          <std:enumval name="GenViewsPosMode">FixedCG</std:enumval>
        </std:node>
        <std:node name="Format">
          <std:strval>A1</std:strval>
        </std:node>
        <std:node name="Orientation">
          <std:enumval name="SheetOrientation">Landscape</std:enumval>
        </std:node>
        <std:node name="DisplayFormat">
          <std:enumval name="YesNo">Yes</std:enumval>
        </std:node>
      </std:node>
      <std:node name="A2">
        <std:node name="GlobalScale">
          <std:floatval>1</std:floatval>
        </std:node>
        <std:node name="ProjectionMethod">
          <std:enumval name="ProjectionMethod">First angle</std:enumval>
        </std:node>
        <std:node name="GenViewsPosMode">
          <std:enumval name="GenViewsPosMode">FixedCG</std:enumval>
        </std:node>
        <std:node name="Format">
          <std:strval>A2</std:strval>
        </std:node>
        <std:node name="Orientation">
          <std:enumval name="SheetOrientation">Landscape</std:enumval>
        </std:node>
        <std:node name="DisplayFormat">
          <std:enumval name="YesNo">Yes</std:enumval>
        </std:node>
      </std:node>
      <std:node name="A3">
        <std:node name="GlobalScale">
          <std:floatval>1</std:floatval>
        </std:node>
        <std:node name="ProjectionMethod">
          <std:enumval name="ProjectionMethod">First angle</std:enumval>
        </std:node>
        <std:node name="GenViewsPosMode">
          <std:enumval name="GenViewsPosMode">FixedCG</std:enumval>
        </std:node>
        <std:node name="Format">
          <std:strval>A3</std:strval>
        </std:node>
        <std:node name="Orientation">
          <std:enumval name="SheetOrientation">Landscape</std:enumval>
        </std:node>
        <std:node name="DisplayFormat">
          <std:enumval name="YesNo">Yes</std:enumval>
        </std:node>
      </std:node>
      <std:node name="A4">
        <std:node name="GlobalScale">
          <std:floatval>1</std:floatval>
        </std:node>
        <std:node name="ProjectionMethod">
          <std:enumval name="ProjectionMethod">First angle</std:enumval>
        </std:node>
        <std:node name="GenViewsPosMode">
          <std:enumval name="GenViewsPosMode">FixedCG</std:enumval>
        </std:node>
        <std:node name="Format">
          <std:strval>A4</std:strval>
        </std:node>
        <std:node name="Orientation">
          <std:enumval name="SheetOrientation">Portrait</std:enumval>
        </std:node>
        <std:node name="DisplayFormat">
          <std:enumval name="YesNo">Yes</std:enumval>
        </std:node>
      </std:node>
      <std:node name="A0x2">
        <std:node name="GlobalScale">
          <std:floatval>1</std:floatval>
        </std:node>
        <std:node name="ProjectionMethod">
          <std:enumval name="ProjectionMethod">First angle</std:enumval>
        </std:node>
        <std:node name="GenViewsPosMode">
          <std:enumval name="GenViewsPosMode">FixedCG</std:enumval>
        </std:node>
        <std:node name="Format">
          <std:strval>A0x2</std:strval>
        </std:node>
        <std:node name="Orientation">
          <std:enumval name="SheetOrientation">Landscape</std:enumval>
        </std:node>
        <std:node name="DisplayFormat">
          <std:enumval name="YesNo">Yes</std:enumval>
        </std:node>
      </std:node>
      <std:node name="A0x3">
        <std:node name="GlobalScale">
          <std:floatval>1</std:floatval>
        </std:node>
        <std:node name="ProjectionMethod">
          <std:enumval name="ProjectionMethod">First angle</std:enumval>
        </std:node>
        <std:node name="GenViewsPosMode">
          <std:enumval name="GenViewsPosMode">FixedCG</std:enumval>
        </std:node>
        <std:node name="Format">
          <std:strval>A0x3</std:strval>
        </std:node>
        <std:node name="Orientation">
          <std:enumval name="SheetOrientation">Landscape</std:enumval>
        </std:node>
        <std:node name="DisplayFormat">
          <std:enumval name="YesNo">Yes</std:enumval>
        </std:node>
      </std:node>
      <std:node name="A1x3">
        <std:node name="GlobalScale">
          <std:floatval>1</std:floatval>
        </std:node>
        <std:node name="ProjectionMethod">
          <std:enumval name="ProjectionMethod">First angle</std:enumval>
        </std:node>
        <std:node name="GenViewsPosMode">
          <std:enumval name="GenViewsPosMode">FixedCG</std:enumval>
        </std:node>
        <std:node name="Format">
          <std:strval>A1x3</std:strval>
        </std:node>
        <std:node name="Orientation">
          <std:enumval name="SheetOrientation">Landscape</std:enumval>
        </std:node>
        <std:node name="DisplayFormat">
          <std:enumval name="YesNo">Yes</std:enumval>
        </std:node>
      </std:node>
      <std:node name="A1x4">
        <std:node name="GlobalScale">
          <std:floatval>1</std:floatval>
        </std:node>
        <std:node name="ProjectionMethod">
          <std:enumval name="ProjectionMethod">First angle</std:enumval>
        </std:node>
        <std:node name="GenViewsPosMode">
          <std:enumval name="GenViewsPosMode">FixedCG</std:enumval>
        </std:node>
        <std:node name="Format">
          <std:strval>A1x4</std:strval>
        </std:node>
        <std:node name="Orientation">
          <std:enumval name="SheetOrientation">Landscape</std:enumval>
        </std:node>
        <std:node name="DisplayFormat">
          <std:enumval name="YesNo">Yes</std:enumval>
        </std:node>
      </std:node>
      <std:node name="A2x3">
        <std:node name="GlobalScale">
          <std:floatval>1</std:floatval>
        </std:node>
        <std:node name="ProjectionMethod">
          <std:enumval name="ProjectionMethod">First angle</std:enumval>
        </std:node>
        <std:node name="GenViewsPosMode">
          <std:enumval name="GenViewsPosMode">FixedCG</std:enumval>
        </std:node>
        <std:node name="Format">
          <std:strval>A2x3</std:strval>
        </std:node>
        <std:node name="Orientation">
          <std:enumval name="SheetOrientation">Landscape</std:enumval>
        </std:node>
        <std:node name="DisplayFormat">
          <std:enumval name="YesNo">Yes</std:enumval>
        </std:node>
      </std:node>
      <std:node name="A2x4">
        <std:node name="GlobalScale">
          <std:floatval>1</std:floatval>
        </std:node>
        <std:node name="ProjectionMethod">
          <std:enumval name="ProjectionMethod">First angle</std:enumval>
        </std:node>
        <std:node name="GenViewsPosMode">
          <std:enumval name="GenViewsPosMode">FixedCG</std:enumval>
        </std:node>
        <std:node name="Format">
          <std:strval>A2x4</std:strval>
        </std:node>
        <std:node name="Orientation">
          <std:enumval name="SheetOrientation">Landscape</std:enumval>
        </std:node>
        <std:node name="DisplayFormat">
          <std:enumval name="YesNo">Yes</std:enumval>
        </std:node>
      </std:node>
      <std:node name="A2x5">
        <std:node name="GlobalScale">
          <std:floatval>1</std:floatval>
        </std:node>
        <std:node name="ProjectionMethod">
          <std:enumval name="ProjectionMethod">First angle</std:enumval>
        </std:node>
        <std:node name="GenViewsPosMode">
          <std:enumval name="GenViewsPosMode">FixedCG</std:enumval>
        </std:node>
        <std:node name="Format">
          <std:strval>A2x5</std:strval>
        </std:node>
        <std:node name="Orientation">
          <std:enumval name="SheetOrientation">Landscape</std:enumval>
        </std:node>
        <std:node name="DisplayFormat">
          <std:enumval name="YesNo">Yes</std:enumval>
        </std:node>
      </std:node>
      <std:node name="A3x3">
        <std:node name="GlobalScale">
          <std:floatval>1</std:floatval>
        </std:node>
        <std:node name="ProjectionMethod">
          <std:enumval name="ProjectionMethod">First angle</std:enumval>
        </std:node>
        <std:node name="GenViewsPosMode">
          <std:enumval name="GenViewsPosMode">FixedCG</std:enumval>
        </std:node>
        <std:node name="Format">
          <std:strval>A3x3</std:strval>
        </std:node>
        <std:node name="Orientation">
          <std:enumval name="SheetOrientation">Landscape</std:enumval>
        </std:node>
        <std:node name="DisplayFormat">
          <std:enumval name="YesNo">Yes</std:enumval>
        </std:node>
      </std:node>
      <std:node name="A3x4">
        <std:node name="GlobalScale">
          <std:floatval>1</std:floatval>
        </std:node>
        <std:node name="ProjectionMethod">
          <std:enumval name="ProjectionMethod">First angle</std:enumval>
        </std:node>
        <std:node name="GenViewsPosMode">
          <std:enumval name="GenViewsPosMode">FixedCG</std:enumval>
        </std:node>
        <std:node name="Format">
          <std:strval>A3x4</std:strval>
        </std:node>
        <std:node name="Orientation">
          <std:enumval name="SheetOrientation">Landscape</std:enumval>
        </std:node>
        <std:node name="DisplayFormat">
          <std:enumval name="YesNo">Yes</std:enumval>
        </std:node>
      </std:node>
      <std:node name="A3x5">
        <std:node name="GlobalScale">
          <std:floatval>1</std:floatval>
        </std:node>
        <std:node name="ProjectionMethod">
          <std:enumval name="ProjectionMethod">First angle</std:enumval>
        </std:node>
        <std:node name="GenViewsPosMode">
          <std:enumval name="GenViewsPosMode">FixedCG</std:enumval>
        </std:node>
        <std:node name="Format">
          <std:strval>A3x5</std:strval>
        </std:node>
        <std:node name="Orientation">
          <std:enumval name="SheetOrientation">Landscape</std:enumval>
        </std:node>
        <std:node name="DisplayFormat">
          <std:enumval name="YesNo">Yes</std:enumval>
        </std:node>
      </std:node>
      <std:node name="A3x6">
        <std:node name="GlobalScale">
          <std:floatval>1</std:floatval>
        </std:node>
        <std:node name="ProjectionMethod">
          <std:enumval name="ProjectionMethod">First angle</std:enumval>
        </std:node>
        <std:node name="GenViewsPosMode">
          <std:enumval name="GenViewsPosMode">FixedCG</std:enumval>
        </std:node>
        <std:node name="Format">
          <std:strval>A3x6</std:strval>
        </std:node>
        <std:node name="Orientation">
          <std:enumval name="SheetOrientation">Landscape</std:enumval>
        </std:node>
        <std:node name="DisplayFormat">
          <std:enumval name="YesNo">Yes</std:enumval>
        </std:node>
      </std:node>
      <std:node name="A3x7">
        <std:node name="GlobalScale">
          <std:floatval>1</std:floatval>
        </std:node>
        <std:node name="ProjectionMethod">
          <std:enumval name="ProjectionMethod">First angle</std:enumval>
        </std:node>
        <std:node name="GenViewsPosMode">
          <std:enumval name="GenViewsPosMode">FixedCG</std:enumval>
        </std:node>
        <std:node name="Format">
          <std:strval>A3x7</std:strval>
        </std:node>
        <std:node name="Orientation">
          <std:enumval name="SheetOrientation">Landscape</std:enumval>
        </std:node>
        <std:node name="DisplayFormat">
          <std:enumval name="YesNo">Yes</std:enumval>
        </std:node>
      </std:node>
      <std:node name="A3x8">
        <std:node name="GlobalScale">
          <std:floatval>1</std:floatval>
        </std:node>
        <std:node name="ProjectionMethod">
          <std:enumval name="ProjectionMethod">First angle</std:enumval>
        </std:node>
        <std:node name="GenViewsPosMode">
          <std:enumval name="GenViewsPosMode">FixedCG</std:enumval>
        </std:node>
        <std:node name="Format">
          <std:strval>A3x8</std:strval>
        </std:node>
        <std:node name="Orientation">
          <std:enumval name="SheetOrientation">Landscape</std:enumval>
        </std:node>
        <std:node name="DisplayFormat">
          <std:enumval name="YesNo">Yes</std:enumval>
        </std:node>
      </std:node>
      <std:node name="A4x3">
        <std:node name="GlobalScale">
          <std:floatval>1</std:floatval>
        </std:node>
        <std:node name="ProjectionMethod">
          <std:enumval name="ProjectionMethod">First angle</std:enumval>
        </std:node>
        <std:node name="GenViewsPosMode">
          <std:enumval name="GenViewsPosMode">FixedCG</std:enumval>
        </std:node>
        <std:node name="Format">
          <std:strval>A4x3</std:strval>
        </std:node>
        <std:node name="Orientation">
          <std:enumval name="SheetOrientation">Landscape</std:enumval>
        </std:node>
        <std:node name="DisplayFormat">
          <std:enumval name="YesNo">Yes</std:enumval>
        </std:node>
      </std:node>
      <std:node name="A4x4">
        <std:node name="GlobalScale">
          <std:floatval>1</std:floatval>
        </std:node>
        <std:node name="ProjectionMethod">
          <std:enumval name="ProjectionMethod">First angle</std:enumval>
        </std:node>
        <std:node name="GenViewsPosMode">
          <std:enumval name="GenViewsPosMode">FixedCG</std:enumval>
        </std:node>
        <std:node name="Format">
          <std:strval>A4x4</std:strval>
        </std:node>
        <std:node name="Orientation">
          <std:enumval name="SheetOrientation">Landscape</std:enumval>
        </std:node>
        <std:node name="DisplayFormat">
          <std:enumval name="YesNo">Yes</std:enumval>
        </std:node>
      </std:node>
      <std:node name="A4x5">
        <std:node name="GlobalScale">
          <std:floatval>1</std:floatval>
        </std:node>
        <std:node name="ProjectionMethod">
          <std:enumval name="ProjectionMethod">First angle</std:enumval>
        </std:node>
        <std:node name="GenViewsPosMode">
          <std:enumval name="GenViewsPosMode">FixedCG</std:enumval>
        </std:node>
        <std:node name="Format">
          <std:strval>A4x5</std:strval>
        </std:node>
        <std:node name="Orientation">
          <std:enumval name="SheetOrientation">Landscape</std:enumval>
        </std:node>
        <std:node name="DisplayFormat">
          <std:enumval name="YesNo">Yes</std:enumval>
        </std:node>
      </std:node>
      <std:node name="A4x6">
        <std:node name="GlobalScale">
          <std:floatval>1</std:floatval>
        </std:node>
        <std:node name="ProjectionMethod">
          <std:enumval name="ProjectionMethod">First angle</std:enumval>
        </std:node>
        <std:node name="GenViewsPosMode">
          <std:enumval name="GenViewsPosMode">FixedCG</std:enumval>
        </std:node>
        <std:node name="Format">
          <std:strval>A4x6</std:strval>
        </std:node>
        <std:node name="Orientation">
          <std:enumval name="SheetOrientation">Landscape</std:enumval>
        </std:node>
        <std:node name="DisplayFormat">
          <std:enumval name="YesNo">Yes</std:enumval>
        </std:node>
      </std:node>
      <std:node name="A4x7">
        <std:node name="GlobalScale">
          <std:floatval>1</std:floatval>
        </std:node>
        <std:node name="ProjectionMethod">
          <std:enumval name="ProjectionMethod">First angle</std:enumval>
        </std:node>
        <std:node name="GenViewsPosMode">
          <std:enumval name="GenViewsPosMode">FixedCG</std:enumval>
        </std:node>
        <std:node name="Format">
          <std:strval>A4x7</std:strval>
        </std:node>
        <std:node name="Orientation">
          <std:enumval name="SheetOrientation">Landscape</std:enumval>
        </std:node>
        <std:node name="DisplayFormat">
          <std:enumval name="YesNo">Yes</std:enumval>
        </std:node>
      </std:node>
      <std:node name="A4x8">
        <std:node name="GlobalScale">
          <std:floatval>1</std:floatval>
        </std:node>
        <std:node name="ProjectionMethod">
          <std:enumval name="ProjectionMethod">First angle</std:enumval>
        </std:node>
        <std:node name="GenViewsPosMode">
          <std:enumval name="GenViewsPosMode">FixedCG</std:enumval>
        </std:node>
        <std:node name="Format">
          <std:strval>A4x8</std:strval>
        </std:node>
        <std:node name="Orientation">
          <std:enumval name="SheetOrientation">Landscape</std:enumval>
        </std:node>
        <std:node name="DisplayFormat">
          <std:enumval name="YesNo">Yes</std:enumval>
        </std:node>
      </std:node>
      <std:node name="A4x9">
        <std:node name="GlobalScale">
          <std:floatval>1</std:floatval>
        </std:node>
        <std:node name="ProjectionMethod">
          <std:enumval name="ProjectionMethod">First angle</std:enumval>
        </std:node>
        <std:node name="GenViewsPosMode">
          <std:enumval name="GenViewsPosMode">FixedCG</std:enumval>
        </std:node>
        <std:node name="Format">
          <std:strval>A4x9</std:strval>
        </std:node>
        <std:node name="Orientation">
          <std:enumval name="SheetOrientation">Landscape</std:enumval>
        </std:node>
        <std:node name="DisplayFormat">
          <std:enumval name="YesNo">Yes</std:enumval>
        </std:node>
      </std:node>
      <std:node name="A4x10">
        <std:node name="GlobalScale">
          <std:floatval>1</std:floatval>
        </std:node>
        <std:node name="ProjectionMethod">
          <std:enumval name="ProjectionMethod">First angle</std:enumval>
        </std:node>
        <std:node name="GenViewsPosMode">
          <std:enumval name="GenViewsPosMode">FixedCG</std:enumval>
        </std:node>
        <std:node name="Format">
          <std:strval>A4x10</std:strval>
        </std:node>
        <std:node name="Orientation">
          <std:enumval name="SheetOrientation">Landscape</std:enumval>
        </std:node>
        <std:node name="DisplayFormat">
          <std:enumval name="YesNo">Yes</std:enumval>
        </std:node>
      </std:node>
    </std:node>
    <std:node name="ConstructionPoint">
      <std:node name="Default">
        <std:node name="Color">
          <std:colorval>140 140 140</std:colorval>
        </std:node>
        <std:node name="PointType">
          <std:enumval name="PointType">Smalldot</std:enumval>
        </std:node>
      </std:node>
    </std:node>
    <std:node name="ConstructionCurve">
      <std:node name="Default">
        <std:node name="Color">
          <std:colorval>140 140 140</std:colorval>
        </std:node>
        <std:node name="LineType">
          <std:intval>3</std:intval>
        </std:node>
        <std:node name="Thickness">
          <std:intval>1</std:intval>
        </std:node>
        <std:node name="ControlPoints">
          <std:node name="Color">
            <std:colorval>140 140 140</std:colorval>
          </std:node>
          <std:node name="PointType">
            <std:enumval name="PointType">Smalldot</std:enumval>
          </std:node>
        </std:node>
      </std:node>
    </std:node>
    <std:node name="Point">
      <std:node name="Default">
        <std:node name="Color">
          <std:colorval>0 0 0</std:colorval>
        </std:node>
        <std:node name="PointType">
          <std:enumval name="PointType">Dot</std:enumval>
        </std:node>
      </std:node>
    </std:node>
    <std:node name="Curve">
      <std:node name="Default">
        <std:node name="Color">
          <std:colorval>0 0 0</std:colorval>
        </std:node>
        <std:node name="LineType">
          <std:intval>1</std:intval>
        </std:node>
        <std:node name="Thickness">
          <std:intval>2</std:intval>
        </std:node>
        <std:node name="ControlPoints">
          <std:node name="Color">
            <std:colorval>0 0 0</std:colorval>
          </std:node>
          <std:node name="PointType">
            <std:enumval name="PointType">Dot</std:enumval>
          </std:node>
        </std:node>
      </std:node>
    </std:node>
    <std:node name="DistanceLengthDimension">
      <std:node name="Default">
        <std:node name="Value">
          <std:node name="OrientationReference">
            <std:enumval name="DimOrientationRef">Dimension line</std:enumval>
          </std:node>
          <std:node name="Angle">
            <std:floatval>0</std:floatval>
          </std:node>
          <std:node name="Position">
            <std:enumval name="ValuePosition">Auto</std:enumval>
          </std:node>
          <std:node name="OffsetX">
            <std:floatval>0</std:floatval>
          </std:node>
          <std:node name="OffsetY">
            <std:floatval>1.5</std:floatval>
          </std:node>
          <std:node name="Display">
            <std:enumval name="TextDisplay">Show value</std:enumval>
          </std:node>
        </std:node>
        <std:node name="Driving">
          <std:enumval name="YesNo">No</std:enumval>
        </std:node>
        <std:node name="DualValueDisplay">
          <std:enumval name="DualValueMode">No dual value</std:enumval>
        </std:node>
        <std:node name="ValueDisplayFormat">
          <std:node name="MainValue">
            <std:node name="Name">
              <std:strval>NUM,DIMM</std:strval>
            </std:node>
            <std:node name="DisplayedFactorNumber">
              <std:intval>1</std:intval>
            </std:node>
            <std:node name="PrecisionMode">
              <std:enumval name="DimPrecision">Decimal</std:enumval>
            </std:node>
            <std:node name="Precision">
              <std:floatval>0.01000000000000001</std:floatval>
            </std:node>
          </std:node>
          <std:node name="DualValue">
            <std:node name="Name">
              <std:strval>NUM,DIMM</std:strval>
            </std:node>
            <std:node name="DisplayedFactorNumber">
              <std:intval>1</std:intval>
            </std:node>
            <std:node name="PrecisionMode">
              <std:enumval name="DimPrecision">Decimal</std:enumval>
            </std:node>
            <std:node name="Precision">
              <std:floatval>0.01</std:floatval>
            </std:node>
          </std:node>
        </std:node>
        <std:node name="Fake">
          <std:node name="Mode">
            <std:enumval name="FakeDimMode">None</std:enumval>
          </std:node>
          <std:node name="MainValue">
            <std:strval>*Fake*</std:strval>
          </std:node>
          <std:node name="DualValue">
            <std:strval>*Fake*</std:strval>
          </std:node>
        </std:node>
        <std:node name="Tolerance">
          <std:node name="MainValue">
            <std:node name="Format">
              <std:strval></std:strval>
            </std:node>
            <std:node name="AlphanumericalValue1">
              <std:strval></std:strval>
            </std:node>
            <std:node name="AlphanumericalValue2">
              <std:strval></std:strval>
            </std:node>
            <std:node name="NumericalLower">
              <std:floatval>0</std:floatval>
            </std:node>
            <std:node name="NumericalUpper">
              <std:floatval>0</std:floatval>
            </std:node>
          </std:node>
          <std:node name="DualValue">
            <std:node name="Format">
              <std:strval></std:strval>
            </std:node>
            <std:node name="AlphanumericalValue1">
              <std:strval></std:strval>
            </std:node>
            <std:node name="AlphanumericalValue2">
              <std:strval></std:strval>
            </std:node>
            <std:node name="NumericalLower">
              <std:floatval>0</std:floatval>
            </std:node>
            <std:node name="NumericalUpper">
              <std:floatval>0</std:floatval>
            </std:node>
          </std:node>
        </std:node>
        <std:node name="DimensionLine">
          <std:node name="Representation">
            <std:enumval name="DimLineMode">Regular</std:enumval>
          </std:node>
          <std:node name="Color">
            <std:colorval>0 0 0</std:colorval>
          </std:node>
          <std:node name="Thickness">
            <std:intval>1</std:intval>
          </std:node>
          <std:node name="SecondPartReference">
            <std:enumval name="DimOrientationRef">Screen</std:enumval>
          </std:node>
          <std:node name="SecondPartAngle">
            <std:floatval>0</std:floatval>
          </std:node>
          <std:node name="LeaderAngle">
            <std:floatval>60</std:floatval>
          </std:node>
          <std:node name="LeaderLength">
            <std:floatval>5</std:floatval>
          </std:node>
        </std:node>
        <std:node name="Symbols">
          <std:node name="Symbol1">
            <std:node name="Type">
              <std:enumval name="ArrowEndType">FilledArrow</std:enumval>
            </std:node>
            <std:node name="Color">
              <std:colorval>0 0 0</std:colorval>
            </std:node>
            <std:node name="Thickness">
              <std:intval>1</std:intval>
            </std:node>
          </std:node>
          <std:node name="Symbol2">
            <std:node name="Type">
              <std:enumval name="ArrowEndType">FilledArrow</std:enumval>
            </std:node>
            <std:node name="Color">
              <std:colorval>0 0 0</std:colorval>
            </std:node>
            <std:node name="Thickness">
              <std:intval>1</std:intval>
            </std:node>
          </std:node>
          <std:node name="SymbolMode">
            <std:enumval name="SymbolReversal">Auto</std:enumval>
          </std:node>
        </std:node>
        <std:node name="ExtensionLine">
          <std:node name="Color">
            <std:colorval>0 0 0</std:colorval>
          </std:node>
          <std:node name="Thickness">
            <std:intval>1</std:intval>
          </std:node>
          <std:node name="SlantAngle">
            <std:floatval>0</std:floatval>
          </std:node>
          <std:node name="Left">
            <std:node name="Hide">
              <std:enumval name="YesNo">No</std:enumval>
            </std:node>
            <std:node name="Overrun">
              <std:floatval>0.5</std:floatval>
            </std:node>
            <std:node name="Blanking">
              <std:floatval>0</std:floatval>
            </std:node>
          </std:node>
          <std:node name="Right">
            <std:node name="Hide">
              <std:enumval name="YesNo">No</std:enumval>
            </std:node>
            <std:node name="Overrun">
              <std:floatval>0.5</std:floatval>
            </std:node>
            <std:node name="Blanking">
              <std:floatval>0</std:floatval>
            </std:node>
          </std:node>
          <std:node name="Funnel">
            <std:node name="Display">
              <std:enumval name="YesNo">No</std:enumval>
            </std:node>
            <std:node name="Height">
              <std:floatval>10</std:floatval>
            </std:node>
            <std:node name="Width">
              <std:floatval>5</std:floatval>
            </std:node>
            <std:node name="Angle">
              <std:floatval>45</std:floatval>
            </std:node>
            <std:node name="Mode">
              <std:enumval name="FunnelMode">External</std:enumval>
            </std:node>
            <std:node name="Side">
              <std:enumval name="FunnelSide">Both sides</std:enumval>
            </std:node>
          </std:node>
        </std:node>
        <std:node name="AssociatedTexts">
          <std:node name="MainValue">
            <std:node name="Prefix">
              <std:strval></std:strval>
            </std:node>
            <std:node name="Suffix">
              <std:strval></std:strval>
            </std:node>
            <std:node name="Before">
              <std:strval></std:strval>
            </std:node>
            <std:node name="After">
              <std:strval></std:strval>
            </std:node>
            <std:node name="Upper">
              <std:strval></std:strval>
            </std:node>
            <std:node name="Lower">
              <std:strval></std:strval>
            </std:node>
          </std:node>
          <std:node name="DualValue">
            <std:node name="Before">
              <std:strval></std:strval>
            </std:node>
            <std:node name="After">
              <std:strval></std:strval>
            </std:node>
            <std:node name="Upper">
              <std:strval></std:strval>
            </std:node>
            <std:node name="Lower">
              <std:strval></std:strval>
            </std:node>
          </std:node>
        </std:node>
        <std:node name="Framing">
          <std:node name="FramedSubpart">
            <std:enumval name="FrameElement">Value and tolerance and texts</std:enumval>
          </std:node>
          <std:node name="FramedGroup">
            <std:enumval name="FrameGroup">Main value</std:enumval>
          </std:node>
          <std:node name="Frame">
            <std:enumval name="Frame">None</std:enumval>
          </std:node>
          <std:node name="MainValueScoring">
            <std:enumval name="DimScoring">All</std:enumval>
          </std:node>
          <std:node name="DualValueScoring">
            <std:enumval name="DimScoring">All</std:enumval>
          </std:node>
        </std:node>
        <std:node name="Font">
          <std:node name="Name">
            <std:strval>GOSTtype A</std:strval>
          </std:node>
          <std:node name="Bold">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="Italic">
            <std:enumval name="YesNo">Yes</std:enumval>
          </std:node>
          <std:node name="Size">
            <std:floatval>3.5</std:floatval>
          </std:node>
          <std:node name="Color">
            <std:colorval>0 0 0</std:colorval>
          </std:node>
          <std:node name="Underline">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="Strikethrough">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="Overline">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="Ratio">
            <std:floatval>90</std:floatval>
          </std:node>
          <std:node name="Spacing">
            <std:floatval>0</std:floatval>
          </std:node>
          <std:node name="ApplyScale">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="Blanking">
            <std:enumval name="BlankProp">AreaFill</std:enumval>
          </std:node>
        </std:node>
      </std:node>
    </std:node>
    <std:node name="AngleDimension">
      <std:node name="Default">
        <std:node name="Value">
          <std:node name="OrientationReference">
            <std:enumval name="DimOrientationRef">Dimension line</std:enumval>
          </std:node>
          <std:node name="Angle">
            <std:floatval>0</std:floatval>
          </std:node>
          <std:node name="Position">
            <std:enumval name="ValuePosition">Auto</std:enumval>
          </std:node>
          <std:node name="OffsetX">
            <std:floatval>0</std:floatval>
          </std:node>
          <std:node name="OffsetY">
            <std:floatval>1.5</std:floatval>
          </std:node>
          <std:node name="Display">
            <std:enumval name="TextDisplay">Show value</std:enumval>
          </std:node>
        </std:node>
        <std:node name="Driving">
          <std:enumval name="YesNo">No</std:enumval>
        </std:node>
        <std:node name="DualValueDisplay">
          <std:enumval name="DualValueMode">No dual value</std:enumval>
        </std:node>
        <std:node name="ValueDisplayFormat">
          <std:node name="MainValue">
            <std:node name="Name">
              <std:strval>NUM,ADMS</std:strval>
            </std:node>
            <std:node name="DisplayedFactorNumber">
              <std:intval>1</std:intval>
            </std:node>
            <std:node name="PrecisionMode">
              <std:enumval name="DimPrecision">Decimal</std:enumval>
            </std:node>
            <std:node name="Precision">
              <std:floatval>0.01</std:floatval>
            </std:node>
          </std:node>
          <std:node name="DualValue">
            <std:node name="Name">
              <std:strval>NUM,ADMS</std:strval>
            </std:node>
            <std:node name="DisplayedFactorNumber">
              <std:intval>1</std:intval>
            </std:node>
            <std:node name="PrecisionMode">
              <std:enumval name="DimPrecision">Decimal</std:enumval>
            </std:node>
            <std:node name="Precision">
              <std:floatval>0.01</std:floatval>
            </std:node>
          </std:node>
        </std:node>
        <std:node name="Fake">
          <std:node name="Mode">
            <std:enumval name="FakeDimMode">None</std:enumval>
          </std:node>
          <std:node name="MainValue">
            <std:strval>*Fake*</std:strval>
          </std:node>
          <std:node name="DualValue">
            <std:strval>*Fake*</std:strval>
          </std:node>
        </std:node>
        <std:node name="Tolerance">
          <std:node name="MainValue">
            <std:node name="Format">
              <std:strval></std:strval>
            </std:node>
            <std:node name="AlphanumericalValue1">
              <std:strval></std:strval>
            </std:node>
            <std:node name="AlphanumericalValue2">
              <std:strval></std:strval>
            </std:node>
            <std:node name="NumericalLower">
              <std:floatval>0</std:floatval>
            </std:node>
            <std:node name="NumericalUpper">
              <std:floatval>0</std:floatval>
            </std:node>
          </std:node>
          <std:node name="DualValue">
            <std:node name="Format">
              <std:strval></std:strval>
            </std:node>
            <std:node name="AlphanumericalValue1">
              <std:strval></std:strval>
            </std:node>
            <std:node name="AlphanumericalValue2">
              <std:strval></std:strval>
            </std:node>
            <std:node name="NumericalLower">
              <std:floatval>0</std:floatval>
            </std:node>
            <std:node name="NumericalUpper">
              <std:floatval>0</std:floatval>
            </std:node>
          </std:node>
        </std:node>
        <std:node name="DimensionLine">
          <std:node name="Representation">
            <std:enumval name="DimLineMode">Leader two parts</std:enumval>
          </std:node>
          <std:node name="Color">
            <std:colorval>0 0 0</std:colorval>
          </std:node>
          <std:node name="Thickness">
            <std:intval>1</std:intval>
          </std:node>
          <std:node name="SecondPartReference">
            <std:enumval name="DimOrientationRef">Screen</std:enumval>
          </std:node>
          <std:node name="SecondPartAngle">
            <std:floatval>0</std:floatval>
          </std:node>
          <std:node name="LeaderAngle">
            <std:floatval>60</std:floatval>
          </std:node>
          <std:node name="LeaderLength">
            <std:floatval>5</std:floatval>
          </std:node>
        </std:node>
        <std:node name="Symbols">
          <std:node name="Symbol1">
            <std:node name="Type">
              <std:enumval name="ArrowEndType">FilledArrow</std:enumval>
            </std:node>
            <std:node name="Color">
              <std:colorval>0 0 0</std:colorval>
            </std:node>
            <std:node name="Thickness">
              <std:intval>1</std:intval>
            </std:node>
          </std:node>
          <std:node name="Symbol2">
            <std:node name="Type">
              <std:enumval name="ArrowEndType">FilledArrow</std:enumval>
            </std:node>
            <std:node name="Color">
              <std:colorval>0 0 0</std:colorval>
            </std:node>
            <std:node name="Thickness">
              <std:intval>1</std:intval>
            </std:node>
          </std:node>
          <std:node name="SymbolMode">
            <std:enumval name="SymbolReversal">Auto</std:enumval>
          </std:node>
        </std:node>
        <std:node name="ExtensionLine">
          <std:node name="Color">
            <std:colorval>0 0 0</std:colorval>
          </std:node>
          <std:node name="Thickness">
            <std:intval>1</std:intval>
          </std:node>
          <std:node name="SlantAngle">
            <std:floatval>0</std:floatval>
          </std:node>
          <std:node name="Left">
            <std:node name="Hide">
              <std:enumval name="YesNo">No</std:enumval>
            </std:node>
            <std:node name="Overrun">
              <std:floatval>0.5</std:floatval>
            </std:node>
            <std:node name="Blanking">
              <std:floatval>0</std:floatval>
            </std:node>
          </std:node>
          <std:node name="Right">
            <std:node name="Hide">
              <std:enumval name="YesNo">No</std:enumval>
            </std:node>
            <std:node name="Overrun">
              <std:floatval>0.5</std:floatval>
            </std:node>
            <std:node name="Blanking">
              <std:floatval>0</std:floatval>
            </std:node>
          </std:node>
        </std:node>
        <std:node name="AssociatedTexts">
          <std:node name="MainValue">
            <std:node name="Prefix">
              <std:strval></std:strval>
            </std:node>
            <std:node name="Suffix">
              <std:strval></std:strval>
            </std:node>
            <std:node name="Before">
              <std:strval></std:strval>
            </std:node>
            <std:node name="After">
              <std:strval></std:strval>
            </std:node>
            <std:node name="Upper">
              <std:strval></std:strval>
            </std:node>
            <std:node name="Lower">
              <std:strval></std:strval>
            </std:node>
          </std:node>
          <std:node name="DualValue">
            <std:node name="Before">
              <std:strval></std:strval>
            </std:node>
            <std:node name="After">
              <std:strval></std:strval>
            </std:node>
            <std:node name="Upper">
              <std:strval></std:strval>
            </std:node>
            <std:node name="Lower">
              <std:strval></std:strval>
            </std:node>
          </std:node>
        </std:node>
        <std:node name="Framing">
          <std:node name="FramedSubpart">
            <std:enumval name="FrameElement">Value and tolerance and texts</std:enumval>
          </std:node>
          <std:node name="FramedGroup">
            <std:enumval name="FrameGroup">Both values as a whole</std:enumval>
          </std:node>
          <std:node name="Frame">
            <std:enumval name="Frame">None</std:enumval>
          </std:node>
          <std:node name="MainValueScoring">
            <std:enumval name="DimScoring">All</std:enumval>
          </std:node>
          <std:node name="DualValueScoring">
            <std:enumval name="DimScoring">All</std:enumval>
          </std:node>
        </std:node>
        <std:node name="Font">
          <std:node name="Name">
            <std:strval>GOSTtype A</std:strval>
          </std:node>
          <std:node name="Bold">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="Italic">
            <std:enumval name="YesNo">Yes</std:enumval>
          </std:node>
          <std:node name="Size">
            <std:floatval>3.5</std:floatval>
          </std:node>
          <std:node name="Color">
            <std:colorval>0 0 0</std:colorval>
          </std:node>
          <std:node name="Underline">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="Strikethrough">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="Overline">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="Ratio">
            <std:floatval>90</std:floatval>
          </std:node>
          <std:node name="Spacing">
            <std:floatval>0</std:floatval>
          </std:node>
          <std:node name="ApplyScale">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="Blanking">
            <std:enumval name="BlankProp">AreaFill</std:enumval>
          </std:node>
        </std:node>
      </std:node>
    </std:node>
    <std:node name="RadiusDimension">
      <std:node name="Default">
        <std:node name="Value">
          <std:node name="OrientationReference">
            <std:enumval name="DimOrientationRef">Dimension line</std:enumval>
          </std:node>
          <std:node name="Angle">
            <std:floatval>0</std:floatval>
          </std:node>
          <std:node name="Position">
            <std:enumval name="ValuePosition">Auto</std:enumval>
          </std:node>
          <std:node name="OffsetX">
            <std:floatval>0</std:floatval>
          </std:node>
          <std:node name="OffsetY">
            <std:floatval>1.5</std:floatval>
          </std:node>
          <std:node name="Display">
            <std:enumval name="TextDisplay">Show value</std:enumval>
          </std:node>
        </std:node>
        <std:node name="Driving">
          <std:enumval name="YesNo">No</std:enumval>
        </std:node>
        <std:node name="DualValueDisplay">
          <std:enumval name="DualValueMode">No dual value</std:enumval>
        </std:node>
        <std:node name="ValueDisplayFormat">
          <std:node name="MainValue">
            <std:node name="Name">
              <std:strval>NUM,DIMM</std:strval>
            </std:node>
            <std:node name="DisplayedFactorNumber">
              <std:intval>1</std:intval>
            </std:node>
            <std:node name="PrecisionMode">
              <std:enumval name="DimPrecision">Decimal</std:enumval>
            </std:node>
            <std:node name="Precision">
              <std:floatval>0.01</std:floatval>
            </std:node>
          </std:node>
          <std:node name="DualValue">
            <std:node name="Name">
              <std:strval>NUM,DIMM</std:strval>
            </std:node>
            <std:node name="DisplayedFactorNumber">
              <std:intval>1</std:intval>
            </std:node>
            <std:node name="PrecisionMode">
              <std:enumval name="DimPrecision">Decimal</std:enumval>
            </std:node>
            <std:node name="Precision">
              <std:floatval>0.01</std:floatval>
            </std:node>
          </std:node>
        </std:node>
        <std:node name="Fake">
          <std:node name="Mode">
            <std:enumval name="FakeDimMode">None</std:enumval>
          </std:node>
          <std:node name="MainValue">
            <std:strval>*Fake*</std:strval>
          </std:node>
          <std:node name="DualValue">
            <std:strval>*Fake*</std:strval>
          </std:node>
        </std:node>
        <std:node name="Tolerance">
          <std:node name="MainValue">
            <std:node name="Format">
              <std:strval></std:strval>
            </std:node>
            <std:node name="AlphanumericalValue1">
              <std:strval></std:strval>
            </std:node>
            <std:node name="AlphanumericalValue2">
              <std:strval></std:strval>
            </std:node>
            <std:node name="NumericalLower">
              <std:floatval>0</std:floatval>
            </std:node>
            <std:node name="NumericalUpper">
              <std:floatval>0</std:floatval>
            </std:node>
          </std:node>
          <std:node name="DualValue">
            <std:node name="Format">
              <std:strval></std:strval>
            </std:node>
            <std:node name="AlphanumericalValue1">
              <std:strval></std:strval>
            </std:node>
            <std:node name="AlphanumericalValue2">
              <std:strval></std:strval>
            </std:node>
            <std:node name="NumericalLower">
              <std:floatval>0</std:floatval>
            </std:node>
            <std:node name="NumericalUpper">
              <std:floatval>0</std:floatval>
            </std:node>
          </std:node>
        </std:node>
        <std:node name="DimensionLine">
          <std:node name="Representation">
            <std:enumval name="DimLineMode">Two parts</std:enumval>
          </std:node>
          <std:node name="Color">
            <std:colorval>0 0 0</std:colorval>
          </std:node>
          <std:node name="Thickness">
            <std:intval>1</std:intval>
          </std:node>
          <std:node name="SecondPartReference">
            <std:enumval name="DimOrientationRef">Screen</std:enumval>
          </std:node>
          <std:node name="SecondPartAngle">
            <std:floatval>0</std:floatval>
          </std:node>
          <std:node name="LeaderAngle">
            <std:floatval>60</std:floatval>
          </std:node>
          <std:node name="TillCenter">
            <std:enumval name="YesNo">Yes</std:enumval>
          </std:node>
          <std:node name="ExtensionFromStandard">
            <std:enumval name="YesNo">Yes</std:enumval>
          </std:node>
          <std:node name="LeaderLength">
            <std:floatval>5</std:floatval>
          </std:node>
        </std:node>
        <std:node name="Symbols">
          <std:node name="Symbol1">
            <std:node name="Type">
              <std:enumval name="ArrowEndType">FilledArrow</std:enumval>
            </std:node>
            <std:node name="Color">
              <std:colorval>0 0 0</std:colorval>
            </std:node>
            <std:node name="Thickness">
              <std:intval>1</std:intval>
            </std:node>
          </std:node>
          <std:node name="Symbol2">
            <std:node name="Type">
              <std:enumval name="ArrowEndType">FilledArrow</std:enumval>
            </std:node>
            <std:node name="Color">
              <std:colorval>0 0 0</std:colorval>
            </std:node>
            <std:node name="Thickness">
              <std:intval>1</std:intval>
            </std:node>
          </std:node>
          <std:node name="SymbolMode">
            <std:enumval name="SymbolReversal">Auto</std:enumval>
          </std:node>
        </std:node>
        <std:node name="Foreshortened">
          <std:node name="IsForeshortened">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="ValuePosition">
            <std:enumval name="ForeshortenedPosition">On long segment</std:enumval>
          </std:node>
          <std:node name="Orientation">
            <std:enumval name="ForeshortenedOrientation">Parallel</std:enumval>
          </std:node>
          <std:node name="Angle">
            <std:floatval>45</std:floatval>
          </std:node>
          <std:node name="Ratio">
            <std:floatval>0.5</std:floatval>
          </std:node>
          <std:node name="SymbolScale">
            <std:floatval>1</std:floatval>
          </std:node>
          <std:node name="MoveEndPoint">
            <std:enumval name="YesNo">Yes</std:enumval>
          </std:node>
        </std:node>
        <std:node name="ExtensionLine">
          <std:node name="Color">
            <std:colorval>0 0 0</std:colorval>
          </std:node>
          <std:node name="Thickness">
            <std:intval>1</std:intval>
          </std:node>
          <std:node name="SlantAngle">
            <std:floatval>0</std:floatval>
          </std:node>
          <std:node name="Left">
            <std:node name="Hide">
              <std:enumval name="YesNo">No</std:enumval>
            </std:node>
            <std:node name="Overrun">
              <std:floatval>0.5</std:floatval>
            </std:node>
            <std:node name="Blanking">
              <std:floatval>0</std:floatval>
            </std:node>
          </std:node>
          <std:node name="Right">
            <std:node name="Hide">
              <std:enumval name="YesNo">No</std:enumval>
            </std:node>
            <std:node name="Overrun">
              <std:floatval>0.5</std:floatval>
            </std:node>
            <std:node name="Blanking">
              <std:floatval>0</std:floatval>
            </std:node>
          </std:node>
        </std:node>
        <std:node name="AssociatedTexts">
          <std:node name="MainValue">
            <std:node name="Prefix">
              <std:strval>R</std:strval>
            </std:node>
            <std:node name="Suffix">
              <std:strval></std:strval>
            </std:node>
            <std:node name="Before">
              <std:strval></std:strval>
            </std:node>
            <std:node name="After">
              <std:strval></std:strval>
            </std:node>
            <std:node name="Upper">
              <std:strval></std:strval>
            </std:node>
            <std:node name="Lower">
              <std:strval></std:strval>
            </std:node>
          </std:node>
          <std:node name="DualValue">
            <std:node name="Before">
              <std:strval></std:strval>
            </std:node>
            <std:node name="After">
              <std:strval></std:strval>
            </std:node>
            <std:node name="Upper">
              <std:strval></std:strval>
            </std:node>
            <std:node name="Lower">
              <std:strval></std:strval>
            </std:node>
          </std:node>
        </std:node>
        <std:node name="Framing">
          <std:node name="FramedSubpart">
            <std:enumval name="FrameElement">Value and tolerance and texts</std:enumval>
          </std:node>
          <std:node name="FramedGroup">
            <std:enumval name="FrameGroup">Both values as a whole</std:enumval>
          </std:node>
          <std:node name="Frame">
            <std:enumval name="Frame">None</std:enumval>
          </std:node>
          <std:node name="MainValueScoring">
            <std:enumval name="DimScoring">All</std:enumval>
          </std:node>
          <std:node name="DualValueScoring">
            <std:enumval name="DimScoring">All</std:enumval>
          </std:node>
        </std:node>
        <std:node name="Font">
          <std:node name="Name">
            <std:strval>GOSTtype A</std:strval>
          </std:node>
          <std:node name="Bold">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="Italic">
            <std:enumval name="YesNo">Yes</std:enumval>
          </std:node>
          <std:node name="Size">
            <std:floatval>3.5</std:floatval>
          </std:node>
          <std:node name="Color">
            <std:colorval>0 0 0</std:colorval>
          </std:node>
          <std:node name="Underline">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="Strikethrough">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="Overline">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="Ratio">
            <std:floatval>90</std:floatval>
          </std:node>
          <std:node name="Spacing">
            <std:floatval>0</std:floatval>
          </std:node>
          <std:node name="ApplyScale">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="Blanking">
            <std:enumval name="BlankProp">AreaFill</std:enumval>
          </std:node>
        </std:node>
      </std:node>
    </std:node>
    <std:node name="DiameterDimension">
      <std:node name="Default">
        <std:node name="Value">
          <std:node name="OrientationReference">
            <std:enumval name="DimOrientationRef">Dimension line</std:enumval>
          </std:node>
          <std:node name="Angle">
            <std:floatval>0</std:floatval>
          </std:node>
          <std:node name="Position">
            <std:enumval name="ValuePosition">Auto</std:enumval>
          </std:node>
          <std:node name="OffsetX">
            <std:floatval>0</std:floatval>
          </std:node>
          <std:node name="OffsetY">
            <std:floatval>1.5</std:floatval>
          </std:node>
          <std:node name="Display">
            <std:enumval name="TextDisplay">Show value</std:enumval>
          </std:node>
        </std:node>
        <std:node name="Driving">
          <std:enumval name="YesNo">No</std:enumval>
        </std:node>
        <std:node name="DualValueDisplay">
          <std:enumval name="DualValueMode">No dual value</std:enumval>
        </std:node>
        <std:node name="ValueDisplayFormat">
          <std:node name="MainValue">
            <std:node name="Name">
              <std:strval>NUM,DIMM</std:strval>
            </std:node>
            <std:node name="DisplayedFactorNumber">
              <std:intval>1</std:intval>
            </std:node>
            <std:node name="PrecisionMode">
              <std:enumval name="DimPrecision">Decimal</std:enumval>
            </std:node>
            <std:node name="Precision">
              <std:floatval>0.01</std:floatval>
            </std:node>
          </std:node>
          <std:node name="DualValue">
            <std:node name="Name">
              <std:strval>NUM,DIMM</std:strval>
            </std:node>
            <std:node name="DisplayedFactorNumber">
              <std:intval>1</std:intval>
            </std:node>
            <std:node name="PrecisionMode">
              <std:enumval name="DimPrecision">Decimal</std:enumval>
            </std:node>
            <std:node name="Precision">
              <std:floatval>0.01</std:floatval>
            </std:node>
          </std:node>
        </std:node>
        <std:node name="Fake">
          <std:node name="Mode">
            <std:enumval name="FakeDimMode">None</std:enumval>
          </std:node>
          <std:node name="MainValue">
            <std:strval>*Fake*</std:strval>
          </std:node>
          <std:node name="DualValue">
            <std:strval>*Fake*</std:strval>
          </std:node>
        </std:node>
        <std:node name="Tolerance">
          <std:node name="MainValue">
            <std:node name="Format">
              <std:strval></std:strval>
            </std:node>
            <std:node name="AlphanumericalValue1">
              <std:strval></std:strval>
            </std:node>
            <std:node name="AlphanumericalValue2">
              <std:strval></std:strval>
            </std:node>
            <std:node name="NumericalLower">
              <std:floatval>0</std:floatval>
            </std:node>
            <std:node name="NumericalUpper">
              <std:floatval>0</std:floatval>
            </std:node>
          </std:node>
          <std:node name="DualValue">
            <std:node name="Format">
              <std:strval></std:strval>
            </std:node>
            <std:node name="AlphanumericalValue1">
              <std:strval></std:strval>
            </std:node>
            <std:node name="AlphanumericalValue2">
              <std:strval></std:strval>
            </std:node>
            <std:node name="NumericalLower">
              <std:floatval>0</std:floatval>
            </std:node>
            <std:node name="NumericalUpper">
              <std:floatval>0</std:floatval>
            </std:node>
          </std:node>
        </std:node>
        <std:node name="DimensionLine">
          <std:node name="Representation">
            <std:enumval name="DimLineMode">Regular</std:enumval>
          </std:node>
          <std:node name="Color">
            <std:colorval>0 0 0</std:colorval>
          </std:node>
          <std:node name="Thickness">
            <std:intval>1</std:intval>
          </std:node>
          <std:node name="SecondPartReference">
            <std:enumval name="DimOrientationRef">Screen</std:enumval>
          </std:node>
          <std:node name="SecondPartAngle">
            <std:floatval>0</std:floatval>
          </std:node>
          <std:node name="LeaderAngle">
            <std:floatval>60</std:floatval>
          </std:node>
          <std:node name="TillCenter">
            <std:enumval name="YesNo">Yes</std:enumval>
          </std:node>
          <std:node name="ExtensionFromStandard">
            <std:enumval name="YesNo">Yes</std:enumval>
          </std:node>
          <std:node name="LeaderLength">
            <std:floatval>5</std:floatval>
          </std:node>
        </std:node>
        <std:node name="Symbols">
          <std:node name="Symbol1">
            <std:node name="Type">
              <std:enumval name="ArrowEndType">FilledArrow</std:enumval>
            </std:node>
            <std:node name="Color">
              <std:colorval>0 0 0</std:colorval>
            </std:node>
            <std:node name="Thickness">
              <std:intval>1</std:intval>
            </std:node>
          </std:node>
          <std:node name="Symbol2">
            <std:node name="Type">
              <std:enumval name="ArrowEndType">FilledArrow</std:enumval>
            </std:node>
            <std:node name="Color">
              <std:colorval>0 0 0</std:colorval>
            </std:node>
            <std:node name="Thickness">
              <std:intval>1</std:intval>
            </std:node>
          </std:node>
          <std:node name="SymbolMode">
            <std:enumval name="SymbolReversal">Auto</std:enumval>
          </std:node>
        </std:node>
        <std:node name="ExtensionLine">
          <std:node name="Color">
            <std:colorval>0 0 0</std:colorval>
          </std:node>
          <std:node name="Thickness">
            <std:intval>1</std:intval>
          </std:node>
          <std:node name="SlantAngle">
            <std:floatval>0</std:floatval>
          </std:node>
          <std:node name="Left">
            <std:node name="Hide">
              <std:enumval name="YesNo">No</std:enumval>
            </std:node>
            <std:node name="Overrun">
              <std:floatval>0.5</std:floatval>
            </std:node>
            <std:node name="Blanking">
              <std:floatval>0</std:floatval>
            </std:node>
          </std:node>
          <std:node name="Right">
            <std:node name="Hide">
              <std:enumval name="YesNo">No</std:enumval>
            </std:node>
            <std:node name="Overrun">
              <std:floatval>0.5</std:floatval>
            </std:node>
            <std:node name="Blanking">
              <std:floatval>0</std:floatval>
            </std:node>
          </std:node>
        </std:node>
        <std:node name="AssociatedTexts">
          <std:node name="MainValue">
            <std:node name="Prefix">
              <std:strval>&lt;DIAMETER&gt;</std:strval>
            </std:node>
            <std:node name="Suffix">
              <std:strval></std:strval>
            </std:node>
            <std:node name="Before">
              <std:strval></std:strval>
            </std:node>
            <std:node name="After">
              <std:strval></std:strval>
            </std:node>
            <std:node name="Upper">
              <std:strval></std:strval>
            </std:node>
            <std:node name="Lower">
              <std:strval></std:strval>
            </std:node>
          </std:node>
          <std:node name="DualValue">
            <std:node name="Before">
              <std:strval></std:strval>
            </std:node>
            <std:node name="After">
              <std:strval></std:strval>
            </std:node>
            <std:node name="Upper">
              <std:strval></std:strval>
            </std:node>
            <std:node name="Lower">
              <std:strval></std:strval>
            </std:node>
          </std:node>
        </std:node>
        <std:node name="Framing">
          <std:node name="FramedSubpart">
            <std:enumval name="FrameElement">Value and tolerance and texts</std:enumval>
          </std:node>
          <std:node name="FramedGroup">
            <std:enumval name="FrameGroup">Both values as a whole</std:enumval>
          </std:node>
          <std:node name="Frame">
            <std:enumval name="Frame">None</std:enumval>
          </std:node>
          <std:node name="MainValueScoring">
            <std:enumval name="DimScoring">All</std:enumval>
          </std:node>
          <std:node name="DualValueScoring">
            <std:enumval name="DimScoring">All</std:enumval>
          </std:node>
        </std:node>
        <std:node name="Font">
          <std:node name="Name">
            <std:strval>GOSTtype A</std:strval>
          </std:node>
          <std:node name="Bold">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="Italic">
            <std:enumval name="YesNo">Yes</std:enumval>
          </std:node>
          <std:node name="Size">
            <std:floatval>3.5</std:floatval>
          </std:node>
          <std:node name="Color">
            <std:colorval>0 0 0</std:colorval>
          </std:node>
          <std:node name="Underline">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="Strikethrough">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="Overline">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="Ratio">
            <std:floatval>90</std:floatval>
          </std:node>
          <std:node name="Spacing">
            <std:floatval>0</std:floatval>
          </std:node>
          <std:node name="ApplyScale">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="Blanking">
            <std:enumval name="BlankProp">AreaFill</std:enumval>
          </std:node>
        </std:node>
        <std:node name="OneSymbolDiameter">
          <std:enumval name="YesNo">No</std:enumval>
        </std:node>
      </std:node>
    </std:node>
    <std:node name="ChamferDimension">
      <std:node name="Default">
        <std:node name="Value">
          <std:node name="OrientationReference">
            <std:enumval name="DimOrientationRef">Dimension line</std:enumval>
          </std:node>
          <std:node name="Angle">
            <std:floatval>0</std:floatval>
          </std:node>
          <std:node name="Position">
            <std:enumval name="ValuePosition">Auto</std:enumval>
          </std:node>
          <std:node name="OffsetX">
            <std:floatval>0</std:floatval>
          </std:node>
          <std:node name="OffsetY">
            <std:floatval>1.5</std:floatval>
          </std:node>
          <std:node name="Display">
            <std:enumval name="TextDisplay">Show value</std:enumval>
          </std:node>
        </std:node>
        <std:node name="Driving">
          <std:enumval name="YesNo">No</std:enumval>
        </std:node>
        <std:node name="DualValueDisplay">
          <std:enumval name="DualValueMode">No dual value</std:enumval>
        </std:node>
        <std:node name="ValueDisplayFormat">
          <std:node name="MainValue">
            <std:node name="Name">
              <std:strval>NUM,DIMM</std:strval>
            </std:node>
            <std:node name="DisplayedFactorNumber">
              <std:intval>1</std:intval>
            </std:node>
            <std:node name="PrecisionMode">
              <std:enumval name="DimPrecision">Decimal</std:enumval>
            </std:node>
            <std:node name="Precision">
              <std:floatval>0.01</std:floatval>
            </std:node>
          </std:node>
          <std:node name="DualValue">
            <std:node name="Name">
              <std:strval>NUM,DIMM</std:strval>
            </std:node>
            <std:node name="DisplayedFactorNumber">
              <std:intval>1</std:intval>
            </std:node>
            <std:node name="PrecisionMode">
              <std:enumval name="DimPrecision">Decimal</std:enumval>
            </std:node>
            <std:node name="Precision">
              <std:floatval>0.01</std:floatval>
            </std:node>
          </std:node>
        </std:node>
        <std:node name="Fake">
          <std:node name="Mode">
            <std:enumval name="FakeDimMode">None</std:enumval>
          </std:node>
          <std:node name="MainValue">
            <std:strval>*Fake*</std:strval>
          </std:node>
          <std:node name="DualValue">
            <std:strval>*Fake*</std:strval>
          </std:node>
        </std:node>
        <std:node name="Tolerance">
          <std:node name="MainValue">
            <std:node name="Format">
              <std:strval></std:strval>
            </std:node>
            <std:node name="AlphanumericalValue1">
              <std:strval></std:strval>
            </std:node>
            <std:node name="AlphanumericalValue2">
              <std:strval></std:strval>
            </std:node>
            <std:node name="NumericalLower">
              <std:floatval>0</std:floatval>
            </std:node>
            <std:node name="NumericalUpper">
              <std:floatval>0</std:floatval>
            </std:node>
          </std:node>
          <std:node name="DualValue">
            <std:node name="Format">
              <std:strval></std:strval>
            </std:node>
            <std:node name="AlphanumericalValue1">
              <std:strval></std:strval>
            </std:node>
            <std:node name="AlphanumericalValue2">
              <std:strval></std:strval>
            </std:node>
            <std:node name="NumericalLower">
              <std:floatval>0</std:floatval>
            </std:node>
            <std:node name="NumericalUpper">
              <std:floatval>0</std:floatval>
            </std:node>
          </std:node>
        </std:node>
        <std:node name="DimensionLine">
          <std:node name="Representation">
            <std:enumval name="DimLineMode">Regular</std:enumval>
          </std:node>
          <std:node name="Color">
            <std:colorval>0 0 0</std:colorval>
          </std:node>
          <std:node name="Thickness">
            <std:intval>1</std:intval>
          </std:node>
          <std:node name="SecondPartReference">
            <std:enumval name="DimOrientationRef">Screen</std:enumval>
          </std:node>
          <std:node name="SecondPartAngle">
            <std:floatval>0</std:floatval>
          </std:node>
          <std:node name="LeaderAngle">
            <std:floatval>60</std:floatval>
          </std:node>
          <std:node name="LeaderLength">
            <std:floatval>10</std:floatval>
          </std:node>
        </std:node>
        <std:node name="Symbols">
          <std:node name="Symbol1">
            <std:node name="Type">
              <std:enumval name="ArrowEndType">FilledArrow</std:enumval>
            </std:node>
            <std:node name="Color">
              <std:colorval>0 0 0</std:colorval>
            </std:node>
            <std:node name="Thickness">
              <std:intval>1</std:intval>
            </std:node>
          </std:node>
          <std:node name="Symbol2">
            <std:node name="Type">
              <std:enumval name="ArrowEndType">FilledArrow</std:enumval>
            </std:node>
            <std:node name="Color">
              <std:colorval>0 0 0</std:colorval>
            </std:node>
            <std:node name="Thickness">
              <std:intval>1</std:intval>
            </std:node>
          </std:node>
          <std:node name="SymbolMode">
            <std:enumval name="SymbolReversal">Auto</std:enumval>
          </std:node>
        </std:node>
        <std:node name="ExtensionLine">
          <std:node name="Color">
            <std:colorval>0 0 0</std:colorval>
          </std:node>
          <std:node name="Thickness">
            <std:intval>1</std:intval>
          </std:node>
          <std:node name="SlantAngle">
            <std:floatval>0</std:floatval>
          </std:node>
          <std:node name="Left">
            <std:node name="Hide">
              <std:enumval name="YesNo">No</std:enumval>
            </std:node>
            <std:node name="Overrun">
              <std:floatval>0.5</std:floatval>
            </std:node>
            <std:node name="Blanking">
              <std:floatval>0</std:floatval>
            </std:node>
          </std:node>
          <std:node name="Right">
            <std:node name="Hide">
              <std:enumval name="YesNo">No</std:enumval>
            </std:node>
            <std:node name="Overrun">
              <std:floatval>0.5</std:floatval>
            </std:node>
            <std:node name="Blanking">
              <std:floatval>0</std:floatval>
            </std:node>
          </std:node>
        </std:node>
        <std:node name="AssociatedTexts">
          <std:node name="MainValue">
            <std:node name="Prefix">
              <std:strval></std:strval>
            </std:node>
            <std:node name="Suffix">
              <std:strval></std:strval>
            </std:node>
            <std:node name="Before">
              <std:strval></std:strval>
            </std:node>
            <std:node name="After">
              <std:strval></std:strval>
            </std:node>
            <std:node name="Upper">
              <std:strval></std:strval>
            </std:node>
            <std:node name="Lower">
              <std:strval></std:strval>
            </std:node>
          </std:node>
          <std:node name="DualValue">
            <std:node name="Before">
              <std:strval></std:strval>
            </std:node>
            <std:node name="After">
              <std:strval></std:strval>
            </std:node>
            <std:node name="Upper">
              <std:strval></std:strval>
            </std:node>
            <std:node name="Lower">
              <std:strval></std:strval>
            </std:node>
          </std:node>
        </std:node>
        <std:node name="Framing">
          <std:node name="FramedSubpart">
            <std:enumval name="FrameElement">Value and tolerance and texts</std:enumval>
          </std:node>
          <std:node name="FramedGroup">
            <std:enumval name="FrameGroup">Both values as a whole</std:enumval>
          </std:node>
          <std:node name="Frame">
            <std:enumval name="Frame">None</std:enumval>
          </std:node>
          <std:node name="MainValueScoring">
            <std:enumval name="DimScoring">All</std:enumval>
          </std:node>
          <std:node name="DualValueScoring">
            <std:enumval name="DimScoring">All</std:enumval>
          </std:node>
        </std:node>
        <std:node name="Font">
          <std:node name="Name">
            <std:strval>GOSTtype A</std:strval>
          </std:node>
          <std:node name="Bold">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="Italic">
            <std:enumval name="YesNo">Yes</std:enumval>
          </std:node>
          <std:node name="Size">
            <std:floatval>3.5</std:floatval>
          </std:node>
          <std:node name="Color">
            <std:colorval>0 0 0</std:colorval>
          </std:node>
          <std:node name="Underline">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="Strikethrough">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="Overline">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="Ratio">
            <std:floatval>90</std:floatval>
          </std:node>
          <std:node name="Spacing">
            <std:floatval>0</std:floatval>
          </std:node>
          <std:node name="ApplyScale">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="Blanking">
            <std:enumval name="BlankProp">AreaFill</std:enumval>
          </std:node>
        </std:node>
        <std:node name="Chamfer">
          <std:node name="DisplayType">
            <std:enumval name="ChamferDisplayType">2 extension lines</std:enumval>
          </std:node>
          <std:node name="ValueFormat">
            <std:enumval name="ChamferMode">Length * Angle</std:enumval>
          </std:node>
          <std:node name="SecondaryValueDisplayFormat">
            <std:node name="MainValue">
              <std:node name="Name">
                <std:strval>NUM,ADMS</std:strval>
              </std:node>
              <std:node name="DisplayedFactorNumber">
                <std:intval>1</std:intval>
              </std:node>
            </std:node>
            <std:node name="DualValue">
              <std:node name="Name">
                <std:strval>NUM,ADMS</std:strval>
              </std:node>
              <std:node name="DisplayedFactorNumber">
                <std:intval>1</std:intval>
              </std:node>
            </std:node>
          </std:node>
        </std:node>
      </std:node>
    </std:node>
    <std:node name="CoordinateDimension">
      <std:node name="Default">
        <std:node name="OrientationReference">
          <std:enumval name="TextOrientation">Sheet</std:enumval>
        </std:node>
        <std:node name="Angle">
          <std:floatval>0</std:floatval>
        </std:node>
        <std:node name="AnchorPoint">
          <std:enumval name="AnchorPoint">Top left</std:enumval>
        </std:node>
        <std:node name="Display">
          <std:enumval name="TextDisplay">Show value</std:enumval>
        </std:node>
        <std:node name="Font">
          <std:node name="Name">
            <std:strval>GOSTtype A</std:strval>
          </std:node>
          <std:node name="Bold">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="Italic">
            <std:enumval name="YesNo">Yes</std:enumval>
          </std:node>
          <std:node name="Size">
            <std:floatval>3.5</std:floatval>
          </std:node>
          <std:node name="ApplyScale">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="Underline">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="Strikethrough">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="Overline">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="Blanking">
            <std:enumval name="BlankProp">AreaFill</std:enumval>
          </std:node>
        </std:node>
        <std:node name="Graphic">
          <std:node name="Color">
            <std:colorval>0 0 0</std:colorval>
          </std:node>
        </std:node>
        <std:node name="Leader">
          <std:node name="Symbol">
            <std:enumval name="ArrowEndType">Automatic</std:enumval>
          </std:node>
        </std:node>
        <std:node name="ValueDisplayFormat">
          <std:node name="Name">
            <std:strval>NUM,DIMM</std:strval>
          </std:node>
          <std:node name="DisplayedFactorNumber">
            <std:intval>1</std:intval>
          </std:node>
          <std:node name="PrecisionMode">
            <std:enumval name="DimPrecision">Decimal</std:enumval>
          </std:node>
          <std:node name="Precision">
            <std:floatval>0.01</std:floatval>
          </std:node>
        </std:node>
      </std:node>
    </std:node>
    <std:node name="Text">
      <std:node name="Default">
        <std:node name="Font">
          <std:node name="Name">
            <std:strval>GOSTtype A</std:strval>
          </std:node>
          <std:node name="Bold">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="Italic">
            <std:enumval name="YesNo">Yes</std:enumval>
          </std:node>
          <std:node name="Size">
            <std:floatval>3.5</std:floatval>
          </std:node>
          <std:node name="Underline">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="Color">
            <std:colorval>0 0 0</std:colorval>
          </std:node>
          <std:node name="Ratio">
            <std:floatval>90</std:floatval>
          </std:node>
          <std:node name="Slant">
            <std:floatval>0</std:floatval>
          </std:node>
          <std:node name="Spacing">
            <std:floatval>0</std:floatval>
          </std:node>
          <std:node name="Pitch">
            <std:enumval name="FontPitch">Fixed</std:enumval>
          </std:node>
          <std:node name="Strikethrough">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="Overline">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="Kerning">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
        </std:node>
        <std:node name="Text">
          <std:node name="Frame">
            <std:enumval name="Frame">None</std:enumval>
          </std:node>
          <std:node name="AnchorPoint">
            <std:enumval name="AnchorPoint">Top left</std:enumval>
          </std:node>
          <std:node name="AnchorLine">
            <std:enumval name="AnchorLine">Top or bottom</std:enumval>
          </std:node>
          <std:node name="LineSpacing">
            <std:floatval>0</std:floatval>
          </std:node>
          <std:node name="LineSpacingMode">
            <std:enumval name="LineSpacingMode">Bottom to top</std:enumval>
          </std:node>
          <std:node name="Justification">
            <std:enumval name="TextJustification">Left</std:enumval>
          </std:node>
          <std:node name="WordWrap">
            <std:floatval>0</std:floatval>
          </std:node>
          <std:node name="OrientationReference">
            <std:enumval name="TextOrientation">Sheet</std:enumval>
          </std:node>
          <std:node name="Angle">
            <std:floatval>0</std:floatval>
          </std:node>
          <std:node name="Mirroring">
            <std:enumval name="Mirroring">No flip</std:enumval>
          </std:node>
          <std:node name="BackField">
            <std:enumval name="YesNo">Yes</std:enumval>
          </std:node>
          <std:node name="SuperscriptOffset">
            <std:floatval>65</std:floatval>
          </std:node>
          <std:node name="SuperscriptSize">
            <std:floatval>100</std:floatval>
          </std:node>
          <std:node name="SubscriptOffset">
            <std:floatval>65</std:floatval>
          </std:node>
          <std:node name="SubscriptSize">
            <std:floatval>100</std:floatval>
          </std:node>
          <std:node name="DisplayUnit">
            <std:enumval name="YesNo">Yes</std:enumval>
          </std:node>
          <std:node name="ApplyScale">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="Blanking">
            <std:enumval name="BlankProp">AreaFill</std:enumval>
          </std:node>
        </std:node>
        <std:node name="Graphic">
          <std:node name="Thickness">
            <std:intval>1</std:intval>
          </std:node>
          <std:node name="Linetype">
            <std:intval>1</std:intval>
          </std:node>
          <std:node name="Color">
            <std:colorval>0 0 0</std:colorval>
          </std:node>
        </std:node>
        <std:node name="Leader">
          <std:node name="Symbol">
            <std:enumval name="ArrowEndType">FilledCircle</std:enumval>
          </std:node>
          <std:node name="Delta">
            <std:floatval>3</std:floatval>
          </std:node>
          <std:node name="AnchorPoint">
            <std:intval>0</std:intval>
          </std:node>
          <std:node name="StandardBehavior">
            <std:enumval name="YesNo">Yes</std:enumval>
          </std:node>
        </std:node>
      </std:node>
    </std:node>
    <std:node name="Table">
      <std:node name="Default">
        <std:node name="CellStyles">
          <std:node name="WholeTable">
            <std:node name="Font">
              <std:node name="Name">
                <std:strval>GOSTtype A</std:strval>
              </std:node>
              <std:node name="Bold">
                <std:enumval name="YesNo">No</std:enumval>
              </std:node>
              <std:node name="Italic">
                <std:enumval name="YesNo">Yes</std:enumval>
              </std:node>
              <std:node name="Size">
                <std:floatval>3.5</std:floatval>
              </std:node>
              <std:node name="Underline">
                <std:enumval name="YesNo">No</std:enumval>
              </std:node>
              <std:node name="Color">
                <std:colorval>0 0 0</std:colorval>
              </std:node>
              <std:node name="Ratio">
                <std:floatval>90</std:floatval>
              </std:node>
              <std:node name="Slant">
                <std:floatval>0</std:floatval>
              </std:node>
              <std:node name="Spacing">
                <std:floatval>0</std:floatval>
              </std:node>
              <std:node name="Pitch">
                <std:enumval name="FontPitch">Fixed</std:enumval>
              </std:node>
              <std:node name="Strikethrough">
                <std:enumval name="YesNo">No</std:enumval>
              </std:node>
              <std:node name="Overline">
                <std:enumval name="YesNo">No</std:enumval>
              </std:node>
            </std:node>
            <std:node name="LineSpacing">
              <std:floatval>0</std:floatval>
            </std:node>
            <std:node name="LineSpacingMode">
              <std:enumval name="LineSpacingMode">Bottom to top</std:enumval>
            </std:node>
            <std:node name="BackField">
              <std:enumval name="YesNo">Yes</std:enumval>
            </std:node>
            <std:node name="SuperscriptOffset">
              <std:floatval>72.5</std:floatval>
            </std:node>
            <std:node name="SuperscriptSize">
              <std:floatval>60.4</std:floatval>
            </std:node>
            <std:node name="SubscriptOffset">
              <std:floatval>27.72</std:floatval>
            </std:node>
            <std:node name="SubscriptSize">
              <std:floatval>60.4</std:floatval>
            </std:node>
            <std:node name="DisplayUnit">
              <std:enumval name="YesNo">Yes</std:enumval>
            </std:node>
            <std:node name="HorizontalAlignment">
              <std:enumval name="TextHAlignment">Left</std:enumval>
            </std:node>
            <std:node name="VerticalAlignment">
              <std:enumval name="TextVAlignment">Top</std:enumval>
            </std:node>
          </std:node>
        </std:node>
        <std:node name="AnchorPoint">
          <std:enumval name="AnchorPoint">Top left</std:enumval>
        </std:node>
        <std:node name="OrientationReference">
          <std:enumval name="TextOrientation">Sheet</std:enumval>
        </std:node>
        <std:node name="Angle">
          <std:floatval>0</std:floatval>
        </std:node>
        <std:node name="Graphic">
          <std:node name="Thickness">
            <std:intval>1</std:intval>
          </std:node>
          <std:node name="Linetype">
            <std:intval>1</std:intval>
          </std:node>
          <std:node name="Color">
            <std:colorval>0 0 0</std:colorval>
          </std:node>
        </std:node>
        <std:node name="Leader">
          <std:node name="Symbol">
            <std:enumval name="ArrowEndType">FilledCircle</std:enumval>
          </std:node>
          <std:node name="Delta">
            <std:floatval>0</std:floatval>
          </std:node>
          <std:node name="AnchorPoint">
            <std:intval>0</std:intval>
          </std:node>
          <std:node name="StandardBehavior">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
        </std:node>
        <std:node name="Blanking">
          <std:enumval name="BlankProp">AreaFill</std:enumval>
        </std:node>
        <std:node name="HorizontalMargin">
          <std:floatval>1</std:floatval>
        </std:node>
        <std:node name="VerticalMargin">
          <std:floatval>0.5</std:floatval>
        </std:node>
      </std:node>
    </std:node>
    <std:node name="DatumFeature">
      <std:node name="Default">
        <std:node name="OrientationReference">
          <std:enumval name="TextOrientation">Sheet</std:enumval>
        </std:node>
        <std:node name="Angle">
          <std:floatval>0</std:floatval>
        </std:node>
        <std:node name="AnchorPoint">
          <std:enumval name="AnchorPoint">Bottom left</std:enumval>
        </std:node>
        <std:node name="Display">
          <std:enumval name="TextDisplay">Show value</std:enumval>
        </std:node>
        <std:node name="Leader">
          <std:node name="Symbol">
            <std:enumval name="ArrowEndType">FilledTriangle</std:enumval>
          </std:node>
        </std:node>
        <std:node name="Font">
          <std:node name="Name">
            <std:strval>GOSTtype A</std:strval>
          </std:node>
          <std:node name="Bold">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="Italic">
            <std:enumval name="YesNo">Yes</std:enumval>
          </std:node>
          <std:node name="Size">
            <std:floatval>3.5</std:floatval>
          </std:node>
          <std:node name="ApplyScale">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="Blanking">
            <std:enumval name="BlankProp">AreaFill</std:enumval>
          </std:node>
        </std:node>
        <std:node name="Graphic">
          <std:node name="Thickness">
            <std:intval>1</std:intval>
          </std:node>
          <std:node name="Linetype">
            <std:intval>1</std:intval>
          </std:node>
          <std:node name="Color">
            <std:colorval>0 0 0</std:colorval>
          </std:node>
        </std:node>
      </std:node>
    </std:node>
    <std:node name="DatumTarget">
      <std:node name="Default">
        <std:node name="Diameter">
          <std:enumval name="YesNo">No</std:enumval>
        </std:node>
        <std:node name="OrientationReference">
          <std:enumval name="TextOrientation">Sheet</std:enumval>
        </std:node>
        <std:node name="Angle">
          <std:floatval>0</std:floatval>
        </std:node>
        <std:node name="AnchorPoint">
          <std:enumval name="AnchorPoint">Top left</std:enumval>
        </std:node>
        <std:node name="Display">
          <std:enumval name="TextDisplay">Show value</std:enumval>
        </std:node>
        <std:node name="Font">
          <std:node name="Name">
            <std:strval>GOSTtype A</std:strval>
          </std:node>
          <std:node name="Bold">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="Italic">
            <std:enumval name="YesNo">Yes</std:enumval>
          </std:node>
          <std:node name="Size">
            <std:floatval>3.5</std:floatval>
          </std:node>
          <std:node name="ApplyScale">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="Blanking">
            <std:enumval name="BlankProp">AreaFill</std:enumval>
          </std:node>
        </std:node>
        <std:node name="Graphic">
          <std:node name="Thickness">
            <std:intval>1</std:intval>
          </std:node>
          <std:node name="Linetype">
            <std:intval>1</std:intval>
          </std:node>
          <std:node name="Color">
            <std:colorval>0 0 0</std:colorval>
          </std:node>
        </std:node>
        <std:node name="Leader">
          <std:node name="Symbol">
            <std:enumval name="ArrowEndType">Automatic</std:enumval>
          </std:node>
        </std:node>
      </std:node>
    </std:node>
    <std:node name="Tolerance">
      <std:node name="Default">
        <std:node name="Type">
          <std:enumval name="ToleranceType">Concentricity</std:enumval>
        </std:node>
        <std:node name="Value">
          <std:strval></std:strval>
        </std:node>
        <std:node name="UpperText">
          <std:strval></std:strval>
        </std:node>
        <std:node name="LowerText">
          <std:strval></std:strval>
        </std:node>
        <std:node name="Font">
          <std:node name="Name">
            <std:strval>GOSTtype A</std:strval>
          </std:node>
          <std:node name="Bold">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="Italic">
            <std:enumval name="YesNo">Yes</std:enumval>
          </std:node>
          <std:node name="Size">
            <std:floatval>3.5</std:floatval>
          </std:node>
          <std:node name="Ratio">
            <std:floatval>90</std:floatval>
          </std:node>
          <std:node name="Spacing">
            <std:floatval>0</std:floatval>
          </std:node>
        </std:node>
        <std:node name="Text">
          <std:node name="AnchorPoint">
            <std:enumval name="AnchorPoint">Top left</std:enumval>
          </std:node>
          <std:node name="OrientationReference">
            <std:enumval name="TextOrientation">Sheet</std:enumval>
          </std:node>
          <std:node name="Angle">
            <std:floatval>0</std:floatval>
          </std:node>
          <std:node name="Mirroring">
            <std:enumval name="Mirroring">No flip</std:enumval>
          </std:node>
          <std:node name="ApplyScale">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="Blanking">
            <std:enumval name="BlankProp">AreaFill</std:enumval>
          </std:node>
        </std:node>
        <std:node name="Graphic">
          <std:node name="Thickness">
            <std:intval>1</std:intval>
          </std:node>
          <std:node name="Linetype">
            <std:intval>1</std:intval>
          </std:node>
          <std:node name="Color">
            <std:colorval>0 0 0</std:colorval>
          </std:node>
        </std:node>
        <std:node name="Leader">
          <std:node name="Symbol">
            <std:enumval name="ArrowEndType">FilledArrow</std:enumval>
          </std:node>
          <std:node name="Delta">
            <std:floatval>3</std:floatval>
          </std:node>
          <std:node name="AnchorPoint">
            <std:intval>1</std:intval>
          </std:node>
          <std:node name="StandardBehavior">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
        </std:node>
      </std:node>
    </std:node>
    <std:node name="Balloon">
      <std:node name="Default">
        <std:node name="Font">
          <std:node name="Name">
            <std:strval>GOSTtype A</std:strval>
          </std:node>
          <std:node name="Bold">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="Italic">
            <std:enumval name="YesNo">Yes</std:enumval>
          </std:node>
          <std:node name="Size">
            <std:floatval>5</std:floatval>
          </std:node>
          <std:node name="Underline">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="Ratio">
            <std:floatval>90</std:floatval>
          </std:node>
          <std:node name="Slant">
            <std:floatval>0</std:floatval>
          </std:node>
          <std:node name="Spacing">
            <std:floatval>0</std:floatval>
          </std:node>
          <std:node name="Pitch">
            <std:enumval name="FontPitch">Fixed</std:enumval>
          </std:node>
          <std:node name="Strikethrough">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="Overline">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
        </std:node>
        <std:node name="Text">
          <std:node name="Frame">
            <std:enumval name="Frame">Circle</std:enumval>
          </std:node>
          <std:node name="AnchorPoint">
            <std:enumval name="AnchorPoint">Middle center</std:enumval>
          </std:node>
          <std:node name="AnchorLine">
            <std:enumval name="AnchorLine">Global</std:enumval>
          </std:node>
          <std:node name="OrientationReference">
            <std:enumval name="TextOrientation">Sheet</std:enumval>
          </std:node>
          <std:node name="Angle">
            <std:floatval>0</std:floatval>
          </std:node>
          <std:node name="Mirroring">
            <std:enumval name="Mirroring">Auto flip</std:enumval>
          </std:node>
          <std:node name="ApplyScale">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="Display">
            <std:enumval name="TextDisplay">Show value</std:enumval>
          </std:node>
          <std:node name="Blanking">
            <std:enumval name="BlankProp">AreaFill</std:enumval>
          </std:node>
        </std:node>
        <std:node name="Graphic">
          <std:node name="Thickness">
            <std:intval>1</std:intval>
          </std:node>
          <std:node name="Linetype">
            <std:intval>1</std:intval>
          </std:node>
          <std:node name="Color">
            <std:colorval>0 0 0</std:colorval>
          </std:node>
        </std:node>
        <std:node name="Leader">
          <std:node name="Symbol">
            <std:enumval name="ArrowEndType">FilledCircle</std:enumval>
          </std:node>
        </std:node>
      </std:node>
    </std:node>
    <std:node name="RoughnessSymbol">
      <std:node name="Default">
        <std:node name="Values">
          <std:node name="Type">
            <std:enumval name="RoughnessType">Basic</std:enumval>
          </std:node>
          <std:node name="Mode">
            <std:enumval name="RoughnessMode">None</std:enumval>
          </std:node>
          <std:node name="SpecificationLine">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="AllAround">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="FirstRequirement">
            <std:strval></std:strval>
          </std:node>
          <std:node name="SecondRequirement">
            <std:strval></std:strval>
          </std:node>
          <std:node name="OtherRequirement">
            <std:strval></std:strval>
          </std:node>
          <std:node name="ProductionMethod">
            <std:strval></std:strval>
          </std:node>
          <std:node name="MachiningAllowance">
            <std:strval></std:strval>
          </std:node>
          <std:node name="CutOff">
            <std:strval></std:strval>
          </std:node>
          <std:node name="Max">
            <std:strval></std:strval>
          </std:node>
          <std:node name="Min">
            <std:strval></std:strval>
          </std:node>
        </std:node>
        <std:node name="Text">
          <std:node name="AnchorPoint">
            <std:enumval name="AnchorPoint">Bottom center</std:enumval>
          </std:node>
          <std:node name="AnchorLine">
            <std:enumval name="AnchorLine">Symbol</std:enumval>
          </std:node>
          <std:node name="Blanking">
            <std:enumval name="BlankProp">AreaFill</std:enumval>
          </std:node>
        </std:node>
        <std:node name="Graphic">
          <std:node name="Color">
            <std:colorval>0 0 0</std:colorval>
          </std:node>
          <std:node name="Linetype">
            <std:intval>1</std:intval>
          </std:node>
          <std:node name="Thickness">
            <std:intval>1</std:intval>
          </std:node>
        </std:node>
        <std:node name="Font">
          <std:node name="Name">
            <std:strval>GOSTtype A</std:strval>
          </std:node>
          <std:node name="Bold">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="Italic">
            <std:enumval name="YesNo">Yes</std:enumval>
          </std:node>
          <std:node name="Size">
            <std:floatval>3.5</std:floatval>
          </std:node>
          <std:node name="Ratio">
            <std:floatval>90</std:floatval>
          </std:node>
          <std:node name="Spacing">
            <std:floatval>0</std:floatval>
          </std:node>
        </std:node>
        <std:node name="Leader">
          <std:node name="Symbol">
            <std:enumval name="ArrowEndType">FilledArrow</std:enumval>
          </std:node>
          <std:node name="Delta">
            <std:floatval>3</std:floatval>
          </std:node>
          <std:node name="AnchorPoint">
            <std:intval>1</std:intval>
          </std:node>
        </std:node>
      </std:node>
    </std:node>
    <std:node name="WeldingSymbol">
      <std:node name="Default">
        <std:node name="Length1">
          <std:strval></std:strval>
        </std:node>
        <std:node name="Size1">
          <std:strval></std:strval>
        </std:node>
        <std:node name="WeldingType1">
          <std:enumval name="WeldingSymbol">None</std:enumval>
        </std:node>
        <std:node name="SurfaceShape1">
          <std:enumval name="SurfaceShape">None</std:enumval>
        </std:node>
        <std:node name="FinishingMethod1">
          <std:enumval name="FinishingMethod">None</std:enumval>
        </std:node>
        <std:node name="Length2">
          <std:strval></std:strval>
        </std:node>
        <std:node name="Size2">
          <std:strval></std:strval>
        </std:node>
        <std:node name="WeldingType2">
          <std:enumval name="WeldingSymbol">None</std:enumval>
        </std:node>
        <std:node name="SurfaceShape2">
          <std:enumval name="SurfaceShape">None</std:enumval>
        </std:node>
        <std:node name="FinishingMethod2">
          <std:enumval name="FinishingMethod">None</std:enumval>
        </std:node>
        <std:node name="Reference">
          <std:strval></std:strval>
        </std:node>
        <std:node name="FieldWeld">
          <std:enumval name="YesNo">No</std:enumval>
        </std:node>
        <std:node name="AllAround">
          <std:enumval name="YesNo">No</std:enumval>
        </std:node>
        <std:node name="ReferenceLine">
          <std:enumval name="UpDown">Down</std:enumval>
        </std:node>
        <std:node name="Text">
          <std:node name="Frame">
            <std:enumval name="Frame">None</std:enumval>
          </std:node>
          <std:node name="OrientationReference">
            <std:enumval name="TextOrientation">Sheet</std:enumval>
          </std:node>
          <std:node name="Angle">
            <std:floatval>0</std:floatval>
          </std:node>
          <std:node name="LineSpacing">
            <std:floatval>0</std:floatval>
          </std:node>
          <std:node name="LineSpacingMode">
            <std:enumval name="LineSpacingMode">Bottom to top</std:enumval>
          </std:node>
          <std:node name="Blanking">
            <std:enumval name="BlankProp">AreaFill</std:enumval>
          </std:node>
        </std:node>
        <std:node name="Font">
          <std:node name="Name">
            <std:strval>GOSTtype A</std:strval>
          </std:node>
          <std:node name="Bold">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="Italic">
            <std:enumval name="YesNo">Yes</std:enumval>
          </std:node>
          <std:node name="Size">
            <std:floatval>3.5</std:floatval>
          </std:node>
          <std:node name="Ratio">
            <std:floatval>90</std:floatval>
          </std:node>
          <std:node name="Spacing">
            <std:floatval>0</std:floatval>
          </std:node>
        </std:node>
        <std:node name="Graphic">
          <std:node name="Thickness">
            <std:intval>1</std:intval>
          </std:node>
          <std:node name="Linetype">
            <std:intval>1</std:intval>
          </std:node>
          <std:node name="Color">
            <std:colorval>0 0 0</std:colorval>
          </std:node>
        </std:node>
        <std:node name="Leader">
          <std:node name="Symbol">
            <std:enumval name="ArrowEndType">FilledArrow</std:enumval>
          </std:node>
        </std:node>
      </std:node>
    </std:node>
    <std:node name="AreaFill">
      <std:node name="Default">
        <std:node name="Pattern">
          <std:strval>Stell 5</std:strval>
        </std:node>
      </std:node>
    </std:node>
    <std:node name="AxisLine">
      <std:node name="Default">
        <std:node name="Graphic">
          <std:node name="Color">
            <std:colorval>0 0 0</std:colorval>
          </std:node>
          <std:node name="Linetype">
            <std:intval>4</std:intval>
          </std:node>
          <std:node name="Thickness">
            <std:intval>1</std:intval>
          </std:node>
        </std:node>
        <std:node name="OverRunAuto">
          <std:enumval name="YesNo">Yes</std:enumval>
        </std:node>
        <std:node name="OverRunLength">
          <std:floatval>3</std:floatval>
        </std:node>
      </std:node>
    </std:node>
    <std:node name="CenterLine">
      <std:node name="Default">
        <std:node name="Graphic">
          <std:node name="Color">
            <std:colorval>0 0 0</std:colorval>
          </std:node>
          <std:node name="Linetype">
            <std:intval>4</std:intval>
          </std:node>
          <std:node name="Thickness">
            <std:intval>1</std:intval>
          </std:node>
        </std:node>
        <std:node name="OverRunAuto">
          <std:enumval name="YesNo">Yes</std:enumval>
        </std:node>
        <std:node name="OverRunLength">
          <std:floatval>3</std:floatval>
        </std:node>
      </std:node>
    </std:node>
    <std:node name="Thread">
      <std:node name="Default">
        <std:node name="Graphic">
          <std:node name="Color">
            <std:colorval>0 0 0</std:colorval>
          </std:node>
          <std:node name="Linetype">
            <std:intval>4</std:intval>
          </std:node>
          <std:node name="Thickness">
            <std:intval>1</std:intval>
          </std:node>
        </std:node>
        <std:node name="OverRunAuto">
          <std:enumval name="YesNo">Yes</std:enumval>
        </std:node>
        <std:node name="OverRunLength">
          <std:floatval>5</std:floatval>
        </std:node>
      </std:node>
    </std:node>
    <std:node name="Arrow">
      <std:node name="Default">
        <std:node name="Graphic">
          <std:node name="Color">
            <std:colorval>0 0 0</std:colorval>
          </std:node>
          <std:node name="Linetype">
            <std:intval>1</std:intval>
          </std:node>
          <std:node name="Thickness">
            <std:intval>1</std:intval>
          </std:node>
        </std:node>
        <std:node name="HeadSymbol">
          <std:enumval name="ArrowEndType">None</std:enumval>
        </std:node>
        <std:node name="TailSymbol">
          <std:enumval name="ArrowEndType">FilledArrow</std:enumval>
        </std:node>
      </std:node>
    </std:node>
    <std:node name="ProjectionCallout">
      <std:node name="Default">
        <std:node name="ViewScaleDependant">
          <std:enumval name="YesNo">No</std:enumval>
        </std:node>
        <std:node name="Type">
          <std:enumval name="CalloutTypes">Only one arrow</std:enumval>
        </std:node>
        <std:node name="Profile">
          <std:node name="LineType">
            <std:intval>4</std:intval>
          </std:node>
          <std:node name="Thickness">
            <std:intval>1</std:intval>
          </std:node>
        </std:node>
        <std:node name="Corners">
          <std:node name="Thickness">
            <std:intval>1</std:intval>
          </std:node>
          <std:node name="Length">
            <std:floatval>0.001</std:floatval>
          </std:node>
        </std:node>
        <std:node name="Attachment">
          <std:enumval name="AttachmentToCallout">Head</std:enumval>
        </std:node>
        <std:node name="Arrows">
          <std:node name="Length">
            <std:floatval>12</std:floatval>
          </std:node>
          <std:node name="Head">
            <std:node name="Angle">
              <std:floatval>7.5</std:floatval>
            </std:node>
            <std:node name="Type">
              <std:enumval name="CalloutArrowHeadType">Filled arrow</std:enumval>
            </std:node>
            <std:node name="Length">
              <std:floatval>6</std:floatval>
            </std:node>
          </std:node>
        </std:node>
        <std:node name="Color">
          <std:colorval>0 0 0</std:colorval>
        </std:node>
        <std:node name="Text">
          <std:node name="Font">
            <std:node name="Name">
              <std:strval>GOSTtype A</std:strval>
            </std:node>
            <std:node name="Bold">
              <std:enumval name="YesNo">No</std:enumval>
            </std:node>
            <std:node name="Italic">
              <std:enumval name="YesNo">Yes</std:enumval>
            </std:node>
            <std:node name="Size">
              <std:floatval>7</std:floatval>
            </std:node>
            <std:node name="Underline">
              <std:enumval name="YesNo">No</std:enumval>
            </std:node>
            <std:node name="Color">
              <std:colorval>0 0 0</std:colorval>
            </std:node>
            <std:node name="Ratio">
              <std:floatval>90</std:floatval>
            </std:node>
            <std:node name="Slant">
              <std:floatval>0</std:floatval>
            </std:node>
            <std:node name="Spacing">
              <std:floatval>0</std:floatval>
            </std:node>
            <std:node name="Pitch">
              <std:enumval name="FontPitch">Fixed</std:enumval>
            </std:node>
            <std:node name="Strikethrough">
              <std:enumval name="YesNo">No</std:enumval>
            </std:node>
            <std:node name="Overline">
              <std:enumval name="YesNo">No</std:enumval>
            </std:node>
          </std:node>
          <std:node name="Frame">
            <std:enumval name="Frame">None</std:enumval>
          </std:node>
        </std:node>
      </std:node>
    </std:node>
    <std:node name="SectionCallout">
      <std:node name="Default">
        <std:node name="ViewScaleDependant">
          <std:enumval name="YesNo">No</std:enumval>
        </std:node>
        <std:node name="Type">
          <std:enumval name="CalloutTypes">Corners ans arrows</std:enumval>
        </std:node>
        <std:node name="Profile">
          <std:node name="LineType">
            <std:intval>4</std:intval>
          </std:node>
          <std:node name="Thickness">
            <std:intval>1</std:intval>
          </std:node>
        </std:node>
        <std:node name="Corners">
          <std:node name="Thickness">
            <std:intval>3</std:intval>
          </std:node>
          <std:node name="Length">
            <std:floatval>5</std:floatval>
          </std:node>
        </std:node>
        <std:node name="Attachment">
          <std:enumval name="AttachmentToCallout">Head</std:enumval>
        </std:node>
        <std:node name="Arrows">
          <std:node name="Length">
            <std:floatval>12</std:floatval>
          </std:node>
          <std:node name="Head">
            <std:node name="Angle">
              <std:floatval>7.5</std:floatval>
            </std:node>
            <std:node name="Type">
              <std:enumval name="CalloutArrowHeadType">Filled arrow</std:enumval>
            </std:node>
            <std:node name="Length">
              <std:floatval>6</std:floatval>
            </std:node>
          </std:node>
        </std:node>
        <std:node name="Color">
          <std:colorval>0 0 0</std:colorval>
        </std:node>
        <std:node name="Text">
          <std:node name="Font">
            <std:node name="Name">
              <std:strval>GOSTtype A</std:strval>
            </std:node>
            <std:node name="Bold">
              <std:enumval name="YesNo">No</std:enumval>
            </std:node>
            <std:node name="Italic">
              <std:enumval name="YesNo">Yes</std:enumval>
            </std:node>
            <std:node name="Size">
              <std:floatval>7</std:floatval>
            </std:node>
            <std:node name="Underline">
              <std:enumval name="YesNo">No</std:enumval>
            </std:node>
            <std:node name="Color">
              <std:colorval>0 0 0</std:colorval>
            </std:node>
            <std:node name="Ratio">
              <std:floatval>90</std:floatval>
            </std:node>
            <std:node name="Slant">
              <std:floatval>0</std:floatval>
            </std:node>
            <std:node name="Spacing">
              <std:floatval>0</std:floatval>
            </std:node>
            <std:node name="Pitch">
              <std:enumval name="FontPitch">Fixed</std:enumval>
            </std:node>
            <std:node name="Strikethrough">
              <std:enumval name="YesNo">No</std:enumval>
            </std:node>
            <std:node name="Overline">
              <std:enumval name="YesNo">No</std:enumval>
            </std:node>
          </std:node>
          <std:node name="Frame">
            <std:enumval name="Frame">None</std:enumval>
          </std:node>
        </std:node>
      </std:node>
    </std:node>
    <std:node name="DetailCallout">
      <std:node name="Default">
        <std:node name="Type">
          <std:enumval name="DetailCalloutTypes">Leader text</std:enumval>
        </std:node>
        <std:node name="LineType">
          <std:intval>1</std:intval>
        </std:node>
        <std:node name="Thickness">
          <std:intval>1</std:intval>
        </std:node>
        <std:node name="Arrows">
          <std:node name="Head">
            <std:node name="Angle">
              <std:floatval>7.5</std:floatval>
            </std:node>
            <std:node name="Type">
              <std:enumval name="CalloutArrowHeadType">Closed arrow</std:enumval>
            </std:node>
            <std:node name="Length">
              <std:floatval>6</std:floatval>
            </std:node>
          </std:node>
        </std:node>
        <std:node name="Text">
          <std:node name="Font">
            <std:node name="Name">
              <std:strval>GOSTtype A</std:strval>
            </std:node>
            <std:node name="Bold">
              <std:enumval name="YesNo">No</std:enumval>
            </std:node>
            <std:node name="Italic">
              <std:enumval name="YesNo">Yes</std:enumval>
            </std:node>
            <std:node name="Size">
              <std:floatval>7</std:floatval>
            </std:node>
            <std:node name="Underline">
              <std:enumval name="YesNo">No</std:enumval>
            </std:node>
            <std:node name="Color">
              <std:colorval>0 0 0</std:colorval>
            </std:node>
            <std:node name="Ratio">
              <std:floatval>90</std:floatval>
            </std:node>
            <std:node name="Slant">
              <std:floatval>0</std:floatval>
            </std:node>
            <std:node name="Spacing">
              <std:floatval>0</std:floatval>
            </std:node>
            <std:node name="Pitch">
              <std:enumval name="FontPitch">Fixed</std:enumval>
            </std:node>
            <std:node name="Strikethrough">
              <std:enumval name="YesNo">No</std:enumval>
            </std:node>
            <std:node name="Overline">
              <std:enumval name="YesNo">No</std:enumval>
            </std:node>
          </std:node>
          <std:node name="Frame">
            <std:enumval name="Frame">None</std:enumval>
          </std:node>
        </std:node>
        <std:node name="Color">
          <std:colorval>0 0 0</std:colorval>
        </std:node>
        <std:node name="Leader">
          <std:node name="Symbol">
            <std:enumval name="ArrowEndType">None</std:enumval>
          </std:node>
          <std:node name="Delta">
            <std:floatval>3</std:floatval>
          </std:node>
          <std:node name="AnchorPoint">
            <std:intval>0</std:intval>
          </std:node>
          <std:node name="StandardBehavior">
            <std:enumval name="YesNo">Yes</std:enumval>
          </std:node>
        </std:node>
      </std:node>
    </std:node>
    <std:node name="DimensionsSystem">
      <std:node name="Default">
        <std:node name="OffsetMode">
          <std:enumval name="OffsetMode">Constant</std:enumval>
        </std:node>
        <std:node name="OffsetLinear">
          <std:floatval>10</std:floatval>
        </std:node>
        <std:node name="OffsetRadial">
          <std:floatval>15</std:floatval>
        </std:node>
        <std:node name="AlignCumulatedOffset">
          <std:floatval>0</std:floatval>
        </std:node>
        <std:node name="AlignStacked">
          <std:enumval name="TextHAlignment">Center</std:enumval>
        </std:node>
        <std:node name="AlignStackedOffset">
          <std:floatval>0</std:floatval>
        </std:node>
        <std:node name="AlignAddFunnel">
          <std:enumval name="YesNo">Yes</std:enumval>
        </std:node>
        <std:node name="AlignCumulated">
          <std:enumval name="DimSysAlign">Center</std:enumval>
        </std:node>
      </std:node>
    </std:node>
    <std:node name="BomStyle">
      <std:node name="Default">
        <std:node name="Type">
          <std:enumval name="BomType">Summarized</std:enumval>
        </std:node>
        <std:node name="NoValueSymbol">
          <std:strval>-</std:strval>
        </std:node>
        <std:node name="NoMaterialLabel">
          <std:strval>-</std:strval>
        </std:node>
        <std:node name="ItemNumberLabelType">
          <std:enumval name="BomLabelType">Number</std:enumval>
        </std:node>
        <std:node name="TableStyle">
          <std:strval>Default</std:strval>
        </std:node>
        <std:node name="Properties">
          <std:typeval name="BomProperties">
            <std:strval name="Name" >ItemNumber</std:strval>
            <std:strval name="Title" >&lt;Automatic Naming&gt;</std:strval>
            <std:floatval name="Width" >10</std:floatval>
            <std:intval name="Index" >1</std:intval>
          </std:typeval>
          <std:typeval name="BomProperties">
            <std:strval name="Name" >Definition</std:strval>
            <std:strval name="Title" >&lt;Automatic Naming&gt;</std:strval>
            <std:floatval name="Width" >60</std:floatval>
            <std:intval name="Index" >2</std:intval>
          </std:typeval>
          <std:typeval name="BomProperties">
            <std:strval name="Name" >DescriptionRef</std:strval>
            <std:strval name="Title" >&lt;Automatic Naming&gt;</std:strval>
            <std:floatval name="Width" >55</std:floatval>
            <std:intval name="Index" >3</std:intval>
          </std:typeval>
          <std:typeval name="BomProperties">
            <std:strval name="Name" >Quantity</std:strval>
            <std:strval name="Title" >&lt;Automatic Naming&gt;</std:strval>
            <std:floatval name="Width" >10</std:floatval>
            <std:intval name="Index" >4</std:intval>
          </std:typeval>
          <std:typeval name="BomProperties">
            <std:strval name="Name" >Weight</std:strval>
            <std:strval name="Title" >&lt;Automatic Naming&gt;</std:strval>
            <std:floatval name="Width" >50</std:floatval>
            <std:intval name="Index" >5</std:intval>
          </std:typeval>
        </std:node>
      </std:node>
    </std:node>
  </std:node>
  <std:node name="General">
    <std:node name="AllowedToleranceFormats">
      <std:strval>ESKDNUM</std:strval>
      <std:strval>ESKDALP</std:strval>
      <std:strval>ESKDALP/</std:strval>
      <std:strval>ANS_NUM2</std:strval>
      <std:strval>TOL_NUM2</std:strval>
      <std:strval>MTL_A1N2</std:strval>
      <std:strval>ISOCOMB</std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
    </std:node>
    <std:node name="AllowedNumericalFormats">
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
    </std:node>
    <std:node name="AllowedTextFonts">
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
      <std:strval></std:strval>
    </std:node>
    <std:node name="AllowedTextFontSizes">
      <std:floatval>2.5</std:floatval>
      <std:floatval>3.5</std:floatval>
      <std:floatval>5</std:floatval>
      <std:floatval>7</std:floatval>
      <std:floatval>10</std:floatval>
      <std:floatval>14</std:floatval>
      <std:floatval>20</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
      <std:floatval>0</std:floatval>
    </std:node>
    <std:node name="StandardUpdateMigration">
      <std:enumval name="YesNo">Yes</std:enumval>
    </std:node>
    <std:node name="SheetColors">
      <std:node name="View">
        <std:node name="Color">
          <std:colorval>255 255 255</std:colorval>
        </std:node>
        <std:node name="Graduated">
          <std:enumval name="YesNo">Yes</std:enumval>
        </std:node>
      </std:node>
      <std:node name="View background">
        <std:node name="Color">
          <std:colorval>51 51 102</std:colorval>
        </std:node>
        <std:node name="Graduated">
          <std:enumval name="YesNo">Yes</std:enumval>
        </std:node>
      </std:node>
      <std:node name="Detail">
        <std:node name="Color">
          <std:colorval>255 255 255</std:colorval>
        </std:node>
        <std:node name="Graduated">
          <std:enumval name="YesNo">No</std:enumval>
        </std:node>
      </std:node>
      <std:node name="Detail background">
        <std:node name="Color">
          <std:colorval>207 207 230</std:colorval>
        </std:node>
        <std:node name="Graduated">
          <std:enumval name="YesNo">No</std:enumval>
        </std:node>
      </std:node>
    </std:node>
    <std:node name="ToleranceValue">
      <std:node name="NumericalToleranceValues">
        <std:strval>+1/0</std:strval>
        <std:strval>+0,5/0</std:strval>
        <std:strval>+0,25/0</std:strval>
        <std:strval>+0,2/0</std:strval>
        <std:strval>+0,15/0</std:strval>
        <std:strval>+0,1/0</std:strval>
        <std:strval>+0,02/0</std:strval>
        <std:strval>+0,01/0</std:strval>
        <std:strval>+-0,01</std:strval>
        <std:strval>+-0,02</std:strval>
        <std:strval>+-0,1</std:strval>
        <std:strval>+-0,15</std:strval>
        <std:strval>+-0,2</std:strval>
        <std:strval>+-0,25</std:strval>
        <std:strval>+-0,5</std:strval>
        <std:strval>+-1</std:strval>
        <std:strval>0/-0,01</std:strval>
        <std:strval>0/-0,02</std:strval>
        <std:strval>0/-0,1</std:strval>
        <std:strval>0/-0,15</std:strval>
        <std:strval>0/-0,2</std:strval>
        <std:strval>0/-0,25</std:strval>
        <std:strval>0/-0,5</std:strval>
        <std:strval>0/-1</std:strval>
        <std:strval></std:strval>
        <std:strval></std:strval>
        <std:strval></std:strval>
        <std:strval></std:strval>
        <std:strval></std:strval>
        <std:strval></std:strval>
        <std:strval>+-0,1</std:strval>
      </std:node>
      <std:node name="AlphanumericalToleranceValues">
        <std:strval>s7</std:strval>
        <std:strval>s6</std:strval>
        <std:strval>r6</std:strval>
        <std:strval>p6</std:strval>
        <std:strval>n7</std:strval>
        <std:strval>n6</std:strval>
        <std:strval>m7</std:strval>
        <std:strval>m6</std:strval>
        <std:strval>k7</std:strval>
        <std:strval>k6</std:strval>
        <std:strval>H12</std:strval>
        <std:strval>H9</std:strval>
        <std:strval>H8</std:strval>
        <std:strval>H7</std:strval>
        <std:strval>H6</std:strval>
        <std:strval>js9</std:strval>
        <std:strval>js11</std:strval>
        <std:strval>js12</std:strval>
        <std:strval>h6</std:strval>
        <std:strval>h7</std:strval>
        <std:strval>h8</std:strval>
        <std:strval>h9</std:strval>
        <std:strval>h11</std:strval>
        <std:strval>g6</std:strval>
        <std:strval>f7</std:strval>
        <std:strval>f8</std:strval>
        <std:strval>f9</std:strval>
        <std:strval>e7</std:strval>
        <std:strval>e8</std:strval>
        <std:strval>e9</std:strval>
        <std:strval>H9</std:strval>
      </std:node>
      <std:node name="BiAlphanumericalToleranceValues">
        <std:strval>H7/e8</std:strval>
        <std:strval>H7/f7</std:strval>
        <std:strval>H7/g6</std:strval>
        <std:strval>H7/h6</std:strval>
        <std:strval>H7/js6</std:strval>
        <std:strval>H7/k6</std:strval>
        <std:strval>H7/n6</std:strval>
        <std:strval>H7/p6</std:strval>
        <std:strval>H7/r6</std:strval>
        <std:strval>H7/s6</std:strval>
        <std:strval>H8/d9</std:strval>
        <std:strval>H8/e8</std:strval>
        <std:strval>H8/f7</std:strval>
        <std:strval>H8/g6</std:strval>
        <std:strval>H8/h7</std:strval>
        <std:strval>H8/h8</std:strval>
        <std:strval>H9/d9</std:strval>
        <std:strval>H9/h8</std:strval>
        <std:strval>H11/d11</std:strval>
        <std:strval>H11/h9</std:strval>
        <std:strval>H12/h9</std:strval>
        <std:strval>H12/h11</std:strval>
        <std:strval></std:strval>
        <std:strval></std:strval>
        <std:strval></std:strval>
        <std:strval></std:strval>
        <std:strval></std:strval>
        <std:strval></std:strval>
        <std:strval></std:strval>
        <std:strval></std:strval>
        <std:strval>H9/h8</std:strval>
      </std:node>
      <std:node name="MultipleToleranceValues">
        <std:strval>s7()</std:strval>
        <std:strval>s6()</std:strval>
        <std:strval>r6()</std:strval>
        <std:strval>p6()</std:strval>
        <std:strval>n7()</std:strval>
        <std:strval>n6()</std:strval>
        <std:strval>m7()</std:strval>
        <std:strval>m6()</std:strval>
        <std:strval>k7()</std:strval>
        <std:strval>k6()</std:strval>
        <std:strval>H12()</std:strval>
        <std:strval>H9()</std:strval>
        <std:strval>H8()</std:strval>
        <std:strval>H7()</std:strval>
        <std:strval>H6()</std:strval>
        <std:strval>Js9()</std:strval>
        <std:strval>Js11()</std:strval>
        <std:strval>Js12()</std:strval>
        <std:strval>h6()</std:strval>
        <std:strval>h7()</std:strval>
        <std:strval>h8()</std:strval>
        <std:strval>h9()</std:strval>
        <std:strval>h11()</std:strval>
        <std:strval>g6()</std:strval>
        <std:strval>f7()</std:strval>
        <std:strval>f8()</std:strval>
        <std:strval>f9()</std:strval>
        <std:strval>e7()</std:strval>
        <std:strval>e8()</std:strval>
        <std:strval>e9()</std:strval>
        <std:strval>H9()</std:strval>
      </std:node>
    </std:node>
    <std:node name="StrokeFontPrintRatio">
      <std:floatval>-0.2</std:floatval>
    </std:node>
  </std:node>
  <std:node name="DressUp">
    <std:node name="Thread">
      <std:node name="ThreadRepresentation">
        <std:enumval name="ThreadRep">Arc circle</std:enumval>
      </std:node>
    </std:node>
    <std:node name="Symbols">
      <std:node name="SimpleArrow">
        <std:node name="Length">
          <std:floatval>6</std:floatval>
        </std:node>
        <std:node name="Angle">
          <std:floatval>15</std:floatval>
        </std:node>
      </std:node>
      <std:node name="FilledArrow">
        <std:node name="Length">
          <std:floatval>6</std:floatval>
        </std:node>
        <std:node name="Angle">
          <std:floatval>15</std:floatval>
        </std:node>
      </std:node>
      <std:node name="ClosedArrow">
        <std:node name="Length">
          <std:floatval>6</std:floatval>
        </std:node>
        <std:node name="Angle">
          <std:floatval>15</std:floatval>
        </std:node>
      </std:node>
      <std:node name="SymetricArrow">
        <std:node name="Length">
          <std:floatval>6</std:floatval>
        </std:node>
        <std:node name="Angle">
          <std:floatval>15</std:floatval>
        </std:node>
      </std:node>
      <std:node name="Circle">
        <std:node name="Diameter">
          <std:floatval>2</std:floatval>
        </std:node>
      </std:node>
      <std:node name="FilledCircle">
        <std:node name="Diameter">
          <std:floatval>2</std:floatval>
        </std:node>
      </std:node>
      <std:node name="SymetricCircle">
        <std:node name="Diameter">
          <std:floatval>2</std:floatval>
        </std:node>
      </std:node>
      <std:node name="CrossCircle">
        <std:node name="Diameter">
          <std:floatval>2</std:floatval>
        </std:node>
      </std:node>
      <std:node name="Slash">
        <std:node name="Length">
          <std:floatval>3</std:floatval>
        </std:node>
      </std:node>
      <std:node name="Triangle">
        <std:node name="Length">
          <std:floatval>3</std:floatval>
        </std:node>
      </std:node>
      <std:node name="FilledTriangle">
        <std:node name="Length">
          <std:floatval>3</std:floatval>
        </std:node>
      </std:node>
      <std:node name="WhiteFilledSquare">
        <std:node name="Length">
          <std:floatval>3</std:floatval>
        </std:node>
      </std:node>
      <std:node name="BlackFilledSquare">
        <std:node name="Length">
          <std:floatval>3</std:floatval>
        </std:node>
      </std:node>
      <std:node name="Plus">
        <std:node name="Length">
          <std:floatval>3</std:floatval>
        </std:node>
      </std:node>
      <std:node name="Cross">
        <std:node name="Length">
          <std:floatval>3</std:floatval>
        </std:node>
      </std:node>
      <std:node name="DoubleArrow">
        <std:node name="Length">
          <std:floatval>6</std:floatval>
        </std:node>
        <std:node name="Angle">
          <std:floatval>15</std:floatval>
        </std:node>
      </std:node>
      <std:node name="WaveArrow">
        <std:node name="Diameter">
          <std:floatval>3</std:floatval>
        </std:node>
      </std:node>
      <std:node name="DoubleFilledArrow">
        <std:node name="Length">
          <std:floatval>6</std:floatval>
        </std:node>
        <std:node name="Angle">
          <std:floatval>15</std:floatval>
        </std:node>
      </std:node>
    </std:node>
  </std:node>
  <std:node name="Dimension">
    <std:node name="ParentStandard">
      <std:strval>ISO</std:strval>
    </std:node>
    <std:node name="DIMLUnderline">
      <std:intval>2</std:intval>
    </std:node>
    <std:node name="DIMLRadiusIntReachCenter">
      <std:intval>2</std:intval>
    </std:node>
    <std:node name="DIMLRadiusExtReachCenter">
      <std:intval>1</std:intval>
    </std:node>
    <std:node name="DIMLDiameterIntReachCenter">
      <std:intval>2</std:intval>
    </std:node>
    <std:node name="DIMLDiameterExtReachCenter">
      <std:intval>1</std:intval>
    </std:node>
    <std:node name="DIMLDiameterIntOverrun">
      <std:floatval>0</std:floatval>
    </std:node>
    <std:node name="DIMLRadiusExtLength">
      <std:floatval>0</std:floatval>
    </std:node>
    <std:node name="DIMLDiameterExtLength">
      <std:floatval>0</std:floatval>
    </std:node>
    <std:node name="DIMLFlippedOverrun">
      <std:floatval>5</std:floatval>
    </std:node>
    <std:node name="DIMLNoFlippedOverrun">
      <std:floatval>0</std:floatval>
    </std:node>
    <std:node name="DIMLShowReverse">
      <std:intval>2</std:intval>
    </std:node>
    <std:node name="DIMLShowNoReverse">
      <std:intval>2</std:intval>
    </std:node>
    <std:node name="DIMTYPos">
      <std:floatval>2</std:floatval>
    </std:node>
    <std:node name="DIMTxtJustif">
      <std:intval>3</std:intval>
    </std:node>
    <std:node name="DIMLTail">
      <std:floatval>0</std:floatval>
    </std:node>
    <std:node name="DIMLConstantLength">
      <std:floatval>5</std:floatval>
    </std:node>
    <std:node name="DIMLTextGap">
      <std:floatval>0.5</std:floatval>
    </std:node>
    <std:node name="DIMLFrameGap">
      <std:floatval>0.5</std:floatval>
    </std:node>
    <std:node name="DIMTolMultiAuto">
      <std:intval>1</std:intval>
    </std:node>
    <std:node name="SYMBArrowSide">
      <std:floatval>4</std:floatval>
    </std:node>
    <std:node name="SYMBArrowAngle">
      <std:floatval>15</std:floatval>
    </std:node>
    <std:node name="SYMBClosedArrowSide">
      <std:floatval>4</std:floatval>
    </std:node>
    <std:node name="SYMBClosedArrowAngle">
      <std:floatval>15</std:floatval>
    </std:node>
    <std:node name="SYMBFilledArrowSide">
      <std:floatval>4</std:floatval>
    </std:node>
    <std:node name="SYMBFilledArrowAngle">
      <std:floatval>15</std:floatval>
    </std:node>
    <std:node name="SYMBSymetricArrowSide">
      <std:floatval>0.01</std:floatval>
    </std:node>
    <std:node name="SYMBSymetricArrowAngle">
      <std:floatval>0.01</std:floatval>
    </std:node>
    <std:node name="SYMBSlashLength">
      <std:floatval>3</std:floatval>
    </std:node>
    <std:node name="SYMBCircleDiameter">
      <std:floatval>2</std:floatval>
    </std:node>
    <std:node name="SYMBFilledCircleDiameter">
      <std:floatval>1</std:floatval>
    </std:node>
    <std:node name="SYMBSymetricCircleDiameter">
      <std:floatval>3</std:floatval>
    </std:node>
    <std:node name="SYMBCrossCircleDiameter">
      <std:floatval>3</std:floatval>
    </std:node>
    <std:node name="SYMBTriangleSide">
      <std:floatval>4</std:floatval>
    </std:node>
    <std:node name="SYMBFilledTriangleSide">
      <std:floatval>4</std:floatval>
    </std:node>
    <std:node name="SYMBPlusHeight">
      <std:floatval>3</std:floatval>
    </std:node>
    <std:node name="SYMBCrossSide">
      <std:floatval>3</std:floatval>
    </std:node>
    <std:node name="SYMBReverseLimit">
      <std:floatval>3</std:floatval>
    </std:node>
    <std:node name="SCORLeftTail">
      <std:floatval>0</std:floatval>
    </std:node>
    <std:node name="SCORRightTail">
      <std:floatval>0</std:floatval>
    </std:node>
    <std:node name="SCORVertSpace">
      <std:floatval>1</std:floatval>
    </std:node>
    <std:node name="CHFSepHeight">
      <std:floatval>1.75</std:floatval>
    </std:node>
    <std:node name="CHFFrameGroup">
      <std:intval>2</std:intval>
    </std:node>
    <std:node name="HLFIntOverrunMode">
      <std:intval>3</std:intval>
    </std:node>
    <std:node name="HLFIntOverrun">
      <std:floatval>2</std:floatval>
    </std:node>
    <std:node name="ASTBeforePosReference">
      <std:intval>8</std:intval>
    </std:node>
    <std:node name="ASTAfterPosReference">
      <std:intval>2</std:intval>
    </std:node>
    <std:node name="ASTInsertPosReference">
      <std:intval>2</std:intval>
    </std:node>
    <std:node name="ASTUpperPosReference">
      <std:intval>6</std:intval>
    </std:node>
    <std:node name="ASTLowerPosReference">
      <std:intval>4</std:intval>
    </std:node>
    <std:node name="ASTBeforeXDist">
      <std:floatval>0</std:floatval>
    </std:node>
    <std:node name="ASTBeforeYDist">
      <std:floatval>0</std:floatval>
    </std:node>
    <std:node name="ASTAfterXDist">
      <std:floatval>0</std:floatval>
    </std:node>
    <std:node name="ASTAfterYDist">
      <std:floatval>0</std:floatval>
    </std:node>
    <std:node name="ASTInsertXDist">
      <std:floatval>0</std:floatval>
    </std:node>
    <std:node name="ASTInsertYDist">
      <std:floatval>0</std:floatval>
    </std:node>
    <std:node name="ASTUpperXDist">
      <std:floatval>0</std:floatval>
    </std:node>
    <std:node name="ASTUpperYDist">
      <std:floatval>3</std:floatval>
    </std:node>
    <std:node name="ASTLowerXDist">
      <std:floatval>0</std:floatval>
    </std:node>
    <std:node name="ASTLowerYDist">
      <std:floatval>3</std:floatval>
    </std:node>
    <std:node name="TXTAngleAllowed">
      <std:intval>2</std:intval>
    </std:node>
    <std:node name="TXTLeaderLeftTail">
      <std:floatval>0</std:floatval>
    </std:node>
    <std:node name="TXTLeaderRightTail">
      <std:floatval>0</std:floatval>
    </std:node>
    <std:node name="TXTLeaderVertSpace">
      <std:floatval>0</std:floatval>
    </std:node>
    <std:node name="TXTLeaderGap">
      <std:floatval>0</std:floatval>
    </std:node>
    <std:node name="TXTThickness">
      <std:floatval>0.2</std:floatval>
    </std:node>
    <std:node name="FAKIdentifyMode">
      <std:intval>4</std:intval>
    </std:node>
    <std:node name="FAKUnderlineTail">
      <std:floatval>2</std:floatval>
    </std:node>
    <std:node name="FAKVerticalOffset">
      <std:floatval>1</std:floatval>
    </std:node>
    <std:node name="DUASideSepHeight">
      <std:floatval>1</std:floatval>
    </std:node>
    <std:node name="DUAAboveOffset">
      <std:floatval>0</std:floatval>
    </std:node>
    <std:node name="DUAAboveSpace">
      <std:floatval>2</std:floatval>
    </std:node>
    <std:node name="DUAPosReference">
      <std:intval>2</std:intval>
    </std:node>
    <std:node name="DUAJustification">
      <std:intval>2</std:intval>
    </std:node>
    <std:node name="TXTDatumMode">
      <std:intval>1</std:intval>
    </std:node>
    <std:node name="CUMLSignDisplay">
      <std:intval>1</std:intval>
    </std:node>
    <std:node name="CUMLOriginSymbol">
      <std:intval>9</std:intval>
    </std:node>
    <std:node name="CUMLSymbolScale">
      <std:floatval>1</std:floatval>
    </std:node>
    <std:node name="CUMLExtLDisplay">
      <std:intval>2</std:intval>
    </std:node>
    <std:node name="CUMLZeroDisplay">
      <std:intval>2</std:intval>
    </std:node>
    <std:node name="CUMLTxtReference">
      <std:intval>2</std:intval>
    </std:node>
    <std:node name="CUMLTxtOrient">
      <std:intval>1</std:intval>
    </std:node>
    <std:node name="CUMLTxtAngle">
      <std:floatval>0</std:floatval>
    </std:node>
    <std:node name="CUMLDimLDisplay">
      <std:intval>2</std:intval>
    </std:node>
    <std:node name="CUMLDimLLength">
      <std:floatval>5</std:floatval>
    </std:node>
    <std:node name="CUMLExtLMode">
      <std:intval>4</std:intval>
    </std:node>
    <std:node name="CUMLExtLOver">
      <std:floatval>0</std:floatval>
    </std:node>
    <std:node name="CUMLExtLLength">
      <std:floatval>5</std:floatval>
    </std:node>
    <std:node name="CUMLDimLTxtVPos">
      <std:floatval>3</std:floatval>
    </std:node>
    <std:node name="CUMLExtLTxtVPos">
      <std:floatval>3</std:floatval>
    </std:node>
    <std:node name="CUMLExtLTxtHPos">
      <std:floatval>0</std:floatval>
    </std:node>
    <std:node name="CUMLExtLTxtRef">
      <std:intval>1</std:intval>
    </std:node>
    <std:node name="CUMLTxtVJusti1">
      <std:intval>1</std:intval>
    </std:node>
    <std:node name="CUMLTxtVJusti2">
      <std:intval>1</std:intval>
    </std:node>
    <std:node name="CUMLTxtHJusti">
      <std:intval>2</std:intval>
    </std:node>
    <std:node name="CUMLDimLinMode">
      <std:intval>3</std:intval>
    </std:node>
    <std:node name="CUMLTxtDecalY">
      <std:floatval>5</std:floatval>
    </std:node>
    <std:node name="CUMLTxtVJusti">
      <std:intval>2</std:intval>
    </std:node>
    <std:node name="CurvilinearLengthSymbol">
      <std:node name="STDDimDisplayArcSymbol">
        <std:intval>2</std:intval>
      </std:node>
      <std:node name="STDDimHeightArcSymbol">
        <std:floatval>1</std:floatval>
      </std:node>
      <std:node name="STDDimOffsetArcSymbol">
        <std:floatval>1</std:floatval>
      </std:node>
      <std:node name="STDDimUnderlineModeArcSymbol">
        <std:intval>0</std:intval>
      </std:node>
      <std:node name="STDDimLengthArcSymbol">
        <std:floatval>3</std:floatval>
      </std:node>
      <std:node name="STDDimMinLengthArcSymbol">
        <std:floatval>3</std:floatval>
      </std:node>
      <std:node name="STDDimMaxLengthArcSymbol">
        <std:floatval>10</std:floatval>
      </std:node>
    </std:node>
    <std:node name="IntersectionPoint">
      <std:node name="INTPTPrintPoint">
        <std:enumval name="YesNo">No</std:enumval>
      </std:node>
      <std:node name="INTPTPointStyle">
        <std:strval>Default</std:strval>
      </std:node>
      <std:node name="INTPTShowLine">
        <std:enumval name="YesNo">No</std:enumval>
      </std:node>
      <std:node name="INTPTPrintLine">
        <std:enumval name="YesNo">No</std:enumval>
      </std:node>
      <std:node name="INTPTLineStyle">
        <std:strval>Default</std:strval>
      </std:node>
    </std:node>
  </std:node>
  <std:node name="Annotation">
    <std:node name="Text">
      <std:node name="LeaderGap">
        <std:floatval>0</std:floatval>
      </std:node>
      <std:node name="LeaderVertSpace">
        <std:floatval>0</std:floatval>
      </std:node>
    </std:node>
    <std:node name="Roughness">
      <std:node name="Layout">
        <std:node name="CutOff">
          <std:enumval name="AuthorizedMode">Not Authorized</std:enumval>
        </std:node>
        <std:node name="OtherRequirement">
          <std:enumval name="AuthorizedMode">Not Authorized</std:enumval>
        </std:node>
        <std:node name="Min">
          <std:enumval name="AuthorizedMode">Authorized</std:enumval>
        </std:node>
        <std:node name="Max">
          <std:enumval name="AuthorizedMode">Not Authorized</std:enumval>
        </std:node>
      </std:node>
      <std:node name="LeaderGap">
        <std:floatval>0</std:floatval>
      </std:node>
      <std:node name="LeaderVertSpace">
        <std:floatval>0</std:floatval>
      </std:node>
      <std:node name="ExtensionLine">
        <std:node name="Thickness">
          <std:node name="Behavior">
            <std:enumval name="FixedRough">Fixed</std:enumval>
          </std:node>
          <std:node name="LineThickness">
            <std:intval>1</std:intval>
          </std:node>
        </std:node>
        <std:node name="GapToSurf">
          <std:floatval>0</std:floatval>
        </std:node>
        <std:node name="LengthSymbol">
          <std:enumval name="YesNo">Yes</std:enumval>
        </std:node>
        <std:node name="Overrun">
          <std:floatval>2</std:floatval>
        </std:node>
      </std:node>
      <std:node name="LeaderAnchorAccordingToStandard">
        <std:enumval name="YesNo">Yes</std:enumval>
      </std:node>
    </std:node>
    <std:node name="BlankBackground">
      <std:node name="AroundValue">
        <std:node name="ExtendToFrame">
          <std:enumval name="YesNo">Yes</std:enumval>
        </std:node>
        <std:node name="Margin">
          <std:floatval>1</std:floatval>
        </std:node>
      </std:node>
      <std:node name="AroundLeader">
        <std:node name="Activated">
          <std:enumval name="YesNo">No</std:enumval>
        </std:node>
        <std:node name="Margin">
          <std:floatval>0.5</std:floatval>
        </std:node>
        <std:node name="MarginAroundRef">
          <std:floatval>0.2</std:floatval>
        </std:node>
      </std:node>
    </std:node>
  </std:node>
  <std:node name="ToleranceFormats">
    <std:typeval name="ToleranceDisplay">
      <std:strval name="Name" >ESKDNUM</std:strval>
      <std:intval name="TolType" >2</std:intval>
      <std:intval name="TolSepar_1" >0</std:intval>
      <std:intval name="TolSepar_2" >0</std:intval>
      <std:floatval name="TolSymbolH" >1</std:floatval>
      <std:intval name="TolSepTo_1" >0</std:intval>
      <std:intval name="TolSepTo_2" >0</std:intval>
      <std:intval name="TolSepTo_3" >0</std:intval>
      <std:intval name="TolTrailing" >1</std:intval>
      <std:intval name="TolFractLine" >1</std:intval>
      <std:intval name="TolPtOnValue" >8</std:intval>
      <std:intval name="TolAnchorPt" >2</std:intval>
      <std:floatval name="TolIntX" >0</std:floatval>
      <std:floatval name="TolIntY" >0.5</std:floatval>
      <std:floatval name="TolExtX" >0.5</std:floatval>
      <std:floatval name="TolExtY" >0</std:floatval>
      <std:intval name="TolMergeSame" >1</std:intval>
      <std:intval name="TolShowNull" >3</std:intval>
      <std:floatval name="TolScale" >0.7</std:floatval>
    </std:typeval>
    <std:typeval name="ToleranceDisplay">
      <std:strval name="Name" >ESKDALP</std:strval>
      <std:intval name="TolType" >5</std:intval>
      <std:intval name="TolSepar_1" >0</std:intval>
      <std:intval name="TolSepar_2" >0</std:intval>
      <std:floatval name="TolSymbolH" >1</std:floatval>
      <std:intval name="TolSepTo_1" >0</std:intval>
      <std:intval name="TolSepTo_2" >0</std:intval>
      <std:intval name="TolSepTo_3" >0</std:intval>
      <std:intval name="TolTrailing" >1</std:intval>
      <std:intval name="TolFractLine" >1</std:intval>
      <std:intval name="TolPtOnValue" >8</std:intval>
      <std:intval name="TolAnchorPt" >2</std:intval>
      <std:floatval name="TolIntX" >0</std:floatval>
      <std:floatval name="TolIntY" >0</std:floatval>
      <std:floatval name="TolExtX" >0.5</std:floatval>
      <std:floatval name="TolExtY" >0</std:floatval>
      <std:intval name="TolMergeSame" >1</std:intval>
      <std:intval name="TolShowNull" >3</std:intval>
      <std:floatval name="TolScale" >1</std:floatval>
    </std:typeval>
    <std:typeval name="ToleranceDisplay">
      <std:strval name="Name" >ESKDALP/</std:strval>
      <std:intval name="TolType" >7</std:intval>
      <std:intval name="TolSepar_1" >0</std:intval>
      <std:intval name="TolSepar_2" >0</std:intval>
      <std:floatval name="TolSymbolH" >1</std:floatval>
      <std:intval name="TolSepTo_1" >0</std:intval>
      <std:intval name="TolSepTo_2" >0</std:intval>
      <std:intval name="TolSepTo_3" >0</std:intval>
      <std:intval name="TolTrailing" >1</std:intval>
      <std:intval name="TolFractLine" >2</std:intval>
      <std:intval name="TolPtOnValue" >8</std:intval>
      <std:intval name="TolAnchorPt" >2</std:intval>
      <std:floatval name="TolIntX" >0</std:floatval>
      <std:floatval name="TolIntY" >0.5</std:floatval>
      <std:floatval name="TolExtX" >0.5</std:floatval>
      <std:floatval name="TolExtY" >0</std:floatval>
      <std:intval name="TolMergeSame" >1</std:intval>
      <std:intval name="TolShowNull" >3</std:intval>
      <std:floatval name="TolScale" >0.7</std:floatval>
    </std:typeval>
  </std:node>
  <std:node name="ValueFormats">
    <std:typeval name="NumericalDisplay">
      <std:strval name="Name" >micron</std:strval>
      <std:intval name="NDType" >1</std:intval>
      <std:intval name="NDUnit" >1</std:intval>
      <std:floatval name="NDGlobFact" >0.001</std:floatval>
      <std:intval name="NDNulFac_1" >1</std:intval>
      <std:intval name="NDNulFac_2" >2</std:intval>
      <std:intval name="NDNulFac_3" >1</std:intval>
      <std:intval name="NDExise" >1</std:intval>
      <std:intval name="NDSep1000" >0</std:intval>
      <std:floatval name="NDFact_1" >1</std:floatval>
      <std:floatval name="NDFact_2" >0</std:floatval>
      <std:floatval name="NDFact_3" >0</std:floatval>
      <std:floatval name="NDValPos_1" >0</std:floatval>
      <std:floatval name="NDValPos_2" >0</std:floatval>
      <std:floatval name="NDValPos_3" >0</std:floatval>
      <std:strval name="NDSepar_1" ></std:strval>
      <std:strval name="NDSepar_2" ></std:strval>
      <std:strval name="NDSepar_3" ></std:strval>
      <std:floatval name="NDSepScl_1" >1</std:floatval>
      <std:floatval name="NDSepScl_2" >0</std:floatval>
      <std:floatval name="NDSepScl_3" >0</std:floatval>
      <std:floatval name="NDSepPos_1" >0</std:floatval>
      <std:floatval name="NDSepPos_2" >0</std:floatval>
      <std:floatval name="NDSepPos_3" >0</std:floatval>
      <std:floatval name="NDRestY" >0</std:floatval>
      <std:intval name="NDFinZer" >1</std:intval>
      <std:intval name="NDSepNum" >11</std:intval>
      <std:intval name="NDTypFrac" >2</std:intval>
      <std:intval name="NDSepDen" >2</std:intval>
      <std:floatval name="NDOperY" >0.5</std:floatval>
      <std:intval name="NDNulOther" >1</std:intval>
      <std:floatval name="NDResScl" >1</std:floatval>
      <std:intval name="NDFact" >1</std:intval>
      <std:floatval name="NDRestX" >0.5</std:floatval>
    </std:typeval>
    <std:typeval name="NumericalDisplay">
      <std:strval name="Name" >mm</std:strval>
      <std:intval name="NDType" >1</std:intval>
      <std:intval name="NDUnit" >1</std:intval>
      <std:floatval name="NDGlobFact" >1</std:floatval>
      <std:intval name="NDNulFac_1" >1</std:intval>
      <std:intval name="NDNulFac_2" >2</std:intval>
      <std:intval name="NDNulFac_3" >1</std:intval>
      <std:intval name="NDExise" >1</std:intval>
      <std:intval name="NDSep1000" >0</std:intval>
      <std:floatval name="NDFact_1" >1</std:floatval>
      <std:floatval name="NDFact_2" >0</std:floatval>
      <std:floatval name="NDFact_3" >0</std:floatval>
      <std:floatval name="NDValPos_1" >0</std:floatval>
      <std:floatval name="NDValPos_2" >0</std:floatval>
      <std:floatval name="NDValPos_3" >0</std:floatval>
      <std:strval name="NDSepar_1" ></std:strval>
      <std:strval name="NDSepar_2" ></std:strval>
      <std:strval name="NDSepar_3" ></std:strval>
      <std:floatval name="NDSepScl_1" >1</std:floatval>
      <std:floatval name="NDSepScl_2" >0</std:floatval>
      <std:floatval name="NDSepScl_3" >0</std:floatval>
      <std:floatval name="NDSepPos_1" >0</std:floatval>
      <std:floatval name="NDSepPos_2" >0</std:floatval>
      <std:floatval name="NDSepPos_3" >0</std:floatval>
      <std:floatval name="NDRestY" >0</std:floatval>
      <std:intval name="NDFinZer" >1</std:intval>
      <std:intval name="NDSepNum" >11</std:intval>
      <std:intval name="NDTypFrac" >2</std:intval>
      <std:intval name="NDSepDen" >2</std:intval>
      <std:floatval name="NDOperY" >0.5</std:floatval>
      <std:intval name="NDNulOther" >1</std:intval>
      <std:floatval name="NDResScl" >1</std:floatval>
      <std:intval name="NDFact" >1</std:intval>
      <std:floatval name="NDRestX" >0.5</std:floatval>
    </std:typeval>
    <std:typeval name="NumericalDisplay">
      <std:strval name="Name" >cm</std:strval>
      <std:intval name="NDType" >1</std:intval>
      <std:intval name="NDUnit" >1</std:intval>
      <std:floatval name="NDGlobFact" >10</std:floatval>
      <std:intval name="NDNulFac_1" >1</std:intval>
      <std:intval name="NDNulFac_2" >2</std:intval>
      <std:intval name="NDNulFac_3" >1</std:intval>
      <std:intval name="NDExise" >1</std:intval>
      <std:intval name="NDSep1000" >0</std:intval>
      <std:floatval name="NDFact_1" >1</std:floatval>
      <std:floatval name="NDFact_2" >0</std:floatval>
      <std:floatval name="NDFact_3" >0</std:floatval>
      <std:floatval name="NDValPos_1" >0</std:floatval>
      <std:floatval name="NDValPos_2" >0</std:floatval>
      <std:floatval name="NDValPos_3" >0</std:floatval>
      <std:strval name="NDSepar_1" ></std:strval>
      <std:strval name="NDSepar_2" ></std:strval>
      <std:strval name="NDSepar_3" ></std:strval>
      <std:floatval name="NDSepScl_1" >1</std:floatval>
      <std:floatval name="NDSepScl_2" >0</std:floatval>
      <std:floatval name="NDSepScl_3" >0</std:floatval>
      <std:floatval name="NDSepPos_1" >0</std:floatval>
      <std:floatval name="NDSepPos_2" >0</std:floatval>
      <std:floatval name="NDSepPos_3" >0</std:floatval>
      <std:floatval name="NDRestY" >0</std:floatval>
      <std:intval name="NDFinZer" >1</std:intval>
      <std:intval name="NDSepNum" >11</std:intval>
      <std:intval name="NDTypFrac" >2</std:intval>
      <std:intval name="NDSepDen" >2</std:intval>
      <std:floatval name="NDOperY" >0.5</std:floatval>
      <std:intval name="NDNulOther" >1</std:intval>
      <std:floatval name="NDResScl" >1</std:floatval>
      <std:intval name="NDFact" >1</std:intval>
      <std:floatval name="NDRestX" >0.5</std:floatval>
    </std:typeval>
    <std:typeval name="NumericalDisplay">
      <std:strval name="Name" >m</std:strval>
      <std:intval name="NDType" >1</std:intval>
      <std:intval name="NDUnit" >1</std:intval>
      <std:floatval name="NDGlobFact" >1000</std:floatval>
      <std:intval name="NDNulFac_1" >1</std:intval>
      <std:intval name="NDNulFac_2" >2</std:intval>
      <std:intval name="NDNulFac_3" >1</std:intval>
      <std:intval name="NDExise" >1</std:intval>
      <std:intval name="NDSep1000" >0</std:intval>
      <std:floatval name="NDFact_1" >1</std:floatval>
      <std:floatval name="NDFact_2" >0</std:floatval>
      <std:floatval name="NDFact_3" >0</std:floatval>
      <std:floatval name="NDValPos_1" >0</std:floatval>
      <std:floatval name="NDValPos_2" >0</std:floatval>
      <std:floatval name="NDValPos_3" >0</std:floatval>
      <std:strval name="NDSepar_1" ></std:strval>
      <std:strval name="NDSepar_2" ></std:strval>
      <std:strval name="NDSepar_3" ></std:strval>
      <std:floatval name="NDSepScl_1" >1</std:floatval>
      <std:floatval name="NDSepScl_2" >0</std:floatval>
      <std:floatval name="NDSepScl_3" >0</std:floatval>
      <std:floatval name="NDSepPos_1" >0</std:floatval>
      <std:floatval name="NDSepPos_2" >0</std:floatval>
      <std:floatval name="NDSepPos_3" >0</std:floatval>
      <std:floatval name="NDRestY" >0</std:floatval>
      <std:intval name="NDFinZer" >1</std:intval>
      <std:intval name="NDSepNum" >11</std:intval>
      <std:intval name="NDTypFrac" >2</std:intval>
      <std:intval name="NDSepDen" >2</std:intval>
      <std:floatval name="NDOperY" >0.5</std:floatval>
      <std:intval name="NDNulOther" >1</std:intval>
      <std:floatval name="NDResScl" >1</std:floatval>
      <std:intval name="NDFact" >1</std:intval>
      <std:floatval name="NDRestX" >0.5</std:floatval>
    </std:typeval>
    <std:typeval name="NumericalDisplay">
      <std:strval name="Name" >km</std:strval>
      <std:intval name="NDType" >1</std:intval>
      <std:intval name="NDUnit" >1</std:intval>
      <std:floatval name="NDGlobFact" >1000000</std:floatval>
      <std:intval name="NDNulFac_1" >1</std:intval>
      <std:intval name="NDNulFac_2" >2</std:intval>
      <std:intval name="NDNulFac_3" >1</std:intval>
      <std:intval name="NDExise" >1</std:intval>
      <std:intval name="NDSep1000" >0</std:intval>
      <std:floatval name="NDFact_1" >1</std:floatval>
      <std:floatval name="NDFact_2" >0</std:floatval>
      <std:floatval name="NDFact_3" >0</std:floatval>
      <std:floatval name="NDValPos_1" >0</std:floatval>
      <std:floatval name="NDValPos_2" >0</std:floatval>
      <std:floatval name="NDValPos_3" >0</std:floatval>
      <std:strval name="NDSepar_1" ></std:strval>
      <std:strval name="NDSepar_2" ></std:strval>
      <std:strval name="NDSepar_3" ></std:strval>
      <std:floatval name="NDSepScl_1" >1</std:floatval>
      <std:floatval name="NDSepScl_2" >0</std:floatval>
      <std:floatval name="NDSepScl_3" >0</std:floatval>
      <std:floatval name="NDSepPos_1" >0</std:floatval>
      <std:floatval name="NDSepPos_2" >0</std:floatval>
      <std:floatval name="NDSepPos_3" >0</std:floatval>
      <std:floatval name="NDRestY" >0</std:floatval>
      <std:intval name="NDFinZer" >1</std:intval>
      <std:intval name="NDSepNum" >11</std:intval>
      <std:intval name="NDTypFrac" >2</std:intval>
      <std:intval name="NDSepDen" >2</std:intval>
      <std:floatval name="NDOperY" >0.5</std:floatval>
      <std:intval name="NDNulOther" >1</std:intval>
      <std:floatval name="NDResScl" >1</std:floatval>
      <std:intval name="NDFact" >1</std:intval>
      <std:floatval name="NDRestX" >0.5</std:floatval>
    </std:typeval>
    <std:typeval name="NumericalDisplay">
      <std:strval name="Name" >in</std:strval>
      <std:intval name="NDType" >1</std:intval>
      <std:intval name="NDUnit" >2</std:intval>
      <std:floatval name="NDGlobFact" >1</std:floatval>
      <std:intval name="NDNulFac_1" >1</std:intval>
      <std:intval name="NDNulFac_2" >2</std:intval>
      <std:intval name="NDNulFac_3" >1</std:intval>
      <std:intval name="NDExise" >1</std:intval>
      <std:intval name="NDSep1000" >0</std:intval>
      <std:floatval name="NDFact_1" >1</std:floatval>
      <std:floatval name="NDFact_2" >0</std:floatval>
      <std:floatval name="NDFact_3" >0</std:floatval>
      <std:floatval name="NDValPos_1" >0</std:floatval>
      <std:floatval name="NDValPos_2" >0</std:floatval>
      <std:floatval name="NDValPos_3" >0</std:floatval>
      <std:strval name="NDSepar_1" ></std:strval>
      <std:strval name="NDSepar_2" ></std:strval>
      <std:strval name="NDSepar_3" ></std:strval>
      <std:floatval name="NDSepScl_1" >1</std:floatval>
      <std:floatval name="NDSepScl_2" >0</std:floatval>
      <std:floatval name="NDSepScl_3" >0</std:floatval>
      <std:floatval name="NDSepPos_1" >0</std:floatval>
      <std:floatval name="NDSepPos_2" >0</std:floatval>
      <std:floatval name="NDSepPos_3" >0</std:floatval>
      <std:floatval name="NDRestY" >0</std:floatval>
      <std:intval name="NDFinZer" >1</std:intval>
      <std:intval name="NDSepNum" >11</std:intval>
      <std:intval name="NDTypFrac" >2</std:intval>
      <std:intval name="NDSepDen" >2</std:intval>
      <std:floatval name="NDOperY" >0.5</std:floatval>
      <std:intval name="NDNulOther" >1</std:intval>
      <std:floatval name="NDResScl" >1</std:floatval>
      <std:intval name="NDFact" >1</std:intval>
      <std:floatval name="NDRestX" >0.5</std:floatval>
    </std:typeval>
    <std:typeval name="NumericalDisplay">
      <std:strval name="Name" >ftinch</std:strval>
      <std:intval name="NDType" >1</std:intval>
      <std:intval name="NDUnit" >2</std:intval>
      <std:floatval name="NDGlobFact" >1</std:floatval>
      <std:intval name="NDNulFac_1" >1</std:intval>
      <std:intval name="NDNulFac_2" >2</std:intval>
      <std:intval name="NDNulFac_3" >1</std:intval>
      <std:intval name="NDExise" >1</std:intval>
      <std:intval name="NDSep1000" >0</std:intval>
      <std:floatval name="NDFact_1" >1</std:floatval>
      <std:floatval name="NDFact_2" >12</std:floatval>
      <std:floatval name="NDFact_3" >0</std:floatval>
      <std:floatval name="NDValPos_1" >0</std:floatval>
      <std:floatval name="NDValPos_2" >0</std:floatval>
      <std:floatval name="NDValPos_3" >0</std:floatval>
      <std:strval name="NDSepar_1" >&quot;</std:strval>
      <std:strval name="NDSepar_2" >&apos;</std:strval>
      <std:strval name="NDSepar_3" ></std:strval>
      <std:floatval name="NDSepScl_1" >1</std:floatval>
      <std:floatval name="NDSepScl_2" >1</std:floatval>
      <std:floatval name="NDSepScl_3" >0</std:floatval>
      <std:floatval name="NDSepPos_1" >0</std:floatval>
      <std:floatval name="NDSepPos_2" >0</std:floatval>
      <std:floatval name="NDSepPos_3" >0</std:floatval>
      <std:floatval name="NDRestY" >0</std:floatval>
      <std:intval name="NDFinZer" >1</std:intval>
      <std:intval name="NDSepNum" >11</std:intval>
      <std:intval name="NDTypFrac" >2</std:intval>
      <std:intval name="NDSepDen" >2</std:intval>
      <std:floatval name="NDOperY" >0.5</std:floatval>
      <std:intval name="NDNulOther" >2</std:intval>
      <std:floatval name="NDResScl" >1</std:floatval>
      <std:intval name="NDFact" >2</std:intval>
      <std:floatval name="NDRestX" >0</std:floatval>
    </std:typeval>
    <std:typeval name="NumericalDisplay">
      <std:strval name="Name" >grade</std:strval>
      <std:intval name="NDType" >2</std:intval>
      <std:intval name="NDUnit" >5</std:intval>
      <std:floatval name="NDGlobFact" >1</std:floatval>
      <std:intval name="NDNulFac_1" >1</std:intval>
      <std:intval name="NDNulFac_2" >2</std:intval>
      <std:intval name="NDNulFac_3" >1</std:intval>
      <std:intval name="NDExise" >1</std:intval>
      <std:intval name="NDSep1000" >0</std:intval>
      <std:floatval name="NDFact_1" >1</std:floatval>
      <std:floatval name="NDFact_2" >0</std:floatval>
      <std:floatval name="NDFact_3" >0</std:floatval>
      <std:floatval name="NDValPos_1" >0</std:floatval>
      <std:floatval name="NDValPos_2" >0</std:floatval>
      <std:floatval name="NDValPos_3" >0</std:floatval>
      <std:strval name="NDSepar_1" ></std:strval>
      <std:strval name="NDSepar_2" ></std:strval>
      <std:strval name="NDSepar_3" ></std:strval>
      <std:floatval name="NDSepScl_1" >1</std:floatval>
      <std:floatval name="NDSepScl_2" >0</std:floatval>
      <std:floatval name="NDSepScl_3" >0</std:floatval>
      <std:floatval name="NDSepPos_1" >0</std:floatval>
      <std:floatval name="NDSepPos_2" >0</std:floatval>
      <std:floatval name="NDSepPos_3" >0</std:floatval>
      <std:floatval name="NDRestY" >0</std:floatval>
      <std:intval name="NDFinZer" >1</std:intval>
      <std:intval name="NDSepNum" >11</std:intval>
      <std:intval name="NDTypFrac" >2</std:intval>
      <std:intval name="NDSepDen" >2</std:intval>
      <std:floatval name="NDOperY" >0.5</std:floatval>
      <std:intval name="NDNulOther" >1</std:intval>
      <std:floatval name="NDResScl" >1</std:floatval>
      <std:intval name="NDFact" >1</std:intval>
      <std:floatval name="NDRestX" >0.5</std:floatval>
    </std:typeval>
  </std:node>
  <std:node name="View">
    <std:node name="Generation">
      <std:node name="ThicknessIndex">
        <std:intval>2</std:intval>
      </std:node>
      <std:node name="MaterialCutPattern">
        <std:enumval name="StandardMaterial">Material</std:enumval>
      </std:node>
    </std:node>
  </std:node>
  <std:node name="Frames">
    <std:typeval name="FrameDef">
      <std:strval name="Name" >Rectangle</std:strval>
      <std:intval name="Type" >1</std:intval>
      <std:intval name="Behavior" >1</std:intval>
      <std:floatval name="Length" >20</std:floatval>
      <std:floatval name="Height" >10</std:floatval>
      <std:floatval name="Radius" >0</std:floatval>
      <std:floatval name="Offset" >0</std:floatval>
      <std:floatval name="VerticalMargin" >0</std:floatval>
      <std:floatval name="HorizontalMargin" >0</std:floatval>
    </std:typeval>
    <std:typeval name="FrameDef">
      <std:strval name="Name" >Square</std:strval>
      <std:intval name="Type" >2</std:intval>
      <std:intval name="Behavior" >1</std:intval>
      <std:floatval name="Length" >20</std:floatval>
    </std:typeval>
    <std:typeval name="FrameDef">
      <std:strval name="Name" >Circle</std:strval>
      <std:intval name="Type" >3</std:intval>
      <std:intval name="Behavior" >1</std:intval>
      <std:floatval name="Radius" >10</std:floatval>
    </std:typeval>
    <std:typeval name="FrameDef">
      <std:strval name="Name" >ScoredCircle</std:strval>
      <std:intval name="Type" >4</std:intval>
      <std:intval name="Behavior" >1</std:intval>
      <std:floatval name="Radius" >10</std:floatval>
    </std:typeval>
    <std:typeval name="FrameDef">
      <std:strval name="Name" >Diamond</std:strval>
      <std:intval name="Type" >5</std:intval>
      <std:intval name="Behavior" >1</std:intval>
      <std:floatval name="Length" >20</std:floatval>
    </std:typeval>
    <std:typeval name="FrameDef">
      <std:strval name="Name" >Triangle</std:strval>
      <std:intval name="Type" >6</std:intval>
      <std:intval name="Behavior" >1</std:intval>
      <std:floatval name="Length" >30</std:floatval>
      <std:floatval name="Height" >25</std:floatval>
    </std:typeval>
    <std:typeval name="FrameDef">
      <std:strval name="Name" >RightFlag</std:strval>
      <std:intval name="Type" >7</std:intval>
      <std:intval name="Behavior" >1</std:intval>
      <std:floatval name="Length" >20</std:floatval>
      <std:floatval name="Height" >10</std:floatval>
      <std:floatval name="Offset" >5</std:floatval>
    </std:typeval>
    <std:typeval name="FrameDef">
      <std:strval name="Name" >LeftFlag</std:strval>
      <std:intval name="Type" >8</std:intval>
      <std:intval name="Behavior" >1</std:intval>
      <std:floatval name="Length" >20</std:floatval>
      <std:floatval name="Height" >10</std:floatval>
      <std:floatval name="Offset" >5</std:floatval>
    </std:typeval>
    <std:typeval name="FrameDef">
      <std:strval name="Name" >BothFlag</std:strval>
      <std:intval name="Type" >9</std:intval>
      <std:intval name="Behavior" >1</std:intval>
      <std:floatval name="Length" >20</std:floatval>
      <std:floatval name="Height" >10</std:floatval>
      <std:floatval name="Offset" >5</std:floatval>
    </std:typeval>
    <std:typeval name="FrameDef">
      <std:strval name="Name" >Oblong</std:strval>
      <std:intval name="Type" >10</std:intval>
      <std:intval name="Behavior" >1</std:intval>
      <std:floatval name="Length" >20</std:floatval>
      <std:floatval name="Height" >10</std:floatval>
    </std:typeval>
    <std:typeval name="FrameDef">
      <std:strval name="Name" >Ellipse</std:strval>
      <std:intval name="Type" >11</std:intval>
      <std:intval name="Behavior" >1</std:intval>
      <std:floatval name="Length" >20</std:floatval>
      <std:floatval name="Height" >10</std:floatval>
    </std:typeval>
    <std:typeval name="FrameDef">
      <std:strval name="Name" >RightOblong</std:strval>
      <std:intval name="Type" >12</std:intval>
      <std:intval name="Behavior" >1</std:intval>
      <std:floatval name="Length" >20</std:floatval>
      <std:floatval name="Height" >10</std:floatval>
    </std:typeval>
    <std:typeval name="FrameDef">
      <std:strval name="Name" >LeftOblong</std:strval>
      <std:intval name="Type" >13</std:intval>
      <std:intval name="Behavior" >1</std:intval>
      <std:floatval name="Length" >20</std:floatval>
      <std:floatval name="Height" >10</std:floatval>
    </std:typeval>
    <std:typeval name="FrameDef">
      <std:strval name="Name" >Sticking</std:strval>
      <std:intval name="Type" >14</std:intval>
      <std:intval name="Behavior" >1</std:intval>
      <std:floatval name="Radius" >10</std:floatval>
    </std:typeval>
    <std:typeval name="FrameDef">
      <std:strval name="Name" >Set</std:strval>
      <std:intval name="Type" >15</std:intval>
      <std:intval name="Behavior" >1</std:intval>
      <std:floatval name="Radius" >10</std:floatval>
      <std:floatval name="Offset" >2</std:floatval>
    </std:typeval>
    <std:typeval name="FrameDef">
      <std:strval name="Name" >FixedSupport</std:strval>
      <std:intval name="Type" >16</std:intval>
      <std:intval name="Behavior" >1</std:intval>
      <std:floatval name="Radius" >20</std:floatval>
    </std:typeval>
    <std:typeval name="FrameDef">
      <std:strval name="Name" >Nota</std:strval>
      <std:intval name="Type" >17</std:intval>
      <std:intval name="Behavior" >1</std:intval>
      <std:floatval name="Length" >30</std:floatval>
      <std:floatval name="Height" >10</std:floatval>
    </std:typeval>
    <std:typeval name="FrameDef">
      <std:strval name="Name" >SymPart</std:strval>
      <std:intval name="Type" >18</std:intval>
      <std:intval name="Behavior" >1</std:intval>
      <std:floatval name="Radius" >10</std:floatval>
    </std:typeval>
    <std:typeval name="FrameDef">
      <std:strval name="Name" >SymSet</std:strval>
      <std:intval name="Type" >19</std:intval>
      <std:intval name="Behavior" >1</std:intval>
      <std:floatval name="Radius" >10</std:floatval>
      <std:floatval name="Offset" >2</std:floatval>
    </std:typeval>
    <std:typeval name="FrameDef">
      <std:strval name="Name" >ScoredRectangle</std:strval>
      <std:intval name="Type" >20</std:intval>
      <std:intval name="Behavior" >1</std:intval>
      <std:floatval name="Length" >20</std:floatval>
      <std:floatval name="Height" >15</std:floatval>
    </std:typeval>
    <std:typeval name="FrameDef">
      <std:strval name="Name" >Parallelogram</std:strval>
      <std:intval name="Type" >21</std:intval>
      <std:intval name="Behavior" >1</std:intval>
      <std:floatval name="Length" >15</std:floatval>
      <std:floatval name="Offset" >5</std:floatval>
      <std:floatval name="Height" >15</std:floatval>
    </std:typeval>
  </std:node>
  <std:node name="LineThickness">
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >1</std:intval>
      <std:intval name="Pixel" >1</std:intval>
      <std:floatval name="mm" >0.13</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >1</std:intval>
      <std:intval name="Pixel" >3</std:intval>
      <std:floatval name="mm" >0.5</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >1</std:intval>
      <std:intval name="Pixel" >4</std:intval>
      <std:floatval name="mm" >1</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >1</std:intval>
      <std:intval name="Pixel" >5</std:intval>
      <std:floatval name="mm" >1.4</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >1</std:intval>
      <std:intval name="Pixel" >7</std:intval>
      <std:floatval name="mm" >2</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >0</std:intval>
      <std:intval name="Pixel" >7</std:intval>
      <std:floatval name="mm" >2</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >0</std:intval>
      <std:intval name="Pixel" >7</std:intval>
      <std:floatval name="mm" >2.3</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >0</std:intval>
      <std:intval name="Pixel" >8</std:intval>
      <std:floatval name="mm" >2.6</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >1</std:intval>
      <std:intval name="Pixel" >3</std:intval>
      <std:floatval name="mm" >0.5</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >0</std:intval>
      <std:intval name="Pixel" >1</std:intval>
      <std:floatval name="mm" >0.13</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >0</std:intval>
      <std:intval name="Pixel" >1</std:intval>
      <std:floatval name="mm" >0.13</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >0</std:intval>
      <std:intval name="Pixel" >1</std:intval>
      <std:floatval name="mm" >0.13</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >0</std:intval>
      <std:intval name="Pixel" >1</std:intval>
      <std:floatval name="mm" >0.13</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >0</std:intval>
      <std:intval name="Pixel" >1</std:intval>
      <std:floatval name="mm" >0.13</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >0</std:intval>
      <std:intval name="Pixel" >1</std:intval>
      <std:floatval name="mm" >0.13</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >0</std:intval>
      <std:intval name="Pixel" >1</std:intval>
      <std:floatval name="mm" >0.13</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >0</std:intval>
      <std:intval name="Pixel" >1</std:intval>
      <std:floatval name="mm" >0.13</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >0</std:intval>
      <std:intval name="Pixel" >1</std:intval>
      <std:floatval name="mm" >0.13</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >0</std:intval>
      <std:intval name="Pixel" >1</std:intval>
      <std:floatval name="mm" >0.13</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >0</std:intval>
      <std:intval name="Pixel" >1</std:intval>
      <std:floatval name="mm" >0.13</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >0</std:intval>
      <std:intval name="Pixel" >1</std:intval>
      <std:floatval name="mm" >0.13</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >0</std:intval>
      <std:intval name="Pixel" >1</std:intval>
      <std:floatval name="mm" >0.13</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >0</std:intval>
      <std:intval name="Pixel" >1</std:intval>
      <std:floatval name="mm" >0.13</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >0</std:intval>
      <std:intval name="Pixel" >1</std:intval>
      <std:floatval name="mm" >0.13</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >0</std:intval>
      <std:intval name="Pixel" >1</std:intval>
      <std:floatval name="mm" >0.13</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >0</std:intval>
      <std:intval name="Pixel" >1</std:intval>
      <std:floatval name="mm" >0.13</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >0</std:intval>
      <std:intval name="Pixel" >1</std:intval>
      <std:floatval name="mm" >0.13</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >0</std:intval>
      <std:intval name="Pixel" >1</std:intval>
      <std:floatval name="mm" >0.13</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >0</std:intval>
      <std:intval name="Pixel" >1</std:intval>
      <std:floatval name="mm" >0.13</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >0</std:intval>
      <std:intval name="Pixel" >1</std:intval>
      <std:floatval name="mm" >0.13</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >0</std:intval>
      <std:intval name="Pixel" >1</std:intval>
      <std:floatval name="mm" >0.13</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >0</std:intval>
      <std:intval name="Pixel" >1</std:intval>
      <std:floatval name="mm" >0.13</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >0</std:intval>
      <std:intval name="Pixel" >1</std:intval>
      <std:floatval name="mm" >0.13</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >0</std:intval>
      <std:intval name="Pixel" >1</std:intval>
      <std:floatval name="mm" >0.13</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >0</std:intval>
      <std:intval name="Pixel" >1</std:intval>
      <std:floatval name="mm" >0.13</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >0</std:intval>
      <std:intval name="Pixel" >1</std:intval>
      <std:floatval name="mm" >0.13</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >0</std:intval>
      <std:intval name="Pixel" >1</std:intval>
      <std:floatval name="mm" >0.13</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >0</std:intval>
      <std:intval name="Pixel" >1</std:intval>
      <std:floatval name="mm" >0.13</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >0</std:intval>
      <std:intval name="Pixel" >1</std:intval>
      <std:floatval name="mm" >0.13</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >0</std:intval>
      <std:intval name="Pixel" >1</std:intval>
      <std:floatval name="mm" >0.13</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >0</std:intval>
      <std:intval name="Pixel" >1</std:intval>
      <std:floatval name="mm" >0.13</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >0</std:intval>
      <std:intval name="Pixel" >1</std:intval>
      <std:floatval name="mm" >0.13</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >0</std:intval>
      <std:intval name="Pixel" >1</std:intval>
      <std:floatval name="mm" >0.13</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >0</std:intval>
      <std:intval name="Pixel" >1</std:intval>
      <std:floatval name="mm" >0.13</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >0</std:intval>
      <std:intval name="Pixel" >1</std:intval>
      <std:floatval name="mm" >0.13</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >0</std:intval>
      <std:intval name="Pixel" >1</std:intval>
      <std:floatval name="mm" >0.13</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >0</std:intval>
      <std:intval name="Pixel" >1</std:intval>
      <std:floatval name="mm" >0.13</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >0</std:intval>
      <std:intval name="Pixel" >1</std:intval>
      <std:floatval name="mm" >0.13</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >0</std:intval>
      <std:intval name="Pixel" >1</std:intval>
      <std:floatval name="mm" >0.13</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >0</std:intval>
      <std:intval name="Pixel" >1</std:intval>
      <std:floatval name="mm" >0.13</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >0</std:intval>
      <std:intval name="Pixel" >1</std:intval>
      <std:floatval name="mm" >0.13</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >0</std:intval>
      <std:intval name="Pixel" >1</std:intval>
      <std:floatval name="mm" >0.13</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >0</std:intval>
      <std:intval name="Pixel" >1</std:intval>
      <std:floatval name="mm" >0.13</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >0</std:intval>
      <std:intval name="Pixel" >1</std:intval>
      <std:floatval name="mm" >0.13</std:floatval>
    </std:typeval>
    <std:typeval name="CATThickness">
      <std:intval name="Availability" >0</std:intval>
      <std:intval name="Pixel" >1</std:intval>
      <std:floatval name="mm" >0.13</std:floatval>
    </std:typeval>
  </std:node>
  <std:node name="Patterns">
    <std:node name="EditAvailability">
      <std:enumval name="YesNo">Yes</std:enumval>
    </std:node>
    <std:node name="AngleList">
      <std:typeval name="AngleValue">
        <std:floatval name="Angle" >45</std:floatval>
      </std:typeval>
      <std:typeval name="AngleValue">
        <std:floatval name="Angle" >-45</std:floatval>
      </std:typeval>
      <std:typeval name="AngleValue">
        <std:floatval name="Angle" >60</std:floatval>
      </std:typeval>
      <std:typeval name="AngleValue">
        <std:floatval name="Angle" >-60</std:floatval>
      </std:typeval>
      <std:typeval name="AngleValue">
        <std:floatval name="Angle" >30</std:floatval>
      </std:typeval>
      <std:typeval name="AngleValue">
        <std:floatval name="Angle" >-30</std:floatval>
      </std:typeval>
    </std:node>
    <std:node name="hatching">
      <std:typeval name="hatchings">
        <std:strval name="Name" >Stell 1</std:strval>
        <std:intval name="nb hatch" >1</std:intval>
        <std:floatval name="angle1" >45</std:floatval>
        <std:floatval name="offset1" >0</std:floatval>
        <std:floatval name="pitch1" >1</std:floatval>
        <std:intval name="linetype1" >1</std:intval>
        <std:intval name="color1" >255</std:intval>
        <std:intval name="thickness1" >1</std:intval>
        <std:floatval name="angle2" >60</std:floatval>
        <std:floatval name="offset2" >2</std:floatval>
        <std:floatval name="pitch2" >10</std:floatval>
        <std:intval name="linetype2" >1</std:intval>
        <std:intval name="color2" >255</std:intval>
        <std:intval name="thickness2" >1</std:intval>
        <std:floatval name="angle3" >60</std:floatval>
        <std:floatval name="offset3" >2</std:floatval>
        <std:floatval name="pitch3" >10</std:floatval>
        <std:intval name="linetype3" >1</std:intval>
        <std:intval name="color3" >255</std:intval>
        <std:intval name="thickness3" >1</std:intval>
        <std:floatval name="angle4" >60</std:floatval>
        <std:floatval name="offset4" >2</std:floatval>
        <std:floatval name="pitch4" >10</std:floatval>
        <std:intval name="linetype4" >1</std:intval>
        <std:intval name="color4" >255</std:intval>
        <std:intval name="thickness4" >1</std:intval>
        <std:floatval name="angle5" >60</std:floatval>
        <std:floatval name="offset5" >2</std:floatval>
        <std:floatval name="pitch5" >10</std:floatval>
        <std:intval name="linetype5" >1</std:intval>
        <std:intval name="color5" >255</std:intval>
        <std:intval name="thickness5" >1</std:intval>
        <std:floatval name="angle6" >60</std:floatval>
        <std:floatval name="offset6" >2</std:floatval>
        <std:floatval name="pitch6" >10</std:floatval>
        <std:intval name="linetype6" >1</std:intval>
        <std:intval name="color6" >255</std:intval>
        <std:intval name="thickness6" >1</std:intval>
        <std:floatval name="angle7" >60</std:floatval>
        <std:floatval name="offset7" >2</std:floatval>
        <std:floatval name="pitch7" >10</std:floatval>
        <std:intval name="linetype7" >1</std:intval>
        <std:intval name="color7" >255</std:intval>
        <std:intval name="thickness7" >1</std:intval>
        <std:floatval name="angle8" >60</std:floatval>
        <std:floatval name="offset8" >2</std:floatval>
        <std:floatval name="pitch8" >10</std:floatval>
        <std:intval name="linetype8" >1</std:intval>
        <std:intval name="color8" >255</std:intval>
        <std:intval name="thickness8" >1</std:intval>
        <std:floatval name="angle9" >60</std:floatval>
        <std:floatval name="offset9" >2</std:floatval>
        <std:floatval name="pitch9" >10</std:floatval>
        <std:intval name="linetype9" >1</std:intval>
        <std:intval name="color9" >255</std:intval>
        <std:intval name="thickness9" >1</std:intval>
        <std:floatval name="angle10" >60</std:floatval>
        <std:floatval name="offset10" >2</std:floatval>
        <std:floatval name="pitch10" >10</std:floatval>
        <std:intval name="linetype10" >1</std:intval>
        <std:intval name="color10" >255</std:intval>
        <std:intval name="thickness10" >1</std:intval>
      </std:typeval>
      <std:typeval name="hatchings">
        <std:strval name="Name" >Stell 2</std:strval>
        <std:intval name="nb hatch" >1</std:intval>
        <std:floatval name="angle1" >45</std:floatval>
        <std:floatval name="offset1" >0</std:floatval>
        <std:floatval name="pitch1" >2</std:floatval>
        <std:intval name="linetype1" >1</std:intval>
        <std:intval name="color1" >255</std:intval>
        <std:intval name="thickness1" >1</std:intval>
        <std:floatval name="angle2" >60</std:floatval>
        <std:floatval name="offset2" >2</std:floatval>
        <std:floatval name="pitch2" >10</std:floatval>
        <std:intval name="linetype2" >1</std:intval>
        <std:intval name="color2" >255</std:intval>
        <std:intval name="thickness2" >1</std:intval>
        <std:floatval name="angle3" >60</std:floatval>
        <std:floatval name="offset3" >2</std:floatval>
        <std:floatval name="pitch3" >10</std:floatval>
        <std:intval name="linetype3" >1</std:intval>
        <std:intval name="color3" >255</std:intval>
        <std:intval name="thickness3" >1</std:intval>
        <std:floatval name="angle4" >60</std:floatval>
        <std:floatval name="offset4" >2</std:floatval>
        <std:floatval name="pitch4" >10</std:floatval>
        <std:intval name="linetype4" >1</std:intval>
        <std:intval name="color4" >255</std:intval>
        <std:intval name="thickness4" >1</std:intval>
        <std:floatval name="angle5" >60</std:floatval>
        <std:floatval name="offset5" >2</std:floatval>
        <std:floatval name="pitch5" >10</std:floatval>
        <std:intval name="linetype5" >1</std:intval>
        <std:intval name="color5" >255</std:intval>
        <std:intval name="thickness5" >1</std:intval>
        <std:floatval name="angle6" >60</std:floatval>
        <std:floatval name="offset6" >2</std:floatval>
        <std:floatval name="pitch6" >10</std:floatval>
        <std:intval name="linetype6" >1</std:intval>
        <std:intval name="color6" >255</std:intval>
        <std:intval name="thickness6" >1</std:intval>
        <std:floatval name="angle7" >60</std:floatval>
        <std:floatval name="offset7" >2</std:floatval>
        <std:floatval name="pitch7" >10</std:floatval>
        <std:intval name="linetype7" >1</std:intval>
        <std:intval name="color7" >255</std:intval>
        <std:intval name="thickness7" >1</std:intval>
        <std:floatval name="angle8" >60</std:floatval>
        <std:floatval name="offset8" >2</std:floatval>
        <std:floatval name="pitch8" >10</std:floatval>
        <std:intval name="linetype8" >1</std:intval>
        <std:intval name="color8" >255</std:intval>
        <std:intval name="thickness8" >1</std:intval>
        <std:floatval name="angle9" >60</std:floatval>
        <std:floatval name="offset9" >2</std:floatval>
        <std:floatval name="pitch9" >10</std:floatval>
        <std:intval name="linetype9" >1</std:intval>
        <std:intval name="color9" >255</std:intval>
        <std:intval name="thickness9" >1</std:intval>
        <std:floatval name="angle10" >60</std:floatval>
        <std:floatval name="offset10" >2</std:floatval>
        <std:floatval name="pitch10" >10</std:floatval>
        <std:intval name="linetype10" >1</std:intval>
        <std:intval name="color10" >255</std:intval>
        <std:intval name="thickness10" >1</std:intval>
      </std:typeval>
      <std:typeval name="hatchings">
        <std:strval name="Name" >Stell 3</std:strval>
        <std:intval name="nb hatch" >1</std:intval>
        <std:floatval name="angle1" >45</std:floatval>
        <std:floatval name="offset1" >0</std:floatval>
        <std:floatval name="pitch1" >3</std:floatval>
        <std:intval name="linetype1" >1</std:intval>
        <std:intval name="color1" >255</std:intval>
        <std:intval name="thickness1" >1</std:intval>
        <std:floatval name="angle2" >60</std:floatval>
        <std:floatval name="offset2" >2</std:floatval>
        <std:floatval name="pitch2" >10</std:floatval>
        <std:intval name="linetype2" >1</std:intval>
        <std:intval name="color2" >255</std:intval>
        <std:intval name="thickness2" >1</std:intval>
        <std:floatval name="angle3" >60</std:floatval>
        <std:floatval name="offset3" >2</std:floatval>
        <std:floatval name="pitch3" >10</std:floatval>
        <std:intval name="linetype3" >1</std:intval>
        <std:intval name="color3" >255</std:intval>
        <std:intval name="thickness3" >1</std:intval>
        <std:floatval name="angle4" >60</std:floatval>
        <std:floatval name="offset4" >2</std:floatval>
        <std:floatval name="pitch4" >10</std:floatval>
        <std:intval name="linetype4" >1</std:intval>
        <std:intval name="color4" >255</std:intval>
        <std:intval name="thickness4" >1</std:intval>
        <std:floatval name="angle5" >60</std:floatval>
        <std:floatval name="offset5" >2</std:floatval>
        <std:floatval name="pitch5" >10</std:floatval>
        <std:intval name="linetype5" >1</std:intval>
        <std:intval name="color5" >255</std:intval>
        <std:intval name="thickness5" >1</std:intval>
        <std:floatval name="angle6" >60</std:floatval>
        <std:floatval name="offset6" >2</std:floatval>
        <std:floatval name="pitch6" >10</std:floatval>
        <std:intval name="linetype6" >1</std:intval>
        <std:intval name="color6" >255</std:intval>
        <std:intval name="thickness6" >1</std:intval>
        <std:floatval name="angle7" >60</std:floatval>
        <std:floatval name="offset7" >2</std:floatval>
        <std:floatval name="pitch7" >10</std:floatval>
        <std:intval name="linetype7" >1</std:intval>
        <std:intval name="color7" >255</std:intval>
        <std:intval name="thickness7" >1</std:intval>
        <std:floatval name="angle8" >60</std:floatval>
        <std:floatval name="offset8" >2</std:floatval>
        <std:floatval name="pitch8" >10</std:floatval>
        <std:intval name="linetype8" >1</std:intval>
        <std:intval name="color8" >255</std:intval>
        <std:intval name="thickness8" >1</std:intval>
        <std:floatval name="angle9" >60</std:floatval>
        <std:floatval name="offset9" >2</std:floatval>
        <std:floatval name="pitch9" >10</std:floatval>
        <std:intval name="linetype9" >1</std:intval>
        <std:intval name="color9" >255</std:intval>
        <std:intval name="thickness9" >1</std:intval>
        <std:floatval name="angle10" >60</std:floatval>
        <std:floatval name="offset10" >2</std:floatval>
        <std:floatval name="pitch10" >10</std:floatval>
        <std:intval name="linetype10" >1</std:intval>
        <std:intval name="color10" >255</std:intval>
        <std:intval name="thickness10" >1</std:intval>
      </std:typeval>
      <std:typeval name="hatchings">
        <std:strval name="Name" >Stell 4</std:strval>
        <std:intval name="nb hatch" >1</std:intval>
        <std:floatval name="angle1" >45</std:floatval>
        <std:floatval name="offset1" >0</std:floatval>
        <std:floatval name="pitch1" >4</std:floatval>
        <std:intval name="linetype1" >1</std:intval>
        <std:intval name="color1" >255</std:intval>
        <std:intval name="thickness1" >1</std:intval>
        <std:floatval name="angle2" >60</std:floatval>
        <std:floatval name="offset2" >2</std:floatval>
        <std:floatval name="pitch2" >10</std:floatval>
        <std:intval name="linetype2" >1</std:intval>
        <std:intval name="color2" >255</std:intval>
        <std:intval name="thickness2" >1</std:intval>
        <std:floatval name="angle3" >60</std:floatval>
        <std:floatval name="offset3" >2</std:floatval>
        <std:floatval name="pitch3" >10</std:floatval>
        <std:intval name="linetype3" >1</std:intval>
        <std:intval name="color3" >255</std:intval>
        <std:intval name="thickness3" >1</std:intval>
        <std:floatval name="angle4" >60</std:floatval>
        <std:floatval name="offset4" >2</std:floatval>
        <std:floatval name="pitch4" >10</std:floatval>
        <std:intval name="linetype4" >1</std:intval>
        <std:intval name="color4" >255</std:intval>
        <std:intval name="thickness4" >1</std:intval>
        <std:floatval name="angle5" >60</std:floatval>
        <std:floatval name="offset5" >2</std:floatval>
        <std:floatval name="pitch5" >10</std:floatval>
        <std:intval name="linetype5" >1</std:intval>
        <std:intval name="color5" >255</std:intval>
        <std:intval name="thickness5" >1</std:intval>
        <std:floatval name="angle6" >60</std:floatval>
        <std:floatval name="offset6" >2</std:floatval>
        <std:floatval name="pitch6" >10</std:floatval>
        <std:intval name="linetype6" >1</std:intval>
        <std:intval name="color6" >255</std:intval>
        <std:intval name="thickness6" >1</std:intval>
        <std:floatval name="angle7" >60</std:floatval>
        <std:floatval name="offset7" >2</std:floatval>
        <std:floatval name="pitch7" >10</std:floatval>
        <std:intval name="linetype7" >1</std:intval>
        <std:intval name="color7" >255</std:intval>
        <std:intval name="thickness7" >1</std:intval>
        <std:floatval name="angle8" >60</std:floatval>
        <std:floatval name="offset8" >2</std:floatval>
        <std:floatval name="pitch8" >10</std:floatval>
        <std:intval name="linetype8" >1</std:intval>
        <std:intval name="color8" >255</std:intval>
        <std:intval name="thickness8" >1</std:intval>
        <std:floatval name="angle9" >60</std:floatval>
        <std:floatval name="offset9" >2</std:floatval>
        <std:floatval name="pitch9" >10</std:floatval>
        <std:intval name="linetype9" >1</std:intval>
        <std:intval name="color9" >255</std:intval>
        <std:intval name="thickness9" >1</std:intval>
        <std:floatval name="angle10" >60</std:floatval>
        <std:floatval name="offset10" >2</std:floatval>
        <std:floatval name="pitch10" >10</std:floatval>
        <std:intval name="linetype10" >1</std:intval>
        <std:intval name="color10" >255</std:intval>
        <std:intval name="thickness10" >1</std:intval>
      </std:typeval>
      <std:typeval name="hatchings">
        <std:strval name="Name" >Stell 5</std:strval>
        <std:intval name="nb hatch" >1</std:intval>
        <std:floatval name="angle1" >45</std:floatval>
        <std:floatval name="offset1" >0</std:floatval>
        <std:floatval name="pitch1" >5</std:floatval>
        <std:intval name="linetype1" >1</std:intval>
        <std:intval name="color1" >255</std:intval>
        <std:intval name="thickness1" >1</std:intval>
        <std:floatval name="angle2" >60</std:floatval>
        <std:floatval name="offset2" >2</std:floatval>
        <std:floatval name="pitch2" >10</std:floatval>
        <std:intval name="linetype2" >1</std:intval>
        <std:intval name="color2" >255</std:intval>
        <std:intval name="thickness2" >1</std:intval>
        <std:floatval name="angle3" >60</std:floatval>
        <std:floatval name="offset3" >2</std:floatval>
        <std:floatval name="pitch3" >10</std:floatval>
        <std:intval name="linetype3" >1</std:intval>
        <std:intval name="color3" >255</std:intval>
        <std:intval name="thickness3" >1</std:intval>
        <std:floatval name="angle4" >60</std:floatval>
        <std:floatval name="offset4" >2</std:floatval>
        <std:floatval name="pitch4" >10</std:floatval>
        <std:intval name="linetype4" >1</std:intval>
        <std:intval name="color4" >255</std:intval>
        <std:intval name="thickness4" >1</std:intval>
        <std:floatval name="angle5" >60</std:floatval>
        <std:floatval name="offset5" >2</std:floatval>
        <std:floatval name="pitch5" >10</std:floatval>
        <std:intval name="linetype5" >1</std:intval>
        <std:intval name="color5" >255</std:intval>
        <std:intval name="thickness5" >1</std:intval>
        <std:floatval name="angle6" >60</std:floatval>
        <std:floatval name="offset6" >2</std:floatval>
        <std:floatval name="pitch6" >10</std:floatval>
        <std:intval name="linetype6" >1</std:intval>
        <std:intval name="color6" >255</std:intval>
        <std:intval name="thickness6" >1</std:intval>
        <std:floatval name="angle7" >60</std:floatval>
        <std:floatval name="offset7" >2</std:floatval>
        <std:floatval name="pitch7" >10</std:floatval>
        <std:intval name="linetype7" >1</std:intval>
        <std:intval name="color7" >255</std:intval>
        <std:intval name="thickness7" >1</std:intval>
        <std:floatval name="angle8" >60</std:floatval>
        <std:floatval name="offset8" >2</std:floatval>
        <std:floatval name="pitch8" >10</std:floatval>
        <std:intval name="linetype8" >1</std:intval>
        <std:intval name="color8" >255</std:intval>
        <std:intval name="thickness8" >1</std:intval>
        <std:floatval name="angle9" >60</std:floatval>
        <std:floatval name="offset9" >2</std:floatval>
        <std:floatval name="pitch9" >10</std:floatval>
        <std:intval name="linetype9" >1</std:intval>
        <std:intval name="color9" >255</std:intval>
        <std:intval name="thickness9" >1</std:intval>
        <std:floatval name="angle10" >60</std:floatval>
        <std:floatval name="offset10" >2</std:floatval>
        <std:floatval name="pitch10" >10</std:floatval>
        <std:intval name="linetype10" >1</std:intval>
        <std:intval name="color10" >255</std:intval>
        <std:intval name="thickness10" >1</std:intval>
      </std:typeval>
    </std:node>
    <std:node name="dotting">
      <std:typeval name="dottings">
        <std:strval name="Name" >dot1</std:strval>
        <std:intval name="zig-zag" >0</std:intval>
      </std:typeval>
      <std:typeval name="dottings">
        <std:strval name="Name" >dot2</std:strval>
        <std:intval name="zig-zag" >1</std:intval>
      </std:typeval>
      <std:typeval name="dottings">
        <std:strval name="Name" >dot3</std:strval>
        <std:intval name="zig-zag" >0</std:intval>
        <std:floatval name="pitch" >5</std:floatval>
      </std:typeval>
      <std:typeval name="dottings">
        <std:strval name="Name" >dot4</std:strval>
        <std:intval name="zig-zag" >1</std:intval>
        <std:floatval name="pitch" >5</std:floatval>
      </std:typeval>
      <std:typeval name="dottings">
        <std:strval name="Name" >dot5 green</std:strval>
        <std:intval name="zig-zag" >0</std:intval>
        <std:intval name="color" >16711935</std:intval>
      </std:typeval>
      <std:typeval name="dottings">
        <std:strval name="Name" >dot6 green</std:strval>
        <std:intval name="zig-zag" >1</std:intval>
        <std:intval name="color" >16711935</std:intval>
      </std:typeval>
      <std:typeval name="dottings">
        <std:strval name="Name" >dot7 green</std:strval>
        <std:intval name="zig-zag" >0</std:intval>
        <std:floatval name="pitch" >5</std:floatval>
        <std:intval name="color" >16711935</std:intval>
      </std:typeval>
      <std:typeval name="dottings">
        <std:strval name="Name" >dot8 green</std:strval>
        <std:intval name="zig-zag" >1</std:intval>
        <std:floatval name="pitch" >5</std:floatval>
        <std:intval name="color" >16711935</std:intval>
      </std:typeval>
    </std:node>
    <std:node name="coloring">
      <std:typeval name="colorings">
        <std:strval name="Name" >white</std:strval>
      </std:typeval>
      <std:typeval name="colorings">
        <std:strval name="Name" >gray 25%</std:strval>
        <std:intval name="color" >-1111638529</std:intval>
      </std:typeval>
      <std:typeval name="colorings">
        <std:strval name="Name" >gray 50%</std:strval>
        <std:intval name="color" >2139062271</std:intval>
      </std:typeval>
      <std:typeval name="colorings">
        <std:strval name="Name" >gray 75%</std:strval>
        <std:intval name="color" >1061109759</std:intval>
      </std:typeval>
      <std:typeval name="colorings">
        <std:strval name="Name" >black</std:strval>
        <std:intval name="color" >255</std:intval>
      </std:typeval>
      <std:typeval name="colorings">
        <std:strval name="Name" >blue</std:strval>
        <std:intval name="color" >65535</std:intval>
      </std:typeval>
      <std:typeval name="colorings">
        <std:strval name="Name" >green</std:strval>
        <std:intval name="color" >16711935</std:intval>
      </std:typeval>
      <std:typeval name="colorings">
        <std:strval name="Name" >red</std:strval>
        <std:intval name="color" >-16776961</std:intval>
      </std:typeval>
      <std:typeval name="colorings">
        <std:strval name="Name" >color 1</std:strval>
        <std:intval name="color" >-65281</std:intval>
      </std:typeval>
      <std:typeval name="colorings">
        <std:strval name="Name" >color 2</std:strval>
        <std:intval name="color" >16777215</std:intval>
      </std:typeval>
      <std:typeval name="colorings">
        <std:strval name="Name" >color 3</std:strval>
        <std:intval name="color" >-16711681</std:intval>
      </std:typeval>
    </std:node>
    <std:node name="motif">
      <std:typeval name="motifs">
        <std:strval name="Name" >DrwPatternMotifDS1</std:strval>
        <std:strval name="File name" >DrwPatternMotifDS1.bmp</std:strval>
      </std:typeval>
      <std:typeval name="motifs">
        <std:strval name="Name" >DrwPatternMotifBrick1</std:strval>
        <std:strval name="File name" >DrwPatternMotifBrick1.bmp</std:strval>
      </std:typeval>
      <std:typeval name="motifs">
        <std:strval name="Name" >DrwPatternMotifFloor1</std:strval>
        <std:strval name="File name" >DrwPatternMotifFloor1.bmp</std:strval>
      </std:typeval>
      <std:typeval name="motifs">
        <std:strval name="Name" >DrwPatternMotifConcret1</std:strval>
        <std:strval name="File name" >DrwPatternMotifConcret1.bmp</std:strval>
      </std:typeval>
      <std:typeval name="motifs">
        <std:strval name="Name" >DrwPatternMotifOctagons1</std:strval>
        <std:strval name="File name" >DrwPatternMotifOctagons1.bmp</std:strval>
      </std:typeval>
      <std:typeval name="motifs">
        <std:strval name="Name" >DrwPatternMotifLath1</std:strval>
        <std:strval name="File name" >DrwPatternMotifLath1.bmp</std:strval>
      </std:typeval>
      <std:typeval name="motifs">
        <std:strval name="Name" >DrwPatternMotifwood1</std:strval>
        <std:strval name="File name" >DrwPatternMotifwood1.bmp</std:strval>
      </std:typeval>
    </std:node>
  </std:node>
  <std:node name="LineTypes">
    <std:node name="LineType1">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>65535</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Segment">
        <std:floatval>0</std:floatval>
      </std:node>
    </std:node>
    <std:node name="LineType2">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>13107</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>4</std:intval>
      </std:node>
      <std:node name="Segment">
        <std:floatval>1</std:floatval>
        <std:floatval>-1</std:floatval>
      </std:node>
    </std:node>
    <std:node name="LineType3">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>30583</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>4</std:intval>
      </std:node>
      <std:node name="Segment">
        <std:floatval>4</std:floatval>
        <std:floatval>-1.5</std:floatval>
      </std:node>
    </std:node>
    <std:node name="LineType4">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>3135</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>2</std:intval>
      </std:node>
      <std:node name="Segment">
        <std:floatval>7</std:floatval>
        <std:floatval>-1</std:floatval>
        <std:floatval>1</std:floatval>
        <std:floatval>-1</std:floatval>
      </std:node>
    </std:node>
    <std:node name="LineType5">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>22359</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>8</std:intval>
      </std:node>
      <std:node name="Segment">
        <std:floatval>7</std:floatval>
        <std:floatval>-1</std:floatval>
        <std:floatval>1</std:floatval>
        <std:floatval>-1</std:floatval>
        <std:floatval>1</std:floatval>
        <std:floatval>-1</std:floatval>
      </std:node>
    </std:node>
    <std:node name="LineType6">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>52428</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Segment">
        <std:floatval>0.5</std:floatval>
        <std:floatval>-0.5</std:floatval>
      </std:node>
    </std:node>
    <std:node name="LineType7">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>32763</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>4</std:intval>
      </std:node>
      <std:node name="Segment">
        <std:floatval>2</std:floatval>
        <std:floatval>-1</std:floatval>
        <std:floatval>10</std:floatval>
        <std:floatval>-1</std:floatval>
      </std:node>
    </std:node>
    <std:node name="LineType8">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>65535</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Segment">
      </std:node>
    </std:node>
    <std:node name="LineType9">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>2</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>70</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>1</std:intval>
      </std:node>
    </std:node>
    <std:node name="LineType10">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>2</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>71</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>1</std:intval>
      </std:node>
    </std:node>
    <std:node name="LineType11">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>2</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>72</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>1</std:intval>
      </std:node>
    </std:node>
    <std:node name="LineType12">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>2</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>73</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>1</std:intval>
      </std:node>
    </std:node>
    <std:node name="LineType13">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>2</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>74</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>1</std:intval>
      </std:node>
    </std:node>
    <std:node name="LineType14">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>2</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>83</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>1</std:intval>
      </std:node>
    </std:node>
    <std:node name="LineType15">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>2</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>84</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>1</std:intval>
      </std:node>
    </std:node>
    <std:node name="LineType16">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>61455</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Segment">
        <std:floatval>1</std:floatval>
        <std:floatval>-1</std:floatval>
      </std:node>
    </std:node>
    <std:node name="LineType17">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>2</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>213</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>1</std:intval>
      </std:node>
    </std:node>
    <std:node name="LineType18">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>2</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>67</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>1</std:intval>
      </std:node>
    </std:node>
    <std:node name="LineType19">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>2</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>66</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>1</std:intval>
      </std:node>
    </std:node>
    <std:node name="LineType20">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>65535</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>1</std:intval>
      </std:node>
    </std:node>
    <std:node name="LineType21">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>65535</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>1</std:intval>
      </std:node>
    </std:node>
    <std:node name="LineType22">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>4095</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Segment">
        <std:floatval>4.199999809265137</std:floatval>
        <std:floatval>-1.049999952316284</std:floatval>
      </std:node>
    </std:node>
    <std:node name="LineType23">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>127</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>2</std:intval>
      </std:node>
      <std:node name="Segment">
        <std:floatval>4.199999809265137</std:floatval>
        <std:floatval>-6.300000190734863</std:floatval>
      </std:node>
    </std:node>
    <std:node name="LineType24">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>24575</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>2</std:intval>
      </std:node>
      <std:node name="Segment">
        <std:floatval>8.399999618530273</std:floatval>
        <std:floatval>-1.049999952316284</std:floatval>
        <std:floatval>0.1749999970197678</std:floatval>
        <std:floatval>-1.049999952316284</std:floatval>
      </std:node>
    </std:node>
    <std:node name="LineType25">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>22527</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>2</std:intval>
      </std:node>
      <std:node name="Segment">
        <std:floatval>8.399999618530273</std:floatval>
        <std:floatval>-1.049999952316284</std:floatval>
        <std:floatval>0.1749999970197678</std:floatval>
        <std:floatval>-1.049999952316284</std:floatval>
        <std:floatval>0.1749999970197678</std:floatval>
        <std:floatval>-1.049999952316284</std:floatval>
      </std:node>
    </std:node>
    <std:node name="LineType26">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>22015</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>2</std:intval>
      </std:node>
      <std:node name="Segment">
        <std:floatval>8.399999618530273</std:floatval>
        <std:floatval>-1.049999952316284</std:floatval>
        <std:floatval>0.1749999970197678</std:floatval>
        <std:floatval>-1.049999952316284</std:floatval>
        <std:floatval>0.1749999970197678</std:floatval>
        <std:floatval>-1.049999952316284</std:floatval>
        <std:floatval>0.1749999970197678</std:floatval>
        <std:floatval>-1.049999952316284</std:floatval>
      </std:node>
    </std:node>
    <std:node name="LineType27">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>4681</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>2</std:intval>
      </std:node>
      <std:node name="Segment">
        <std:floatval>0.1749999970197678</std:floatval>
        <std:floatval>-1.049999952316284</std:floatval>
      </std:node>
    </std:node>
    <std:node name="LineType28">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>6655</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>3</std:intval>
      </std:node>
      <std:node name="Segment">
        <std:floatval>8.399999618530273</std:floatval>
        <std:floatval>-1.049999952316284</std:floatval>
        <std:floatval>2.099999904632568</std:floatval>
        <std:floatval>-1.049999952316284</std:floatval>
      </std:node>
    </std:node>
    <std:node name="LineType29">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>28159</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>4</std:intval>
      </std:node>
      <std:node name="Segment">
        <std:floatval>8.399999618530273</std:floatval>
        <std:floatval>-1.049999952316284</std:floatval>
        <std:floatval>6</std:floatval>
        <std:floatval>-3</std:floatval>
        <std:floatval>6</std:floatval>
        <std:floatval>-3</std:floatval>
      </std:node>
    </std:node>
    <std:node name="LineType30">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>10239</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Segment">
        <std:floatval>4.199999809265137</std:floatval>
        <std:floatval>-1.049999952316284</std:floatval>
        <std:floatval>0.1749999970197678</std:floatval>
        <std:floatval>-1.049999952316284</std:floatval>
      </std:node>
    </std:node>
    <std:node name="LineType31">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>10191</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>3</std:intval>
      </std:node>
      <std:node name="Segment">
        <std:floatval>4.199999809265137</std:floatval>
        <std:floatval>-1.049999952316284</std:floatval>
        <std:floatval>4.199999809265137</std:floatval>
        <std:floatval>-1.049999952316284</std:floatval>
        <std:floatval>0.1749999970197678</std:floatval>
        <std:floatval>-1.049999952316284</std:floatval>
      </std:node>
    </std:node>
    <std:node name="LineType32">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>58527</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>2</std:intval>
      </std:node>
      <std:node name="Segment">
        <std:floatval>4.199999809265137</std:floatval>
        <std:floatval>-1.049999952316284</std:floatval>
        <std:floatval>0.1749999970197678</std:floatval>
        <std:floatval>-1.049999952316284</std:floatval>
        <std:floatval>0.1749999970197678</std:floatval>
        <std:floatval>-1.049999952316284</std:floatval>
      </std:node>
    </std:node>
    <std:node name="LineType33">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>9447</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>3</std:intval>
      </std:node>
      <std:node name="Segment">
        <std:floatval>4.199999809265137</std:floatval>
        <std:floatval>-1.049999952316284</std:floatval>
        <std:floatval>4.199999809265137</std:floatval>
        <std:floatval>-1.049999952316284</std:floatval>
        <std:floatval>0.1749999970197678</std:floatval>
        <std:floatval>-1.049999952316284</std:floatval>
        <std:floatval>0.1749999970197678</std:floatval>
        <std:floatval>-1.049999952316284</std:floatval>
      </std:node>
    </std:node>
    <std:node name="LineType34">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>18750</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>3</std:intval>
      </std:node>
      <std:node name="Segment">
        <std:floatval>4.199999809265137</std:floatval>
        <std:floatval>-1.049999952316284</std:floatval>
        <std:floatval>0.1749999970197678</std:floatval>
        <std:floatval>-1.049999952316284</std:floatval>
        <std:floatval>0.1749999970197678</std:floatval>
        <std:floatval>-1.049999952316284</std:floatval>
        <std:floatval>0.1749999970197678</std:floatval>
        <std:floatval>-1.049999952316284</std:floatval>
      </std:node>
    </std:node>
    <std:node name="LineType35">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>43767</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>3</std:intval>
      </std:node>
      <std:node name="Segment">
        <std:floatval>4.199999809265137</std:floatval>
        <std:floatval>-1.049999952316284</std:floatval>
        <std:floatval>4.199999809265137</std:floatval>
        <std:floatval>-1.049999952316284</std:floatval>
        <std:floatval>0.1749999970197678</std:floatval>
        <std:floatval>-1.049999952316284</std:floatval>
        <std:floatval>0.1749999970197678</std:floatval>
        <std:floatval>-1.049999952316284</std:floatval>
        <std:floatval>0.1749999970197678</std:floatval>
        <std:floatval>-1.049999952316284</std:floatval>
      </std:node>
    </std:node>
    <std:node name="LineType36">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>65535</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>1</std:intval>
      </std:node>
    </std:node>
    <std:node name="LineType37">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>65535</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>1</std:intval>
      </std:node>
    </std:node>
    <std:node name="LineType38">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>65535</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>1</std:intval>
      </std:node>
    </std:node>
    <std:node name="LineType39">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>65535</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>1</std:intval>
      </std:node>
    </std:node>
    <std:node name="LineType40">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>65535</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>1</std:intval>
      </std:node>
    </std:node>
    <std:node name="LineType41">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>65535</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>1</std:intval>
      </std:node>
    </std:node>
    <std:node name="LineType42">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>65535</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>1</std:intval>
      </std:node>
    </std:node>
    <std:node name="LineType43">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>65535</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>1</std:intval>
      </std:node>
    </std:node>
    <std:node name="LineType44">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>65535</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>1</std:intval>
      </std:node>
    </std:node>
    <std:node name="LineType45">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>65535</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>1</std:intval>
      </std:node>
    </std:node>
    <std:node name="LineType46">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>65535</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>1</std:intval>
      </std:node>
    </std:node>
    <std:node name="LineType47">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>65535</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>1</std:intval>
      </std:node>
    </std:node>
    <std:node name="LineType48">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>65535</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>1</std:intval>
      </std:node>
    </std:node>
    <std:node name="LineType49">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>65535</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>1</std:intval>
      </std:node>
    </std:node>
    <std:node name="LineType50">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>65535</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>1</std:intval>
      </std:node>
    </std:node>
    <std:node name="LineType51">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>65535</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>1</std:intval>
      </std:node>
    </std:node>
    <std:node name="LineType52">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>65535</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>1</std:intval>
      </std:node>
    </std:node>
    <std:node name="LineType53">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>65535</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>1</std:intval>
      </std:node>
    </std:node>
    <std:node name="LineType54">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>65535</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>1</std:intval>
      </std:node>
    </std:node>
    <std:node name="LineType55">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>65535</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>1</std:intval>
      </std:node>
    </std:node>
    <std:node name="LineType56">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>65535</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>1</std:intval>
      </std:node>
    </std:node>
    <std:node name="LineType57">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>65535</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>1</std:intval>
      </std:node>
    </std:node>
    <std:node name="LineType58">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>65535</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>1</std:intval>
      </std:node>
    </std:node>
    <std:node name="LineType59">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>65535</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>1</std:intval>
      </std:node>
    </std:node>
    <std:node name="LineType60">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>65535</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>1</std:intval>
      </std:node>
    </std:node>
    <std:node name="LineType61">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>65535</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>1</std:intval>
      </std:node>
    </std:node>
    <std:node name="LineType62">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>65535</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>1</std:intval>
      </std:node>
    </std:node>
    <std:node name="LineType63">
      <std:node name="Availability">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Type">
        <std:intval>1</std:intval>
      </std:node>
      <std:node name="Pattern">
        <std:intval>65535</std:intval>
      </std:node>
      <std:node name="Ratio">
        <std:intval>1</std:intval>
      </std:node>
    </std:node>
    <std:node name="font">
      <std:strval>60  60
$ 0020  ;
$ 0040      60  0  ;
$ 0060      60  0  ;
/
/                     LINE-BASED FAMILY:
/
/ PIPE
$ 0041  012 036  000 -12  128 000  000 006  036 000  128 000  000 006
               000 -12  ;
/ &quot;X&quot; INTERRUPTIONS
$ 0042  000 030  048 000  048 000  128 000  008 008  016 -16  128 000
               -16 000  016 016  128 000  008 -08  048 000  048 000  ;
/ &quot;O&quot; INTERRUPTIONS
$ 0043  000 030  040 000  040 000  128 000  024 000  002 006  006 002
               006 -02  002 -06  -02 -06  -06 -02  -06 002  -02 006
               128 000  040 000  040 000  040 000  ;
/ CONTINUOUS + DASH UNDERNEATH
$ 0044  000 030  048 000  128 000  -32 -16  016 000  ;
/ CONTINUOUS + DASH ON BOTH SIDES
$ 0045  000 030  048 000  128 000  -32 -16  016 000  128 000  -16 032
               016 000  ;
/ CONTINUOUS + &quot;//&quot; INTERRUPTIONS
$ 0046  000 030  056 000  056 000  128 000  000 024  -16 -48  128 000
               016 000  016 048  128 000  -16 -24  056 000  056 000 ;
/ CONTINUOUS + &quot;/&quot; INTERRUPTIONS
$ 0047  000 030  056 000  056 000  128 000  000 024  -16 -48  128 000
               016 024  056 000  056 000  ;
/ CONTINUOUS + &quot;///&quot; INTERRUPTIONS
$ 0048  000 030  056 000  056 000  128 000  000 024  -16 -48  128 000
               016 000  016 048  128 000  016 000  -16 -48  128 000
               -32 024  056 000  056 000  ;
/ CONTINUOUS + &quot;X&quot; INTERRUPTIONS
$ 0049  000 030  056 000  056 000  128 000  000 024  -48 -48  128 000
               000 048  048 -48  128 000  000 024  056 000  056 000 ;
/ CONTINUOUS + &quot;L&quot; INTERRUPTIONS
$ 004A  000 030  056 000  056 000  128 000  000 024  000 -48  024 000
               128 000  -24 024  056 000  056 000  ;
/
/                     2D GENERAL:
/
/ RAILWAY
$ 004B  000 040  060 000  128 000  -60 -20  060 000  128 000  -30 036
               000 -52  ;
/ LADDER
$ 004C  000 000  000 060  060 000  000 -60  -60 000  ;
/ X
$ 004D  000 000  060 060  128 000  -60 000  060 -60  ;
/ SNAKES
$ 004E  000 020  000 020  020 020  020 000  020 -20  000 -20  -20 -20
               -20 000  -20 020  ;
/ FORTRESS
$ 004F  000 000  000 060  030 000  000 -60  030 000 ;
/ JAWS
$ 0050  000 030  030 030  000 -60  030 030  ;
/ THICK DASH
$ 0051  000 014  032 000  128 000  -32 004  032 000  128 000  -32 004
               032 000  128 000  -32 004  032 000  128 000  -32 004
               032 000  128 000  -32 004  032 000  128 000  -32 004
               032 000  128 000  -32 004  032 000  128 000  -32 004
               032 000
               128 000  032 -32  128 000  032 000
               032 000  128 000  -32 004  032 000  128 000  -32 004
               032 000  128 000  -32 004  032 000  128 000  -32 004
               032 000  128 000  -32 004  032 000  128 000  -32 004
               032 000  128 000  -32 004  032 000  128 000  -32 004
               032 000  ;
/ DOUBLE THICK DASH
$ 0052  008 012  044 000  128 000  000 004  -44 000  128 000  000 028
               044 000  128 000  000 004  -44 000  128 000  000 004
               044 000  000 -12  -44 000  000 012  128 000  000 -32
               000 -12  044 000  000 012  -44 000  ;
/ CONTINUOUS + &quot;~&quot; INTERRUPTIONS
$ 0053  000 030  056 000  056 000  128 000  -36 000  006 012  012 006
               012 -06  006 -12  006 -12  012 -06  012 006  006 012
               128 000  -36 000  056 000  056 000  ;
/  &quot;~&quot;
$ 0054  000 030  000 000 128 000  038 000  128 000  038 000  006 012  012 006
               012 -06  006 -12  006 -12  012 -06  012 006  006 012
               128 000  038 000  128 000  038 000 000 000  ;
/
/                     DIRECTIONAL:
/
/ RIGHT POINTING
$ 0056  012 052  036 -22  -36 -22  ;
/ LEFT  POINTING
$ 0057  048 052  -36 -22   36 -22  ;
/ CONTINUOUS + PERIODIC RIGHT POINTING
$ 0058  000 030  060 000  128 000  -16 -16  016 016  -16 016  ;
/ CONTINUOUS + PERIODIC LEFT  POINTING
$ 0059  016 014  -16 016  016 016  128 000  -16 -16  060 000  ;
/ CONTINUOUS + PERIODIC DOUBLE RIGHT POINTING
$ 005A  000 030  060 000  060 000  128 000  -64 016  032 -16  -32 -16
               128 000  032 032  032 -16  -32 -16  ;
/ CONTINUOUS + PERIODIC DOUBLE LEFT  POINTING
$ 005B  032 046  -32 -16  032 -16  128 000  032 032  -32 -16  032 -16
               128 000  -64 016  060 000  060 000  ;
/ SINGLE RIGHT POINTING ARROW - LENGTH 1
$ 005C  000 030  060 000  060 000  060 000  060 000
               000 016  040 -16  -40 -16  000 016  ;
/ SINGLE RIGHT POINTING ARROW - LENGTH 2
$ 005D  000 030  060 000  060 000  060 000  060 000  060 000  060 000
               060 000  060 000  060 000  060 000  060 000  060 000
               060 000  060 000  060 000  060 000  060 000  060 000
               060 000  060 000  060 000  060 000  060 000  060 000
               060 000  060 000  060 000  060 000  060 000  060 000
               000 018  045 -18  -45 -18  000 018  ;
/ SINGLE RIGHT POINTING ARROW - LENGTH 3
$ 005E  000 030  035 000  060 000  060 000  060 000
               000 016  040 -16  -40 -16  000 016  ;
$ 005F  -10  -6   60   0  128 000  -60  -2   60   0  ;
/
/                     VERTICAL POINTING:
/
/ UPWARD   POINTING ARROWS
$ 0061  028 000  000 060  016 -16  128 000  -16 016  -16 -16  ;
/ DOWNWARD POINTING ARROWS
$ 0062  012 016  016 -16  128 000  016 016  -16 -16  000 060  ;
/
/                     VARIOUS:
/
/ STARS
$ 006C  014 014  010 010  128 000  -02 006  -12 000  128 000  004 016
               010 -10  128 000  006 002  000 012  128 000  016 -04
               -10 -10  128 000  002 -06  014 000  128 000  -06 -16
               -10 010  128 000  -06 -02  000 -12  ;
/ ORCHARD
$ 006D  010 018  -02 006  000 006  002 004  -03 006  001 005  004 004
               006 002  006 000  004 -04  002 -04  002 004  006 004
               005 001  005 -04  002 -06  -02 -07  006 -02  002 -06
               000 -08  -04 -06  -08 -02  -04 004  -02 -06  -06 -04
               -05 002  -05 005  000 005  -04 -03  -05 000  -03 003
               128 000  000 054  ;
/ CUBES
$ 006E  010 010  000 030  010 010  030 000  000 -30  -10 -10  -30 000
               128 000  000 030  030 000  000 -30  128 000  000 030
               010 010  128 000  016 000  000 000  ;
/ FRESQUE
$ 006F  000 030  030 000  000 015  -15 000  000 015  060 000  000 -15
               -15 000  000 -15  060 000  000 -15  -15 000  000 -15
               060 000  000 015  -15 000  000 015  030 000  ;
/ GREEK
$ 0070  000 020  000 040  060 000  000 -20  -40 000  000 -20  060 000
               128 000  -40 -20  128 000  -40 000  040 000  040 000  ;
/ ASSYRIAN FRESQUE
$ 0071  004 004  052 052  128 000  000 -52  -52 052  128 000  024 000
               004 000  000 -04  -04 000  000 004  128 000  -20 -24
               -04 000  000 -04  004 000  000 004  128 000  020 -24
               004 000  000 -04  -04 000  000 004  128 000  024 020
               004 000  000 004  -04 000  000 -04  ;
/
/ HOLLOW PENTAGRAM
$ 0077  004 004  024 012  024 -12  -12 020  016 012  -16 000  -12 020
               -12 -20  -16 000  016 -12  -12 -20  128 000  063 000  000 000  ;
/ VENUS
$ 0078  004 020  048 000  128 000  -24 012  000 -32  128 000  008 032
               008 008  000 012  -08 008  -16 000  -08 -08  000 -12
               008 -08  016 000  128 000  022 000  000 000  ;
/ MARS
$ 0079  028 028  000 032  020 -20  128 000  -20 020  -20 -20  128 000
               012 -12  016 000  008 -08  000 -12  -08 -08  -16 000
               -08 008  000 012  008 008  128 000  022 000  000 000  ;
/ PEACE
$ 007A  000 030  024 000  012 008  004 012  000 -52  128 000  000 042
               008 -10  006 000  006 004  004 008  012 000  000 008
               -10 000  -02 -08  004 -12  012 000  008 004  008 -04
               004 004  000 012  -08 004  -04 -04  000 -12  128 000
               012 000  008 -04  008 004  128 000  012 012  -08 004
               -04 -04  000 -12  004 -04  006 000  006 004  004 008
               012 000  000 008  -10 000  -02 -08  004 -12  030 000  ;
/ BOY AND GIRL
$ 007B  000 030  030 003  128 000  000 006  006 006  000 006  -06 006
               -06 -06  000 -06  006 -06  000 -30  -15 -30  128 000
               015 030  015 -30  128 000  -15 054  030 -03
               030 -03  128 000  000 012  006 006  000 006  -06 006
               -06 -06  000 -06  006 -06  000 -18  -15 -24  030 000
               -15 024  128 000  -04 -24  000 -18  128 000  008 000
               000 018  128 000  -04 030  030 003  ;
/
/                     PHANTOM FAMILY:
/
$ 0082  000 030  048 000  048 000  048 000  048 000  048 000  048 000
               048 000  048 000  048 000  048 000  048 000  048 000
               048 000  048 000  048 000  048 000  048 000  048 000
               128 000  016 000  032 000  128 000  016 000  032 000
               128 000  016 000  016 000  ;
$ 0083  000 030  048 000  048 000  048 000  048 000  048 000  048 000
               048 000  048 000  048 000  048 000  048 000  048 000
               048 000  048 000  048 000  048 000
               128 000  016 000  032 000  128 000  016 000  032 000
               128 000  016 000  016 000  ;
$ 0084  000 030  048 000  048 000  048 000  048 000  048 000  048 000
               048 000  048 000  048 000  048 000  048 000  048 000
               048 000  048 000
               128 000  016 000  032 000  128 000  016 000  032 000
               128 000  016 000  016 000  ;
$ 0085  000 030  048 000  048 000  048 000  048 000  048 000  048 000
               048 000  048 000  048 000  048 000  048 000  048 000
               128 000  016 000  032 000  128 000  016 000  032 000
               128 000  016 000  016 000  ;
$ 0086  000 030  048 000  048 000  048 000  048 000  048 000  048 000
               048 000  048 000  048 000  048 000
               128 000  016 000  032 000  128 000  016 000  032 000
               128 000  016 000  016 000  ;
$ 0087  000 030  048 000  048 000  048 000  048 000  048 000  048 000
               048 000  048 000
               128 000  016 000  032 000  128 000  016 000  032 000
               128 000  016 000  016 000  ;
$ 0088  000 030  048 000  048 000  048 000  048 000  048 000  048 000
               128 000  016 000  032 000  128 000  016 000  032 000
               128 000  016 000  016 000  ;
$ 0089  000 030  048 000  048 000  048 000  048 000
               128 000  016 000  032 000  128 000  016 000  032 000
               128 000  016 000  016 000 ;
/
$ 008D  000 030  048 000  048 000  048 000  048 000  048 000  048 000
               048 000  048 000
               128 000  032 000  032 000  128 000  032 000  032 000
               128 000  032 000  000 000  ;
$ 008E  000 030  048 000  048 000  048 000  048 000  048 000  048 000
               048 000  016 000
               128 000  032 000  032 000  128 000  032 000  032 000
               128 000  032 000  032 000  ;
$ 008F  000 030  048 000  048 000  048 000  048 000  048 000  048 000
               032 000
               128 000  032 000  032 000  128 000  032 000  032 000
               128 000  032 000  032 000  128 000  032 000  000 000  ;
$ 0090  000 030  048 000  048 000  048 000  048 000  048 000  048 000
               128 000  032 000  032 000  128 000  032 000  032 000
               128 000  032 000  032 000  128 000  032 000  032 000  ;
$ 0091  000 030  048 000  048 000  048 000  048 000  048 000  016 000
               128 000  032 000  032 000  128 000  032 000  032 000
               128 000  032 000  032 000  128 000  032 000  032 000
               128 000  032 000  000 000  ;
/
/                     DOT-DASH FAMILY:
/
$ 0098  000 030  048 000  048 000  048 000  048 000  048 000  048 000
               128 000  016 000
               032 000
               128 000  016 000  000 000  ;
$ 0099  000 030  048 000  048 000  048 000  048 000  048 000  016 000
               128 000  016 000
               048 000  016 000
               128 000  016 000  000 000  ;
$ 009A  000 030  048 000  048 000  048 000  048 000  032 000
               128 000  016 000
               048 000  048 000
               128 000  016 000  000 000  ;
$ 009B  000 030  048 000  048 000  048 000  048 000
               128 000  016 000
               048 000  048 000  032 000
               128 000  016 000  000 000  ;
/
$ 00A3  000 030  048 000  048 000  048 000  048 000  048 000
               128 000  032 000
               016 000
               128 000  032 000  000 000  ;
$ 00A4  000 030  048 000  048 000  048 000  048 000  016 000
               128 000  048 000
               016 000
               128 000  048 000  ;
$ 00A5  000 030  048 000  048 000  048 000  032 000
               128 000  048 000  128 000  016 000
               016 000
               128 000  048 000  128 000  016 000  ;
$ 00A6  000 030  048 000  048 000  048 000
               128 000  048 000  128 000  032 000
               016 000
               128 000  048 000  128 000  032 000  ;
$ 00A7  000 030  048 000  048 000  016 000
               128 000  048 000  128 000  048 000
               016 000
               128 000  048 000  128 000  048 000  000 000  ;
/
/                     DASH FAMILY:
/
$ 00AE  000 030  032 000           128 000  016 000  000 000  ;
$ 00AF  000 030  048 000           128 000  016 000  000 000  ;
$ 00B0  000 030  048 000  016 000  128 000  016 000  000 000  ;
$ 00B1  000 030  048 000  032 000  128 000  016 000  000 000  ;
/
$ 00B9  000 030  032 000           128 000  032 000  000 000  ;
$ 00BA  000 030  048 000           128 000  048 000  000 000  ;
$ 00BB  000 030  048 000  016 000  128 000  048 000  128 000  016 000  000 000  ;
$ 00BC  000 030  048 000  032 000  128 000  048 000  128 000  032 000  000 000  ;
$ 00BD  000 030  048 000  048 000  128 000  048 000  128 000  048 000  000 000  ;
/
/                     DOT FAMILY:
/
$ 00C4  000 030  016 000  128 000  016 000  000 000  ;
$ 00C5  000 030  016 000  128 000  032 000  000 000  ;
$ 00C6  000 030  016 000  128 000  048 000  000 000  ;
$ 00C7  000 030  016 000  128 000  048 000  128 000  016 000  000 000  ;
$ 00C8  000 030  016 000  128 000  048 000  128 000  032 000  000 000  ;
/
/                     CONTINUOUS FAMILY:
/
/                     ***********************
/
</std:strval>
    </std:node>
  </std:node>
  <std:node name="SheetFormat">
    <std:typeval name="Formats">
      <std:strval name="Name" >A0</std:strval>
      <std:floatval name="Width" >1189</std:floatval>
      <std:floatval name="Height" >841</std:floatval>
      <std:enumval name="FormatOrientationType">LandscapeByDefault</std:enumval>
    </std:typeval>
    <std:typeval name="Formats">
      <std:strval name="Name" >A1</std:strval>
      <std:floatval name="Width" >841</std:floatval>
      <std:floatval name="Height" >594</std:floatval>
      <std:enumval name="FormatOrientationType">LandscapeByDefault</std:enumval>
    </std:typeval>
    <std:typeval name="Formats">
      <std:strval name="Name" >A2</std:strval>
      <std:floatval name="Width" >594</std:floatval>
      <std:floatval name="Height" >420</std:floatval>
      <std:enumval name="FormatOrientationType">LandscapeByDefault</std:enumval>
    </std:typeval>
    <std:typeval name="Formats">
      <std:strval name="Name" >A3</std:strval>
      <std:floatval name="Width" >420</std:floatval>
      <std:floatval name="Height" >297</std:floatval>
      <std:enumval name="FormatOrientationType">LandscapeByDefault</std:enumval>
    </std:typeval>
    <std:typeval name="Formats">
      <std:strval name="Name" >A4</std:strval>
      <std:floatval name="Width" >297</std:floatval>
      <std:floatval name="Height" >210</std:floatval>
      <std:enumval name="FormatOrientationType">PortraitByDefault</std:enumval>
    </std:typeval>
    <std:typeval name="Formats">
      <std:strval name="Name" >A0x2</std:strval>
      <std:floatval name="Width" >1682</std:floatval>
      <std:floatval name="Height" >1189</std:floatval>
      <std:enumval name="FormatOrientationType">LandscapeByDefault</std:enumval>
    </std:typeval>
    <std:typeval name="Formats">
      <std:strval name="Name" >A0x3</std:strval>
      <std:floatval name="Width" >2523</std:floatval>
      <std:floatval name="Height" >1189</std:floatval>
      <std:enumval name="FormatOrientationType">LandscapeByDefault</std:enumval>
    </std:typeval>
    <std:typeval name="Formats">
      <std:strval name="Name" >A1x3</std:strval>
      <std:floatval name="Width" >1783</std:floatval>
      <std:floatval name="Height" >841</std:floatval>
      <std:enumval name="FormatOrientationType">LandscapeByDefault</std:enumval>
    </std:typeval>
    <std:typeval name="Formats">
      <std:strval name="Name" >A1x4</std:strval>
      <std:floatval name="Width" >2378</std:floatval>
      <std:floatval name="Height" >841</std:floatval>
      <std:enumval name="FormatOrientationType">LandscapeByDefault</std:enumval>
    </std:typeval>
    <std:typeval name="Formats">
      <std:strval name="Name" >A2x3</std:strval>
      <std:floatval name="Width" >1261</std:floatval>
      <std:floatval name="Height" >594</std:floatval>
      <std:enumval name="FormatOrientationType">LandscapeByDefault</std:enumval>
    </std:typeval>
    <std:typeval name="Formats">
      <std:strval name="Name" >A2x4</std:strval>
      <std:floatval name="Width" >1682</std:floatval>
      <std:floatval name="Height" >594</std:floatval>
      <std:enumval name="FormatOrientationType">LandscapeByDefault</std:enumval>
    </std:typeval>
    <std:typeval name="Formats">
      <std:strval name="Name" >A2x5</std:strval>
      <std:floatval name="Width" >2102</std:floatval>
      <std:floatval name="Height" >594</std:floatval>
      <std:enumval name="FormatOrientationType">LandscapeByDefault</std:enumval>
    </std:typeval>
    <std:typeval name="Formats">
      <std:strval name="Name" >A3x3</std:strval>
      <std:floatval name="Width" >891</std:floatval>
      <std:floatval name="Height" >420</std:floatval>
      <std:enumval name="FormatOrientationType">LandscapeByDefault</std:enumval>
    </std:typeval>
    <std:typeval name="Formats">
      <std:strval name="Name" >A3x4</std:strval>
      <std:floatval name="Width" >1189</std:floatval>
      <std:floatval name="Height" >420</std:floatval>
      <std:enumval name="FormatOrientationType">LandscapeByDefault</std:enumval>
    </std:typeval>
    <std:typeval name="Formats">
      <std:strval name="Name" >A3x5</std:strval>
      <std:floatval name="Width" >1486</std:floatval>
      <std:floatval name="Height" >420</std:floatval>
      <std:enumval name="FormatOrientationType">LandscapeByDefault</std:enumval>
    </std:typeval>
    <std:typeval name="Formats">
      <std:strval name="Name" >A3x6</std:strval>
      <std:floatval name="Width" >1782</std:floatval>
      <std:floatval name="Height" >420</std:floatval>
      <std:enumval name="FormatOrientationType">LandscapeByDefault</std:enumval>
    </std:typeval>
    <std:typeval name="Formats">
      <std:strval name="Name" >A3x7</std:strval>
      <std:floatval name="Width" >2080</std:floatval>
      <std:floatval name="Height" >420</std:floatval>
      <std:enumval name="FormatOrientationType">LandscapeByDefault</std:enumval>
    </std:typeval>
    <std:typeval name="Formats">
      <std:strval name="Name" >A3x8</std:strval>
      <std:floatval name="Width" >2378</std:floatval>
      <std:floatval name="Height" >420</std:floatval>
      <std:enumval name="FormatOrientationType">LandscapeByDefault</std:enumval>
    </std:typeval>
    <std:typeval name="Formats">
      <std:strval name="Name" >A4x3</std:strval>
      <std:floatval name="Width" >630</std:floatval>
      <std:floatval name="Height" >297</std:floatval>
      <std:enumval name="FormatOrientationType">LandscapeByDefault</std:enumval>
    </std:typeval>
    <std:typeval name="Formats">
      <std:strval name="Name" >A4x4</std:strval>
      <std:floatval name="Width" >841</std:floatval>
      <std:floatval name="Height" >297</std:floatval>
      <std:enumval name="FormatOrientationType">LandscapeByDefault</std:enumval>
    </std:typeval>
    <std:typeval name="Formats">
      <std:strval name="Name" >A4x5</std:strval>
      <std:floatval name="Width" >1050</std:floatval>
      <std:floatval name="Height" >297</std:floatval>
      <std:enumval name="FormatOrientationType">LandscapeByDefault</std:enumval>
    </std:typeval>
    <std:typeval name="Formats">
      <std:strval name="Name" >A4x6</std:strval>
      <std:floatval name="Width" >1261</std:floatval>
      <std:floatval name="Height" >210</std:floatval>
      <std:enumval name="FormatOrientationType">LandscapeByDefault</std:enumval>
    </std:typeval>
    <std:typeval name="Formats">
      <std:strval name="Name" >A4x7</std:strval>
      <std:floatval name="Width" >1471</std:floatval>
      <std:floatval name="Height" >297</std:floatval>
      <std:enumval name="FormatOrientationType">LandscapeByDefault</std:enumval>
    </std:typeval>
    <std:typeval name="Formats">
      <std:strval name="Name" >A4x8</std:strval>
      <std:floatval name="Width" >1682</std:floatval>
      <std:floatval name="Height" >297</std:floatval>
      <std:enumval name="FormatOrientationType">LandscapeByDefault</std:enumval>
    </std:typeval>
    <std:typeval name="Formats">
      <std:strval name="Name" >A4x9</std:strval>
      <std:floatval name="Width" >1892</std:floatval>
      <std:floatval name="Height" >297</std:floatval>
      <std:enumval name="FormatOrientationType">LandscapeByDefault</std:enumval>
    </std:typeval>
    <std:typeval name="Formats">
      <std:strval name="Name" >A4x10</std:strval>
      <std:floatval name="Width" >2102</std:floatval>
      <std:floatval name="Height" >297</std:floatval>
      <std:enumval name="FormatOrientationType">LandscapeByDefault</std:enumval>
    </std:typeval>
  </std:node>
  <std:node name="ViewsSet">
    <std:node name="ViewsBox">
      <std:node name="PrimaryView">
        <std:intval>0</std:intval>
      </std:node>
      <std:node name="H">
        <std:intval>2</std:intval>
      </std:node>
      <std:node name="V">
        <std:intval>4</std:intval>
      </std:node>
      <std:node name="N">
        <std:intval>0</std:intval>
      </std:node>
      <std:node name="Position">
        <std:intval>0</std:intval>
      </std:node>
      <std:node name="X">
        <std:floatval>0</std:floatval>
      </std:node>
      <std:node name="Y">
        <std:floatval>0</std:floatval>
      </std:node>
      <std:node name="Z">
        <std:floatval>0</std:floatval>
      </std:node>
      <std:node name="FrontRear">
        <std:floatval>1000</std:floatval>
      </std:node>
      <std:node name="RightLeft">
        <std:floatval>1000</std:floatval>
      </std:node>
      <std:node name="TopBottom">
        <std:floatval>1000</std:floatval>
      </std:node>
    </std:node>
    <std:node name="NamingStrategy">
      <std:intval>0</std:intval>
    </std:node>
  </std:node>
  <std:node name="EngineeringSymbols">
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;SUBSTITUTION&gt;</std:strval>
      <std:intval name="Position" >1</std:intval>
      <std:strval name="Font" >SSS4.font</std:strval>
      <std:intval name="Charcode" >8727</std:intval>
      <std:strval name="Icon16x16" >AAAAAACAAIAQiAiQBCAAAAAABCAIkBCIAIAAgACAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAAAAAAAAABAAABAACBBABBCAAhEAAQIAAIQAAAAAAAAAAAAAAQIAAhEABBCACBBAABAAABAAABAAAAAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;DIAMETER&gt;</std:strval>
      <std:intval name="Position" >2</std:intval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >126</std:intval>
      <std:strval name="Icon16x16" >AAAEAAIAAgADwAUgCRAJEAiQCJAEoAPAAEAAQAAgAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAYAAAYAAAIAAAMAAAPAAAfwAA+cAA2EABiGABjGABjGABhGAAxsAAZ8AAP4AADwAAAwAAAQAAAQAAAYAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;PLUSMINUS&gt;</std:strval>
      <std:intval name="Position" >3</std:intval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >177</std:intval>
      <std:strval name="Icon16x16" >AAAAAAAAB/AAAAAAAEAAQABAA/gAIAAgACAAAAAAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAAAAAAAAAAAAAf8AAf8AAAAAAAAAAAgAAAgAAAwAAAwAAH/AAH/AAAYAAAYAAAIAAAIAAAAAAAAAAAAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;DEGREE&gt;</std:strval>
      <std:intval name="Position" >4</std:intval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >176</std:intval>
      <std:strval name="Icon16x16" >AAAAAAAAAAAAAAAAADgASABIADgAAAAAAAAAAAAAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOAAAbAAAxgAAxgAAbAAAOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;POVERNUPO&gt;</std:strval>
      <std:intval name="Position" >5</std:intval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >166</std:intval>
      <std:strval name="Icon16x16" >AAAAAAAAAGABCAIEBAQEAB4AJIQCBAEIAGAAAAAAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAAAAAAAAAAAAAA4AADGAAMBAAIAgAQAwAQAQAwAQBcAQGWAQIRAwAIAgAMBAADGAAA4AAAAAAAAAAAAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;RAZVERTKA&gt;</std:strval>
      <std:intval name="Position" >6</std:intval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >169</std:intval>
      <std:strval name="Icon16x16" >AAAAAAAAAAgH/BDAIAAgIAAgACAgICAAEMAHAAAAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAAAAAAAAAADAAABgAAAwA//wDAhgEATAEAKAIAIAIAIAIAEAIAIAIAIAEAIAGAQADBgAA/AAAAAAAAAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;KATET&gt;</std:strval>
      <std:intval name="Position" >7</std:intval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >173</std:intval>
      <std:strval name="Icon16x16" >AAAAAD/8IBggMCBgIMAhgCMAJgAsADgAMAAgAAAAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAAAAP//wIABgIADAIAGAIAMAIAYAIAwAIBgAIDAAIGAAIMAAIYAAIwAAJgAALAAAOAAAMAAAIAAAAAAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;USILENIE WVA SNYAT (LICEVOI)&gt;</std:strval>
      <std:intval name="Position" >8</std:intval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >174</std:intval>
      <std:strval name="Icon16x16" >AAAAAAAAAAAAAAPABCAAAAAABCACQAAAAAAAAAAAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAAAAAAAAAAAAAAAAAAAAP//wAMwAAQIAAQAAAAAAAAEAAAAAAQIAAIQAADAAAAAAAAAAAAAAAAAAAAAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;USILENIE WVA SNYAT (OBOROTNII)&gt;</std:strval>
      <std:intval name="Position" >9</std:intval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >196</std:intval>
      <std:strval name="Icon16x16" >AAAAAAAAAAAAAAJABCAAAAAABCADwAAAAAAAAAAAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAAAAAAAAAAAAAAAAAAAAADAAAIQAAQIAAAAAAAAAAAAAAQIAAQIAAMwAP//wAAAAAAAAAAAAAAAAAAAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;NAPLIVI OBRABOTAT S PLAVNIM PEREHODOM (LICEVOI)&gt;</std:strval>
      <std:intval name="Position" >10</std:intval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >193</std:intval>
      <std:strval name="Icon16x16" >AAAAAAAAAAAAAAAAP/4BACAEIAAAAAAAAAAAAAAAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADMTAECAgEDAAABAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;NAPLIVI OBRABOTAT S PLAVNIM PEREHODOM (OBRATNII)&gt;</std:strval>
      <std:intval name="Position" >11</std:intval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >194</std:intval>
      <std:strval name="Icon16x16" >AAAAAAAAAAAAAAAAIAAgBAGAf/4AAAAAAAAAAAAAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAEAAgDMTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;WOV PRERIVISTII&gt;</std:strval>
      <std:intval name="Position" >12</std:intval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >198</std:intval>
      <std:strval name="Icon16x16" >AAAP8AgABAAGAAIAAQABAACAAIAAQABgACAAEA/wAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAB/+ABgAAAwAAAwAAAYAAAIAAAMAAAEAAAGAAADAAABAAABgAAAgAAAwAAAQAAAYAAAMAAAEAAAGAB/+AAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;WOV PO NEZAMKNUTOI LINII&gt;</std:strval>
      <std:intval name="Position" >13</std:intval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >199</std:intval>
      <std:strval name="Icon16x16" >AAAAAAAAAAAAAAACAAIAAgACAAIAAgAAAAAAAAAAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAAAAAAAAAAAAAAAAAAAAP//wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//wAAAAAAAAAAAAAAAAAAAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;MONTAJNII WOV&gt;</std:strval>
      <std:intval name="Position" >14</std:intval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >197</std:intval>
      <std:strval name="Icon16x16" >AAAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIA/gAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAAMAAAMAAAMAAAMAAAMAAAMAAAMAAAMAAAMAAAMAAAMAAAMAAAMAAAMAAAMAAAMAAAMAAAMAAAMAA/8AAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;STRAIGHT&gt;</std:strval>
      <std:intval name="Position" >15</std:intval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >231</std:intval>
      <std:strval name="Icon16x16" >AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;FLATNESS&gt;</std:strval>
      <std:intval name="Position" >16</std:intval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >232</std:intval>
      <std:strval name="Icon16x16" >AAAAAAAAAAAAAAAQIAAACBAAAAQAAAAAAAAAAAAAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAAAAAAAAAAAAAAAAAAAAAAAAIAEAAACAEAAAAABACAAABAAgBAAQAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;CIRCULAR&gt;</std:strval>
      <std:intval name="Position" >17</std:intval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >233</std:intval>
      <std:strval name="Icon16x16" >AAAAAAQgEAgAACAEAAAAAAAAAAAgBAAAEAgEIAAAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAAAAAP4AAgEABADACABAEAAgIAAQIAAQIAAQIAAQIAAQIAAQIAAQIAAQEAAgCABABADAAgEAAP4AAAAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;CYLINDRIC&gt;</std:strval>
      <std:intval name="Position" >18</std:intval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >234</std:intval>
      <std:strval name="Icon16x16" >AAAAAAAAQAAgQAJAFCAAEAgABCgGQAIEAAAAAAAAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAAAAAAAAAAAAAAgAIAAAEAQAEIQACQIAAAMABgEAAgCAAgIAAQJAAYQAAIAgAAAQAEAQAAAAAAAAAAAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;PRODOLNOE SECHENIE&gt;</std:strval>
      <std:intval name="Position" >19</std:intval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >235</std:intval>
      <std:strval name="Icon16x16" >AAAAAAAAAAAAAD/8AAAAAAAAAAA//AAAAAAAAAAAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAAAAAAAAAAAAAAAAAAAAAAAAP//wAAAAAAAAAAAAAAAAAAAAAAAAP//wAAAAAAAAAAAAAAAAAAAAAAAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;PARALLEL&gt;</std:strval>
      <std:intval name="Position" >20</std:intval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >236</std:intval>
      <std:strval name="Icon16x16" >AAAAAAAAIIAAABBACAAIIAQQAAACCAAAAQQAggAAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAAAAAAAAIBAAEBAAEAgACAgACAQABAQAAAIAAgEAAQEAAQCAAICAAIBAAEBAAAAgACAQABAQAAAAAAAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;PERPENDICULAR&gt;</std:strval>
      <std:intval name="Position" >21</std:intval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >237</std:intval>
      <std:strval name="Icon16x16" >AAAAAD/8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;ANGULAR&gt;</std:strval>
      <std:intval name="Position" >22</std:intval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >238</std:intval>
      <std:strval name="Icon16x16" >AAAAAAAAAAA//BAABAABAACAACAAGAAEAAAAAAAAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAAAAAAAAAAAAAAAAP//wEAAADAAAAwAAAIAAAGAAABgAAAQAAAMAAACAAABgAAAQAAAAAAAAAAAAAAAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;CONCENTRIC&gt;</std:strval>
      <std:intval name="Position" >23</std:intval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >239</std:intval>
      <std:strval name="Icon16x16" >AAAAAAQgEAADwCQkCBAIEAgQCBAkJAPAEAAEIAAAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAAAAAfwAAgEADACACHhAEYQgIgIgIgEQJAAQJACQJACQJAAQIgEQIgIgEYQgCHhADACAAgMAAfwAAAAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;SYMMETRY&gt;</std:strval>
      <std:intval name="Position" >24</std:intval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >240</std:intval>
      <std:strval name="Icon16x16" >AAAAAAAAAAAAAA/wAAAAAAAAAAAP8AAAAAAAAAAAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAAAAAAAAAAAAAAAAAAAAAAAAB/+AAAAAAAAAAAAAAAAAAAAAAAAAB/+AAAAAAAAAAAAAAAAAAAAAAAAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;POSITION&gt;</std:strval>
      <std:intval name="Position" >25</std:intval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >241</std:intval>
      <std:strval name="Icon16x16" >AAAAAAAAAAADwAQACBAIEAgQCBAEAAPAAAAAAAAAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAAAAAAAAAAAAAAAAAHgAAYYAAgEAAgEABACABACABACABACAAgEAAgEAAYYAAHgAAAAAAAAAAAAAAAAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;PERECECHENIE OSEI&gt;</std:strval>
      <std:intval name="Position" >26</std:intval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >242</std:intval>
      <std:strval name="Icon16x16" >AAAAACAEEAgIEAQgAkABgAGAAkAEIAgQEAggBAAAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAAAAAAAQEAAgCABABACAAgEAAQIAAIQAAEgAADAAADAAAEgAAIQAAQIAAgEABACACABAEAAgAAAQAAAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;CIRCULARRUNOUT&gt;</std:strval>
      <std:intval name="Position" >27</std:intval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >243</std:intval>
      <std:strval name="Icon16x16" >AAAAACAAEAAIAAQAAgABAACAAFAAIABYABwADAAAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAAAAIAAAEAAACAAABAAAAgAAAQAAAIAAAEAAACAAABAAAAgAAASAAAKAAAFAAAbAAAHgAABwAAAQAAAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;TOTALRUNOUT&gt;</std:strval>
      <std:intval name="Position" >28</std:intval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >244</std:intval>
      <std:strval name="Icon16x16" >AAAAAAAAAAAAAAAAA8ACQAGAAYAAAAAAAAAAAAAAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAAAAAAAAAAAAAAAAAAAAAAAAIAgAEAQACAIABAEAAgCAAYBAAIBwAMAQAAAAAAAAAAAAAAAAAAAAAAAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;LINEPROFILE&gt;</std:strval>
      <std:intval name="Position" >29</std:intval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >245</std:intval>
      <std:strval name="Icon16x16" >AAAAAAAAAAAAAAAAAAAgBAAAEAgEIAAAAAAAAAAAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAIAAQIAAQAAAAEAAgCABABACAAwMAAHgAAAAAAAAAAAAAAAAAAAAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;SURFPROFILE&gt;</std:strval>
      <std:intval name="Position" >30</std:intval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >246</std:intval>
      <std:strval name="Icon16x16" >AAAAAAAAAAAAAAAAAAAgBAAAEAgEIAAAAAAAAAAAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAAAAAAAAAAAAAAAAAAAAP//wAAAAIAAQIAAQAAAAEAAgCABABACAAwMAAHgAAAAAAAAAAAAAAAAAAAAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;MAXMATERIAL&gt;</std:strval>
      <std:intval name="Position" >31</std:intval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >228</std:intval>
      <std:strval name="Icon16x16" >AAAAAAQgEAgEICQkBCAEIAWgBCAmZAQgEAgEIAAAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAAAAAfwAAgEADACACQJAEQIgIQIQIQIQIQIQIQIQITIQIRIQIUoQIYYAEYYgCQJABACAAgEAAf4AAAAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;NOACTUALSIZE&gt;</std:strval>
      <std:intval name="Position" >32</std:intval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >229</std:intval>
      <std:strval name="Icon16x16" >AAAAAAQgEAgCwCBEAEAAgAEAAgAiBANAEAgEIAAAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAAAAAP4AAgEABADACHhAEIQgIAQQIAQQIAgQIBAQICAQIEAQIIAQIIAQEIQgCHhABADAAgEAAP4AAAAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;PROJTOLZONE&gt;</std:strval>
      <std:intval name="Position" >33</std:intval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >230</std:intval>
      <std:strval name="Icon16x16" >AAAAAAQgEAgCACIEAgADgAJAAgAiBAJAEAgEIAAAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAAAAAf4AAgEABACACIBAEIAgIIAQIIAQIIAQIPgQIIQQIIQQIIQQIIQQEIQgCPhABACAAgEAAP4AAAAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;ENVELOPE&gt;</std:strval>
      <std:intval name="Position" >34</std:intval>
      <std:strval name="Font" >SymbC.pfb</std:strval>
      <std:intval name="Charcode" >9402</std:intval>
      <std:strval name="Icon16x16" >AAADwAgQEAggBAAAQAJAAkACQAIAACAEEAgIEAPAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAADAAAYYABAGACABAEAAgAPwAIIAQIIAQAIAAQIAIQPwIAIAAIIAQIIAQAPwAEAAgCABABAGAAYYAADAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;FREESTATE&gt;</std:strval>
      <std:intval name="Position" >35</std:intval>
      <std:strval name="Font" >SymbC.pfb</std:strval>
      <std:intval name="Charcode" >9403</std:intval>
      <std:strval name="Icon16x16" >AAADwAgQEAggBAAAQAJAAkACQAIAACAEEAgIEAPAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAADAAAYYABAGACABAEAAgAIAAIIAQIIAQAIAAQIAIQPwIAIAAIIAQIIAQAPwAEAAgCABABAGAAYYAADAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;LEASTMATERIAL&gt;</std:strval>
      <std:intval name="Position" >36</std:intval>
      <std:strval name="Font" >SymbC.pfb</std:strval>
      <std:intval name="Charcode" >9409</std:intval>
      <std:strval name="Icon16x16" >AAADwAgQEAggBAIAQgJCAkICQgICACAEEAgIEAPAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAADAAAYYABAGACABAEAAgAPwAIIAQIIAQAIAAQIAIQIAIAIAAIIAQIIAQAIAAEAAgCABABAGAAYYAADAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;TANGENTPLANE&gt;</std:strval>
      <std:intval name="Position" >37</std:intval>
      <std:strval name="Font" >SymbC.pfb</std:strval>
      <std:intval name="Charcode" >9417</std:intval>
      <std:strval name="Icon16x16" >AAADwAgQEAggBAAAQAJAAkACQAIAACAEEAgIEAPAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAADAAAYYABAGACABAEAAgAAAAIAAQIAAQAAAAQAAIQAAIAAAAIAAQIAAQAf4AEAAgCABABAGAAYYAADAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;CIRCLE&gt;</std:strval>
      <std:intval name="Position" >38</std:intval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >203</std:intval>
      <std:strval name="Icon16x16" >AAAAABAADmAMEBAIEggBAACAEEgQCAgwBnAACAAAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAAAACAAACBAABc4AAgEABQCADIBACMBACEBAECAgEBAgCAhACAxADATABAKAAwEAAc6AACBAAABgAAAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;SQUARE&gt;</std:strval>
      <std:intval name="Position" >39</std:intval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >204</std:intval>
      <std:strval name="Icon16x16" >AAAAAD/8IAQgBCAEIAQgBCAEIAQgBCAEIAQ//AAAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAAAAH//wP//wMAAwMAAwMAAwMAAwMAAwMAAwMAAwMAAwMAAwMAAwMAAwMAAwMAAwMAAwP//wH//wAAAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;SHESTIGRANNIK&gt;</std:strval>
      <std:intval name="Position" >40</std:intval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >205</std:intval>
      <std:strval name="Icon16x16" >AAAAAAfgCBAAEBAIAAQgBCAEAAQQCAAQCBAH4AAAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAAAAAAAAA/8AAgGABACADADACABAGABgEAAgMAAQMAAQEAAgGABgCABADADABACAAgEAA/8AAAAAAAAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;TRIHEDRON&gt;</std:strval>
      <std:intval name="Position" >41</std:intval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >206</std:intval>
      <std:strval name="Icon16x16" >AAAAAD/8IAQQCBAICBAMEAQgAiACQAHAAYAAAAAAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAAAAAAAAP//wEAAgGABgCABADADABgCAAgGAAwEAAQMAAYIAAIQAAMwAAEgAAHgAADAAADAAAAAAAAAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;SEGMENT&gt;</std:strval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >207</std:intval>
      <std:intval name="Position" >42</std:intval>
      <std:strval name="Icon16x16" >AAAAAAAAAAAAAAAAIAAgBBAACAgGYAAAAAAAAAAAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAAAAAAAAAAAAAAAAAAAAP//wIAAQIAAQAAAQEAAgEAAgCABABgCAAY4AABAAAAAAAAAAAAAAAAAAAAAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;TRAPEZOID&gt;</std:strval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >208</std:intval>
      <std:intval name="Position" >43</std:intval>
      <std:strval name="Icon16x16" >AAAAAAAAAAAAAAAAIAAgBAAEAAAQCAAAAAAAAAAAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAAAAAAAAAAAAAAAAAAAAP//wIAAQIAAQEAAAEAAgEAAgAAAgCAAACABAB//AAAAAAAAAAAAAAAAAAAAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;OVAL&gt;</std:strval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >209</std:intval>
      <std:intval name="Position" >44</std:intval>
      <std:strval name="Icon16x16" >AAAAAAAAAAAIEBAAIAQgBCAEIAQQAAgQAAAAAAAAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAAAAAAAAAAAAAAAAB/+ADADAGABgEAAgIAAQIAAQIAAQIAAQEAAgGABgDADAB/+AAAAAAAAAAAAAAAAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;POLOSOVOY&gt;</std:strval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >210</std:intval>
      <std:intval name="Position" >45</std:intval>
      <std:strval name="Icon16x16" >AAAAAAAAAAAAADAMHDwD4AfgPBgwBAAAAAAAAAAAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAAAAAAAAAAAAAAAAAAAAAAAAGABwHgHwA8/AAH4AAf4AD8OAHwDgGAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;POLOSOBULIB&gt;</std:strval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >211</std:intval>
      <std:intval name="Position" >46</std:intval>
      <std:strval name="Icon16x16" >AAAAgACAAIAAgACAAIAAgACAAIABwAPAA+ADwAHAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAADAAADAAADAAADAAADAAADAAADAAADAAADAAADAAADAAADAAADAAAHgAAPwAAP4AAP4AAP4AAPwAAHgAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;POLOSOBULIB SDVOENNII&gt;</std:strval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >212</std:intval>
      <std:intval name="Position" >47</std:intval>
      <std:strval name="Icon16x16" >AAADwAPAA8ADwAGAAYABgAGAAYADgAPAA8ADwAOAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAHgAAPwAAPwAAfwAAPwAAPwAAHgAADAAADAAADAAADAAADAAADAAAHgAAPwAAPwAAfwAAPwAAPwAAHgAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;COZYCORNER&gt;</std:strval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >213</std:intval>
      <std:intval name="Position" >48</std:intval>
      <std:strval name="Icon16x16" >AAAAAD/8IAAgACAAIAAgACAAIAAgACAAIAAgAAAAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAAAAP//wP//gMAAAMAAAMAAAMAAAMAAAMAAAMAAAMAAAMAAAMAAAMAAAMAAAMAAAMAAAMAAAIAAAAAAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;TAVROVYY&gt;</std:strval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >214</std:intval>
      <std:intval name="Position" >49</std:intval>
      <std:strval name="Icon16x16" >AAABgAGAAYABgAGAAYABgAGAAYABgAGAAYABgB/4AAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAADAAADAAADAAADAAADAAADAAADAAADAAADAAADAAADAAADAAADAAADAAADAAADAAADAAADAAD//AH//gAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;DVUTAVROVYY&gt;</std:strval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >215</std:intval>
      <std:intval name="Position" >50</std:intval>
      <std:strval name="Icon16x16" >AAAf+AGAAYABgAGAAYABgAGAAYABgAGAAYABgB/4AAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAH//gD//AADAAADAAADAAADAAADAAADAAADAAADAAADAAADAAADAAADAAADAAADAAADAAADAAD//AH//gAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;SHVELLER&gt;</std:strval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >216</std:intval>
      <std:intval name="Position" >51</std:intval>
      <std:strval name="Icon16x16" >AAAf/BAAEAAQABAAEAAQABAAEAAQABAAEAAQAB/8AAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAD//gD//ACAAACAAACAAACAAACAAACAAACAAACAAACAAACAAACAAACAAACAAACAAACAAACAAAD//AD//gAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;RAIL&gt;</std:strval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >217</std:intval>
      <std:intval name="Position" >52</std:intval>
      <std:strval name="Icon16x16" >AAAf/ACAAIAAgACAAIAAgACAAIABwAPAA+ADwAHAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAD//gD//AADAAADAAADAAADAAADAAADAAADAAADAAADAAADAAADAAAHgAAPwAAP4AAP4AAP4AAPwAAHgAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;UGLOBULIB&gt;</std:strval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >218</std:intval>
      <std:intval name="Position" >53</std:intval>
      <std:strval name="Icon16x16" >AAAD8AIAAgACAAIAAgACAAIAAgAHAA+AD4APgAcAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAP+AAP8AAMAAAMAAAMAAAMAAAMAAAMAAAMAAAMAAAMAAAMAAAMAAAeAAA/AAA/AAA/gAA/AAA/AAAeAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;S-OBRAZNII&gt;</std:strval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >219</std:intval>
      <std:intval name="Position" >54</std:intval>
      <std:strval name="Icon16x16" >AAAf+BAIEAgQCBAAEAAQABAAEAAQABAIEAgQCB/4AAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAD//gH//gGABgGABgGABgGABgGAAAGAAAGAAAGAAAGAAAGAAAGAAAGAAAGABgGABgGABgGABgH//gD//gAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;ZETOVII&gt;</std:strval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >220</std:intval>
      <std:intval name="Position" >55</std:intval>
      <std:strval name="Icon16x16" >AAAA/ACAAIAAgACAAIAAgACAAIAAgACAAIAAgB+AAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAB/gAB/AABAAABAAABAAABAAABAAABAAABAAABAAABAAABAAABAAABAAABAAABAAABAAABAAD/AAD/AAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;WVELER NERAVNOPOLOCHNII&gt;</std:strval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >221</std:intval>
      <std:intval name="Position" >56</std:intval>
      <std:strval name="Icon16x16" >AAAAAD/8IAQgBCAEIAQgBCAEIAQgACAAIAAgAAAAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAAAAP//wP//wIAAQIAAQIAAQIAAQIAAQIAAQIAAQIAAQIAAQIAAQIAAQIAAAIAAAIAAAIAAAAAAAAAAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;UGOLOK NERAVNOPOLOCHNII&gt;</std:strval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >222</std:intval>
      <std:intval name="Position" >57</std:intval>
      <std:strval name="Icon16x16" >AAAf+BgAGAAYABgAGAAYABgAGAAYABgAGAAYABgAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAB/+AD/+ADAAADAAADAAADAAADAAADAAADAAADAAADAAADAAADAAADAAADAAADAAADAAADAAADAAABAAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;SPARENIE RAVNOPOLIE UGOLKI&gt;</std:strval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >223</std:intval>
      <std:intval name="Position" >58</std:intval>
      <std:strval name="Icon16x16" >AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAAAAAAAAAAAAAAAAAAAAAEgAAEgAAEgAAEgAAEgAAEgAAEgAAEgAAEgAf8/4AAAAAAAAAAAAAAAAAAAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;SPARENIE NERAVNOPOLIE UGOLKI&gt;</std:strval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >224</std:intval>
      <std:intval name="Position" >59</std:intval>
      <std:strval name="Icon16x16" >AAAAAAAAAEACQAJAAkACQAJAAkACQAJAfn4AAAAAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAAAAAAAAAAAAAEgAAEgAAEgAAEgAAEgAAEgAAEgAAEgAAEgAAEgAAEgAAEgAAEgAf8f4AAAAAAAAAAAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;NAKREST LEJAWIE UGOLKI&gt;</std:strval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >225</std:intval>
      <std:intval name="Position" >60</std:intval>
      <std:strval name="Icon16x16" >AAAAAAAAAAAAAAAAAAA/AAD8AAAAAAAAAAAAAAAAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAAAAACAAACAAACAAACAAACAAACAAACAAACAAf+AAAB/4ABAAABAAABAAABAAABAAABAAABAAABAAAAAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;KOROBKA DVUH WVELEROV&gt;</std:strval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >226</std:intval>
      <std:intval name="Position" >61</std:intval>
      <std:strval name="Icon16x16" >AAAAAAAAAAB+fkACQAJAAkACQAJAAn5+AAAAAAAAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAAAAAAAAAAAAAAAAf8/wQAAAQAAAQAAAQAAAQAAAQAAAQAAAQAAAQAAAQAAAf8/wAAAAAAAAAAAAAAAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;SPARENIE WVELERI&gt;</std:strval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >227</std:intval>
      <std:intval name="Position" >62</std:intval>
      <std:strval name="Icon16x16" >AAAAAAAAAAABgAGAAYABgAGAAYABgAGAAAAAAAAAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAAAAAAAAAAAAAAAAP//4ADAAADAAADAAADAAADAAADAAADAAADAAADAAADAAP//wAAAAAAAAAAAAAAAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;LOWEROREQUAL&gt;</std:strval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >168</std:intval>
      <std:intval name="Position" >63</std:intval>
      <std:strval name="Icon16x16" >AAAAAAAAAMADgAYAAAAAYAGAAwADgABgABgAAAAAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAAAAAAAAAAAAAAgAADgAAPAAAcAAAwAAAAYAAA4AADgAAPAAAcAAAHAAABwAAAOAAACAAAAAAAAAAAAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;GREATEROREQUAL&gt;</std:strval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >170</std:intval>
      <std:intval name="Position" >64</std:intval>
      <std:strval name="Icon16x16" >AAAAAAAADAADAADAACADAADAADAAMADAAYAAAAAAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAAAAAAAAAAAAAgAAA8AAAHAAABwAAAcAAYAAAOAAADgAAA8AAAGAAAcAAB4AADgAACAAAAAAAAAAAAAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;PRIBLEZITELINO&gt;</std:strval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >172</std:intval>
      <std:intval name="Position" >65</std:intval>
      <std:strval name="Icon16x16" >AAAAAAAAAAAAAADAD7AAAAAABvgBAAAAAAAAAAAAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAz8AAeEAAAAAAAAAAA+AAPyAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;R&gt;</std:strval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >165</std:intval>
      <std:intval name="Position" >66</std:intval>
      <std:strval name="Icon16x16" >AAAAAAfgCBAQCAJkIkQixCJkIiQiJBOICBAH4AAAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAAAAADgAAYYABgGACABACIJAEIYgEIQgIIwQIIgQIP4QAIIAEIIgEIIgCPxACABABgGAAYYAAHgAAAAAAAAA</std:strval>
    </std:typeval>
    <std:typeval name="EngineeringSymbol">
      <std:strval name="Name" >&lt;C&gt;</std:strval>
      <std:strval name="Font" >GostAI.pfb</std:strval>
      <std:intval name="Charcode" >192</std:intval>
      <std:intval name="Position" >67</std:intval>
      <std:strval name="Icon16x16" >AAAAAAPACBARiAJAJCQkBCQEJAQCQBGICBADwAAAAAA=</std:strval>
      <std:strval name="Icon22x22" >AAAAAAAAADAAAc4AAgEABADACPxAEYYgEQIgEQAgIQAQIQAQEQAgEQIgEIYgCHxADADABgGAAc4AADAAAAAAAAAA</std:strval>
    </std:typeval>
  </std:node>
</std:node>
